{
	"info": {
		"_postman_id": "7f0f8150-4622-4c80-820c-020f59e9be9a",
		"name": "Admin Panal",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28411780",
		"_collection_link": "https://universal-meadow-6789.postman.co/workspace/TS4U-API-Collections~f56101d1-df6e-4818-8604-3687e61deb90/collection/20098857-7f0f8150-4622-4c80-820c-020f59e9be9a?action=share&source=collection_link&creator=28411780"
	},
	"item": [
		{
			"name": "Common Service",
			"item": [
				{
					"name": "Vimeo exporter, Slider, Sengrid",
					"item": [
						{
							"name": "Update",
							"item": [
								{
									"name": "Vimeo Settings",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I want to update the vimeo exporter",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"senderEmail\": \"shiblu@techserve4u.com\",\r\n    \"apiKey\": \"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\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/settings/update",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"settings",
																"update"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As an admin, I shouldn't be able to update the settings without token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to get all the webinar lists without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"//Validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to get all the slider without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the slider without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the slider without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request of slider without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"senderEmail\": \"shiblu@techserve4u.com\",\r\n    \"apiKey\": \"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\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/settings/update",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"settings",
																"update"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an admin, I shouldn't be able to update the settings without body data",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to get all the webinar lists without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"//Validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to get all the slider without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the slider without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the slider without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request of slider without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/settings/update",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"settings",
																"update"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an admin, I shouldn't be able to update the settings without sender email",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to get all the webinar lists without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"//Validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to get all the slider without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the slider without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the slider without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request of slider without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"senderEmail\": \"shiblu@techserve4u.com\",\r\n    \"apiKey\": \"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\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/settings/update",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"settings",
																"update"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an admin, I shouldn't be able to update the settings without sender apiKey",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to get all the webinar lists without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"//Validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to get all the slider without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the slider without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request of slider without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"senderEmail\": \"shiblu@techserve4u.com\",\r\n\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/settings/update",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"settings",
																"update"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Slider Settings",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to update the sliders",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"sliders\": [\r\n        {\r\n            \"key\": 4311,\r\n            \"title\": \"test1\",\r\n            \"image\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/ts4u-slider/1632944200166-slide1-%281%29.jpg\",\r\n            \"index\": 0\r\n        },\r\n        {\r\n            \"key\": 4312,\r\n            \"title\": \"sdf\",\r\n            \"image\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/ts4u-slider/1632943199289-slide1-%281%29.jpg\",\r\n            \"index\": 1\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/settings/update",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"settings",
																"update"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Sliders",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to see all the sliders",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/settings/get/sliders",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"settings",
														"get",
														"sliders"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I shouldn't be able to see all the sliders the without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the webinar lists without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"//Validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the slider without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the slider without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the slider without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request of slider without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/settings/get/sliders",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"settings",
														"get",
														"sliders"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get sendgrid email",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to get on the sengrid credentials email",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/settings/get/email",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"settings",
														"get",
														"email"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I shouldn't be able to get on the sengrid credentials email without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the webinar lists without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"//Validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the sendgrid email without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the sendgrid email without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the sendgrid email without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request of sendgrid email without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/settings/get/email",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"settings",
														"get",
														"email"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "History logs",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I want to upload the logs history",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": \"629e3c7e977bbdb1c9de1c9c\",\r\n    \"moduleName\": \"assignments\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/settings/history-logs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"settings",
														"history-logs"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should be able to upload the logs history without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the webinar lists without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"//Validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the slider without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the slider without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the slider without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request of slider without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": \"629e3c7e977bbdb1c9de1c9c\",\r\n    \"moduleName\": \"assignments\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/settings/history-logs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"settings",
														"history-logs"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should be able to upload the logs history without module name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the webinar lists without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"//Validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the slider without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the slider without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the slider without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request of slider without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": \"629e3c7e977bbdb1c9de1c9c\",\r\n    \"moduleName\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/settings/history-logs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"settings",
														"history-logs"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should be able to upload the logs history without body id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the webinar lists without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"//Validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the slider without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the slider without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Id is required' message when executing to get all the slider without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Id is required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request of slider without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \r\n    \"moduleName\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/settings/history-logs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"settings",
														"history-logs"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "URL shortner",
					"item": [
						{
							"name": "Get all",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to see on the short url",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 3000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/short-url/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"short-url",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I shouldn't be able to view the url without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Admin should get Bad request to view the url without token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Admin shouldn't be able to view the url without token,the response should show less than 3000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
															"});\r",
															"pm.test(\"Admin should get 400 status code to view the url without token\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400, 404]);\r",
															"});\r",
															"pm.test(\"Body matches with authorization required\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/short-url/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"short-url",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Desktop App",
					"item": [
						{
							"name": "Get all",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to view on the desktop apps information.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"pm.test(\"Response time is less than 3000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/app/desktop/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"app",
														"desktop",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I shouldn't be able to view the desktop app without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the desktop apps information lists without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"//Validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the desktop apps information lists without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the desktop apps information lists without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the desktop apps information lists without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request of desktop apps information list without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/app/desktop/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"app",
														"desktop",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Webinar",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an admin, I want to see the all previous webinar",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/webinar/get",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"webinar",
												"get"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "As an admin, I shouldn't be able to create on the webinar without token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing to get all the webinar lists without inputting the token\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to get all the webinar lists without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"//Validate the status code name\r",
													"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the webinar lists without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the webinar lists without inputting the token\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"\r",
													"});\r",
													"\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request of webinar list without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/webinar/get",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"webinar",
												"get"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Navigation Management",
					"item": [
						{
							"name": "See all",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I want to see navigation the management system",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Response time is less than 200ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/navigation/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"navigation",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I shouldn't be able to see navigation the management without token.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the webinar lists without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"//Validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the navigation without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the navigation without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the navigation without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request of navigation without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/navigation/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"navigation",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Add Navigation",
							"item": [
								{
									"name": "positive",
									"item": [
										{
											"name": "As an admin, I want to add the navigation management",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
															"});\r",
															"pm.test(\"Response time is less than 200ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Function to generate a random MongoDB ObjectID\r",
															"function generateRandomObjectId() {\r",
															"    const timestamp = Math.floor(new Date().getTime() / 1000).toString(16).padStart(8, '0');\r",
															"    const machineId = Math.floor(Math.random() * 16777216).toString(16).padStart(6, '0');\r",
															"    const processId = Math.floor(Math.random() * 65536).toString(16).padStart(4, '0');\r",
															"    const counter = Math.floor(Math.random() * 16777216).toString(16).padStart(6, '0');\r",
															"    \r",
															"    return `${timestamp}${machineId}${processId}${counter}`;\r",
															"}\r",
															"\r",
															"// Set the generated random ObjectID as a variable\r",
															"const randomObjectId = generateRandomObjectId();\r",
															"pm.variables.set(\"randomObjectId\", randomObjectId);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"type\": \"program\",\r\n    \"program\": \"{{randomObjectId}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/navigation/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"navigation",
														"add"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I shouldn't be able to add the navigation management without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to add navigation without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"//Validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to add navigation without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to add navigation without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to add navigation without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request of webinar list without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Function to generate a random MongoDB ObjectID\r",
															"function generateRandomObjectId() {\r",
															"    const timestamp = Math.floor(new Date().getTime() / 1000).toString(16).padStart(8, '0');\r",
															"    const machineId = Math.floor(Math.random() * 16777216).toString(16).padStart(6, '0');\r",
															"    const processId = Math.floor(Math.random() * 65536).toString(16).padStart(4, '0');\r",
															"    const counter = Math.floor(Math.random() * 16777216).toString(16).padStart(6, '0');\r",
															"    \r",
															"    return `${timestamp}${machineId}${processId}${counter}`;\r",
															"}\r",
															"\r",
															"// Set the generated random ObjectID as a variable\r",
															"const randomObjectId = generateRandomObjectId();\r",
															"pm.variables.set(\"randomObjectId\", randomObjectId);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"type\": \"program\",\r\n    \"program\": \"{{randomObjectId}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/navigation/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"navigation",
														"add"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I shouldn't be able to add the navigation on without data type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to add navigation without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"//Validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to add navigation without inputting the Body data\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to add navigation without inputting the Body data\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Something went wrong' message when executing to add navigation without inputting the Body data\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"false\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request of add navigation without inputting the Body data\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Function to generate a random MongoDB ObjectID\r",
															"function generateRandomObjectId() {\r",
															"    const timestamp = Math.floor(new Date().getTime() / 1000).toString(16).padStart(8, '0');\r",
															"    const machineId = Math.floor(Math.random() * 16777216).toString(16).padStart(6, '0');\r",
															"    const processId = Math.floor(Math.random() * 65536).toString(16).padStart(4, '0');\r",
															"    const counter = Math.floor(Math.random() * 16777216).toString(16).padStart(6, '0');\r",
															"    \r",
															"    return `${timestamp}${machineId}${processId}${counter}`;\r",
															"}\r",
															"\r",
															"// Set the generated random ObjectID as a variable\r",
															"const randomObjectId = generateRandomObjectId();\r",
															"pm.variables.set(\"randomObjectId\", randomObjectId);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"type\": \"\",\r\n    \"program\": \"\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/navigation/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"navigation",
														"add"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I shouldn't be able to add the navigation on without program id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to add navigation without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"//Validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to add navigation without inputting the Body data\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to add navigation without inputting the Body data\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request of add navigation without inputting the Body data\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Function to generate a random MongoDB ObjectID\r",
															"function generateRandomObjectId() {\r",
															"    const timestamp = Math.floor(new Date().getTime() / 1000).toString(16).padStart(8, '0');\r",
															"    const machineId = Math.floor(Math.random() * 16777216).toString(16).padStart(6, '0');\r",
															"    const processId = Math.floor(Math.random() * 65536).toString(16).padStart(4, '0');\r",
															"    const counter = Math.floor(Math.random() * 16777216).toString(16).padStart(6, '0');\r",
															"    \r",
															"    return `${timestamp}${machineId}${processId}${counter}`;\r",
															"}\r",
															"\r",
															"// Set the generated random ObjectID as a variable\r",
															"const randomObjectId = generateRandomObjectId();\r",
															"pm.variables.set(\"randomObjectId\", randomObjectId);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \r\n    \"program\": \"\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/navigation/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"navigation",
														"add"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an Admin, I can be able to update the previous history.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response time is less than 200ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Successful PATCH request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"portalGuide\": true,\r\n    \"myImportantLink\": true,\r\n    \"myProgram\": false,\r\n    \"myE2eProgramAgenda\": false,\r\n    \"myPurchasedItem\": false,\r\n    \"myDocument\": false,\r\n    \"myUploadedDocument\": false,\r\n    \"myMockInterview\": false,\r\n    \"reviewMockInterview\": false,\r\n    \"myCalender\": false,\r\n    \"myPayment\": false,\r\n    \"myFeedback\": false,\r\n    \"myIssue\": false,\r\n    \"myShoutOut\": false,\r\n    \"myDayToDayActivity\": false,\r\n    \"helpCenter\": false,\r\n    \"nearMe\": false,\r\n    \"myGiftCard\": false,\r\n    \"changePassword\": false,\r\n    \"myProfile\": false,\r\n    \"myAgreement\": false,\r\n    \"myJobSupport\": false,\r\n    \"showTell\": false,\r\n    \"myMedia\": false,\r\n    \"family\": false,\r\n    \"template\": false,\r\n    \"diagram\": false,\r\n    \"technicalTest\": false,\r\n    \"myProgress\": false,\r\n    \"leaderboard\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/navigation/update/64a500401fd0b20020772b4d",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"navigation",
														"update",
														"64a500401fd0b20020772b4d"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an Admin, I can be able to update the previous history without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to add navigation without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"//Validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to add navigation without inputting the Body data\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to add navigation without inputting the Body data\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request of add navigation without inputting the Body data\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"portalGuide\": true,\r\n    \"myImportantLink\": true,\r\n    \"myProgram\": false,\r\n    \"myE2eProgramAgenda\": false,\r\n    \"myPurchasedItem\": false,\r\n    \"myDocument\": false,\r\n    \"myUploadedDocument\": false,\r\n    \"myMockInterview\": false,\r\n    \"reviewMockInterview\": false,\r\n    \"myCalender\": false,\r\n    \"myPayment\": false,\r\n    \"myFeedback\": false,\r\n    \"myIssue\": false,\r\n    \"myShoutOut\": false,\r\n    \"myDayToDayActivity\": false,\r\n    \"helpCenter\": false,\r\n    \"nearMe\": false,\r\n    \"myGiftCard\": false,\r\n    \"changePassword\": false,\r\n    \"myProfile\": false,\r\n    \"myAgreement\": false,\r\n    \"myJobSupport\": false,\r\n    \"showTell\": false,\r\n    \"myMedia\": false,\r\n    \"family\": false,\r\n    \"template\": false,\r\n    \"diagram\": false,\r\n    \"technicalTest\": false,\r\n    \"myProgress\": false,\r\n    \"leaderboard\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/navigation/update/64a500401fd0b20020772b4d",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"navigation",
														"update",
														"64a500401fd0b20020772b4d"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an Admin, I can be able to update the previous history without portalguide data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to add navigation without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"//Validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to add navigation without inputting the Body data\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to add navigation without inputting the Body data\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request of add navigation without inputting the Body data\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    ,\r\n    \"myImportantLink\": true,\r\n    \"myProgram\": false,\r\n    \"myE2eProgramAgenda\": false,\r\n    \"myPurchasedItem\": false,\r\n    \"myDocument\": false,\r\n    \"myUploadedDocument\": false,\r\n    \"myMockInterview\": false,\r\n    \"reviewMockInterview\": false,\r\n    \"myCalender\": false,\r\n    \"myPayment\": false,\r\n    \"myFeedback\": false,\r\n    \"myIssue\": false,\r\n    \"myShoutOut\": false,\r\n    \"myDayToDayActivity\": false,\r\n    \"helpCenter\": false,\r\n    \"nearMe\": false,\r\n    \"myGiftCard\": false,\r\n    \"changePassword\": false,\r\n    \"myProfile\": false,\r\n    \"myAgreement\": false,\r\n    \"myJobSupport\": false,\r\n    \"showTell\": false,\r\n    \"myMedia\": false,\r\n    \"family\": false,\r\n    \"template\": false,\r\n    \"diagram\": false,\r\n    \"technicalTest\": false,\r\n    \"myProgress\": false,\r\n    \"leaderboard\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/navigation/update/64a500401fd0b20020772b4d",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"navigation",
														"update",
														"64a500401fd0b20020772b4d"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an Admin, I can be able to update the previous history without myimportent link",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to add navigation without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"//Validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to add navigation without inputting the Body data\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to add navigation without inputting the Body data\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request of add navigation without inputting the Body data\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"portalGuide\": true,\r\n    ,\r\n    \"myProgram\": false,\r\n    \"myE2eProgramAgenda\": false,\r\n    \"myPurchasedItem\": false,\r\n    \"myDocument\": false,\r\n    \"myUploadedDocument\": false,\r\n    \"myMockInterview\": false,\r\n    \"reviewMockInterview\": false,\r\n    \"myCalender\": false,\r\n    \"myPayment\": false,\r\n    \"myFeedback\": false,\r\n    \"myIssue\": false,\r\n    \"myShoutOut\": false,\r\n    \"myDayToDayActivity\": false,\r\n    \"helpCenter\": false,\r\n    \"nearMe\": false,\r\n    \"myGiftCard\": false,\r\n    \"changePassword\": false,\r\n    \"myProfile\": false,\r\n    \"myAgreement\": false,\r\n    \"myJobSupport\": false,\r\n    \"showTell\": false,\r\n    \"myMedia\": false,\r\n    \"family\": false,\r\n    \"template\": false,\r\n    \"diagram\": false,\r\n    \"technicalTest\": false,\r\n    \"myProgress\": false,\r\n    \"leaderboard\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/navigation/update/64a500401fd0b20020772b4d",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"navigation",
														"update",
														"64a500401fd0b20020772b4d"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "My Navigations",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I want to navigations on my management system",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/navigation/mynavigations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"navigation",
														"mynavigations"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I want to navigations on my management system without tokan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to the my navigations information lists without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"//Validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to the my navigations information lists without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to the my navigations information lists without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to the my navigations lists without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request of my navigations list without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/navigation/mynavigations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"navigation",
														"mynavigations"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Checking Page (Immigration)",
			"item": [
				{
					"name": "H-1B users (immigrationRoutes)",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Admin should be able to get all the H1 B sign up List",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin get all the H-1B sign-up List successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin get all the H-1B sign-up List within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/immigration/getall/h1b",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"immigration",
												"getall",
												"h1b"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Admin should not be able to get all the H1 B sign up list without giving the token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing to get all the H-1B sign-up lists without inputting the token\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to get all the H-1B sign-up lists without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"//Validate the status code name\r",
													"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the H-1B sign-up lists without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the H-1B sign-up lists without inputting the token\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"\r",
													"});\r",
													"\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request of H-1B sign up list without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/immigration/getall/h1b",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"immigration",
												"getall",
												"h1b"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "E-B3 users (immigrationRoutes)",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Admin should be able to get all the EB-3 Sign Up List",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin get all the EB-3 sign-up List successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin get all the EB-3 sign-up List within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/immigration/getall/eb3",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"immigration",
												"getall",
												"eb3"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Admin should not be able to get all the EB-3 Sign Up List without giving the token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin get 400 status code when he will try to gell all the EB-3 sign-up List without giving token\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Without giving the token Admin get all the EB-3 sign-up List within 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/immigration/getall/eb3",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"immigration",
												"getall",
												"eb3"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "F1 Students (immigrationRoutes)",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Update immigration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin Updated immigration successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin Updated immigration within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Israk\",\r\n    \"lastName\": \"Monisha\",\r\n    \"middleName\": \"Zahan\",\r\n    \"dob\": \"2021-05-01\",\r\n    \"phone\": \"+8803454534534\",\r\n    \"whatsApp\": \"sadasd\",\r\n    \"email\": \"israkzahan21@gmail.com\",\r\n    \"linkedin\": \"www.linkedin.com/in/israk-zahan-701996229\",\r\n    \"isGraduate\": true,\r\n    \"isCse\": true,\r\n    \"graduateYear\": \"2022\",\r\n    \"certificateList\": \"\",\r\n    \"currentRole\": \"\",\r\n    \"communicationRating\": 5,\r\n    \"isMarried\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/immigration/update/63850d575df5a60150b633eb",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"immigration",
												"update",
												"63850d575df5a60150b633eb"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Immigration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin deleted the immigration successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin deleted immigration within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Israk\",\r\n    \"lastName\": \"Monisha\",\r\n    \"middleName\": \"Zahan\",\r\n    \"dob\": \"2021-05-01\",\r\n    \"phone\": \"+8803454534534\",\r\n    \"whatsApp\": \"sadasd\",\r\n    \"email\": \"israkzahan21@gmail.com\",\r\n    \"linkedin\": \"www.linkedin.com/in/israk-zahan-701996229\",\r\n    \"isGraduate\": true,\r\n    \"isCse\": true,\r\n    \"graduateYear\": \"2022\",\r\n    \"certificateList\": \"\",\r\n    \"currentRole\": \"\",\r\n    \"communicationRating\": 5,\r\n    \"isMarried\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/immigration/delete/63850d575df5a60150b633eb",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"immigration",
												"delete",
												"63850d575df5a60150b633eb"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Update immigration without token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get '400' status code when executing to do Updated immigration without inputting the token\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to do Updated immigration without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"//Validate the status code name\r",
													"pm.test(\"Admin should get the 'Bad Request' status code name when executing to do updated immigration without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate the response body\r",
													"pm.test(\"Admin should get the 'Authorization required' message when executing to updated immigration without inputting the token\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"\r",
													"});\r",
													"\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request for updated immigration without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"\",\r\n    \"lastName\": \"Monisha\",\r\n    \"middleName\": \"Zahan\",\r\n    \"dob\": \"2021-05-01\",\r\n    \"phone\": \"+8803454534534\",\r\n    \"whatsApp\": \"sadasd\",\r\n    \"email\": \"israkzahan21@gmail.com\",\r\n    \"linkedin\": \"www.linkedin.com/in/israk-zahan-701996229\",\r\n    \"isGraduate\": true,\r\n    \"isCse\": true,\r\n    \"graduateYear\": \"2022\",\r\n    \"certificateList\": \"\",\r\n    \"currentRole\": \"\",\r\n    \"communicationRating\": 5,\r\n    \"isMarried\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/immigration/update/63850d575df5a60150b633eb",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"immigration",
												"update",
												"63850d575df5a60150b633eb"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update immigration without body data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get '400' status code when executing to do Updated immigration without inputting the token\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to do Updated immigration without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"//Validate the status code name\r",
													"pm.test(\"Admin should get the 'Bad Request' status code name when executing to do updated immigration without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate the response body\r",
													"pm.test(\"Admin should get the 'Authorization required' message when executing to updated immigration without inputting the token\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"\r",
													"});\r",
													"\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request for updated immigration without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/immigration/update/63850d575df5a60150b633eb",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"immigration",
												"update",
												"63850d575df5a60150b633eb"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Immigration without token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get '400' status code when executing to deleted the immigration without inputting the token\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to deleted immigration without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"//Validate the status code name\r",
													"pm.test(\"Admin should get the 'Bad Request' status code name when executing to deleted immigration without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"Admin should get the 'Authorization required' message when executing to deleted immigration without inputting the token\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Validate the response header of the request for deleted immigration without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Israk\",\r\n    \"lastName\": \"Monisha\",\r\n    \"middleName\": \"Zahan\",\r\n    \"dob\": \"2021-05-01\",\r\n    \"phone\": \"+8803454534534\",\r\n    \"whatsApp\": \"sadasd\",\r\n    \"email\": \"israkzahan21@gmail.com\",\r\n    \"linkedin\": \"www.linkedin.com/in/israk-zahan-701996229\",\r\n    \"isGraduate\": true,\r\n    \"isCse\": true,\r\n    \"graduateYear\": \"2022\",\r\n    \"certificateList\": \"\",\r\n    \"currentRole\": \"\",\r\n    \"communicationRating\": 5,\r\n    \"isMarried\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/immigration/delete/63850d575df5a60150b633eb",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"immigration",
												"delete",
												"63850d575df5a60150b633eb"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Immigration without body data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get '400' status code when executing to deleted the immigration without inputting the token\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to deleted immigration without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"//Validate the status code name\r",
													"pm.test(\"Admin should get the 'Bad Request' status code name when executing to deleted immigration without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"Admin should get the 'Authorization required' message when executing to deleted immigration without inputting the token\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Validate the response header of the request for deleted immigration without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/immigration/delete/63850d575df5a60150b633eb",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"immigration",
												"delete",
												"63850d575df5a60150b633eb"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "F1 Sign Up List",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Admin should be able to check the immigration Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin checked the immigration Status successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin checked the immigration Status within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/immigration/check-status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"immigration",
												"check-status"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Admin should not be able to invite for the immigration to keep the email field empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing to invite students for the immigration without inputting  the email\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to invite students for the immigration without inputting  the email\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"Admin should get the 'Bad Request' status code name when executing to invite students for the immigration without inputting  the email\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"Admin should get the 'Immigration form not found' message when executing to invite students for the immigration without inputting  the email\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Immigration form not found\");\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate the response header of the request to invite students for the immigration without inputting  the email\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"61127e75d6508fb644902299\",\r\n    \"email\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/immigration/invite",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"immigration",
												"invite"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin should not be able to invite for the immigration to keep the email field without program id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing to invite students for the immigration without inputting  the email\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to invite students for the immigration without inputting  the email\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"Admin should get the 'Bad Request' status code name when executing to invite students for the immigration without inputting  the email\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"Admin should get the 'Immigration form not found' message when executing to invite students for the immigration without inputting  the email\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Immigration form not found\");\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate the response header of the request to invite students for the immigration without inputting  the email\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"program\": \"\",\r\n    \"session\": \"61127e75d6508fb644902299\",\r\n    \"email\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/immigration/invite",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"immigration",
												"invite"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin should not be able to invite for the immigration to keep the email field without session id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing to invite students for the immigration without inputting  the email\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to invite students for the immigration without inputting  the email\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"Admin should get the 'Bad Request' status code name when executing to invite students for the immigration without inputting  the email\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validate the response header of the request to invite students for the immigration without inputting  the email\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"\",\r\n    \"email\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/immigration/invite",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"immigration",
												"invite"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin should not be able to check the immigration Status without putting the email id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing to check the immigration Status  without inputting  the email\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to check the immigration Status without inputting  the email\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"Admin should get the 'Bad Request' status code name when executing to check the immigration Status without inputting  the email\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"Admin should get the 'email is required' message when executing to  check the immigration Status without inputting  the email\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"    pm.expect(pm.response.text()).to.include(\"email is required\");\r",
													"\r",
													"});\r",
													"\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request to invite students for the immigration without inputting  the email\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/immigration/check-status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"immigration",
												"check-status"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "H-1B Contents",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a content writer, I will be able Create  a Content",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"H-1B content Create ID\", jsonData.content._id);\r",
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin created a content successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin created the content within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"{{$randomJobTitle}}\",\r\n    \"description\": \"\",\r\n    \"isPublished\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/immigration/content/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"immigration",
														"content",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a content writer, I won't be able Create  a Content to keeping the title field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Content writer should get the '400' status code when executing to create a content without inputting the title\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Content writer should get the response below 2000 ms when executing to create a content without inputting the title\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to create a content without inputting the title\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Content writer should get the 'Title is required' message when executing to create a content without inputting the title\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Title is required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create a content without inputting the title\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"\",\r\n    \"description\": \"\",\r\n    \"isPublished\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/immigration/content/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"immigration",
														"content",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a content writer, I won't be able Create  a Content to keeping the title field without title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Content writer should get the '400' status code when executing to create a content without inputting the title\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Content writer should get the response below 2000 ms when executing to create a content without inputting the title\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to create a content without inputting the title\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Content writer should get the 'Title is required' message when executing to create a content without inputting the title\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Title is required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create a content without inputting the title\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"\",\r\n    \"description\": \"\",\r\n    \"isPublished\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/immigration/content/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"immigration",
														"content",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a content writer, I won't be able Create  a Content to keeping the title field without description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Content writer should get the '400' status code when executing to create a content without inputting the title\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Content writer should get the response below 2000 ms when executing to create a content without inputting the title\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to create a content without inputting the title\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Content writer should get the 'Title is required' message when executing to create a content without inputting the title\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Title is required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create a content without inputting the title\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"\",\r\n    \"description\": \"\",\r\n    \"isPublished\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/immigration/content/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"immigration",
														"content",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a content writer, I won't be able Create  a Content to keeping the title field without published status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Content writer should get the '400' status code when executing to create a content without inputting the title\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Content writer should get the response below 2000 ms when executing to create a content without inputting the title\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to create a content without inputting the title\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Content writer should get the 'Title is required' message when executing to create a content without inputting the title\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Title is required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create a content without inputting the title\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"\",\r\n    \"description\": \"\",\r\n    \"isPublished\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/immigration/content/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"immigration",
														"content",
														"create"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get all",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a content writer, I will be able get all H-1b contents",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Content writter get all the H-1b contents successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Content writter get all the H-1b contents within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/immigration/content/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"immigration",
														"content",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a content writer, I won't be able get all H-1b contents without giving the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Immigration spacalist should get the '400' status code when executing to get all H-1b contents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Immigration spacalist should get the response below 2000 ms when executing to get all H-1b contents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Immigration spacalist should get the 'Bad Request' status code name when executing to get all H-1b contents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Immigration spacalist should get the 'Authorization required' message when executing to get all H-1b contents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to get all H-1b contents without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/immigration/content/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"immigration",
														"content",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get active",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a content writer, I will be able get all H-1b active contents",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"content_id\", jsonData.contents._id);\r",
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Content writter get all the H-1b contents successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Content writter get all the H-1b contents within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/immigration/content/getactive",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"immigration",
														"content",
														"getactive"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Edit",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a content writer, I will be able to edit all H-1b active contents",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Content writter edited all the H-1b contents successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Content writter edited all the H-1b contents within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"description\": \"<p>test description</p>\",\r\n    \"isPublished\": true,\r\n    \"title\": \"{{$randomJobTitle}}\",\r\n    \"slug\": \"For-test\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/immigration/content/edit/{{H-1B content Create ID}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"immigration",
														"content",
														"edit",
														"{{H-1B content Create ID}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a content writer, I won't be able to edit all H-1b active contents without giving token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Content writer should get the '400' status code when executing to edit all H-1b contents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Content writer should get the response below 2000 ms when executing to edit all H-1b contents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to edit all H-1b contents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Content writer should get the 'Authorization required' message when executing to edit all H-1b contents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to edit all H-1b contents without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"description\": \"<p>test description</p>\",\r\n    \"isPublished\": true,\r\n    \"title\": \"{{$randomJobTitle}}\",\r\n    \"slug\": \"For-test\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/immigration/content/edit/{{H-1B content Create ID}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"immigration",
														"content",
														"edit",
														"{{H-1B content Create ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a content writer, I won't be able to edit all H-1b active contents without description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Content writer should get the '400' status code when executing to edit all H-1b contents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Content writer should get the response below 2000 ms when executing to edit all H-1b contents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to edit all H-1b contents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Content writer should get the 'Authorization required' message when executing to edit all H-1b contents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to edit all H-1b contents without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"description\": \"\",\r\n    \"isPublished\": true,\r\n    \"title\": \"{{$randomJobTitle}}\",\r\n    \"slug\": \"For-test\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/immigration/content/edit/{{H-1B content Create ID}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"immigration",
														"content",
														"edit",
														"{{H-1B content Create ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a content writer, I won't be able to edit all H-1b active contents without title id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Content writer should get the '400' status code when executing to edit all H-1b contents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Content writer should get the response below 2000 ms when executing to edit all H-1b contents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to edit all H-1b contents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Content writer should get the 'Title is required' message when executing to edit all H-1b contents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Title is required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to edit all H-1b contents without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"description\": \"<p>test description</p>\",\r\n    \"isPublished\": true,\r\n    \"title\": \"\",\r\n    \"slug\": \"For-test\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/immigration/content/edit/{{H-1B content Create ID}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"immigration",
														"content",
														"edit",
														"{{H-1B content Create ID}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a content writer, I will be able to delete all H-1b active contents",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Content writter deleted all the H-1b contents successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Content writter deleted all the H-1b contents within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Content for text1-Israk Zahan\",\r\n    \"description\": \"\",\r\n    \"isPublished\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/content/delete/{{H-1B content Create ID}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"content",
														"delete",
														"{{H-1B content Create ID}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a content writer, I won't be able to delete all H-1b active contents without giving the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Content writer should get the '400' status code when executing to delete all H-1b contents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Content writer should get the response below 2000 ms when executing to delete all H-1b contents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to delete all H-1b contents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Content writer should get the 'Authorization required' message when executing to delete all H-1b contents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to edit all H-1b contents without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Content for text1-Israk Zahan\",\r\n    \"description\": \"\",\r\n    \"isPublished\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/content/delete/{{H-1B content Create ID}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"content",
														"delete",
														"{{H-1B content Create ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a content writer, I won't be able to delete all H-1b active contents without giving the isPublished status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Content writer should get the '400' status code when executing to delete all H-1b contents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Content writer should get the response below 2000 ms when executing to delete all H-1b contents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to delete all H-1b contents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to edit all H-1b contents without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Content for text1-Israk Zahan\",\r\n    \"description\": \"\",\r\n    \"isPublished\": \r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/content/delete/{{H-1B content Create ID}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"content",
														"delete",
														"{{H-1B content Create ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a content writer, I won't be able to delete all H-1b active contents without giving the title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Content writer should get the '400' status code when executing to delete all H-1b contents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Content writer should get the response below 2000 ms when executing to delete all H-1b contents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to delete all H-1b contents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Content writer should get the 'Authorization required' message when executing to delete all H-1b contents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to edit all H-1b contents without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"\",\r\n    \"description\": \"\",\r\n    \"isPublished\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/content/delete/{{H-1B content Create ID}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"content",
														"delete",
														"{{H-1B content Create ID}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Content Service",
			"item": [
				{
					"name": "Blog",
					"item": [
						{
							"name": "Create Blog",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to create the blog",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"article_id\", jsonData.article._id);\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"{{$randomFullName}}\",\r\n    \"description\": \"vsd\",\r\n    \"isPublished\": true,\r\n    \"thumbnail\": \"\",\r\n    \"tags\": [],\r\n    \"metaDescription\": \"\",\r\n    \"metaTitle\": \"\",\r\n    \"platform\": \"ts4u\",\r\n    \"slug\": \"das\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/blog/article/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"article",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to create a blog without giving the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to create a blog without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to create a blog without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to create a blog without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to create a blog without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to create a content without inputting the title\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Mituldas bro1 2\",\r\n    \"description\": \"vsd\",\r\n    \"isPublished\": true,\r\n    \"thumbnail\": \"\",\r\n    \"tags\": [],\r\n    \"metaDescription\": \"\",\r\n    \"metaTitle\": \"\",\r\n    \"platform\": \"ts4u\",\r\n    \"slug\": \"das\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/blog/article/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"article",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to create a blog without giving the blog title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to create a blog without inputting the blog title\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to create a blog without inputting the title\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to create a blog without inputting the title\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'title and description is required' message when executing to create a content without inputting the title\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"title and description is required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create a blog without inputting the title\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"\",\r\n    \"description\": \"vsd\",\r\n    \"isPublished\": true,\r\n    \"thumbnail\": \"\",\r\n    \"tags\": [],\r\n    \"metaDescription\": \"\",\r\n    \"metaTitle\": \"\",\r\n    \"platform\": \"ts4u\",\r\n    \"slug\": \"das\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/blog/article/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"article",
														"create"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get all",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an Admin, I should be able to get all the blog article",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2100ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2100);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 10,\r\n    \"state\": \"all\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/blog/article/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"article",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an Admin, I should not be able to get all the blog article without giving the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the blog article without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the blog article without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to get all the blog article without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the blog article without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to get all the blog article without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 10,\r\n    \"state\": \"all\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/blog/article/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"article",
														"getall"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an Admin, I should not be able to get all the blog article to keeping the page field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the blog article without page number\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the blog article without page number\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the blog article without page number\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to get all the blog article without page number\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"page\": ,\r\n    \"limit\": 10,\r\n    \"state\": \"all\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/blog/article/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"article",
														"getall"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an Admin, I should not be able to get all the blog article to keeping the state field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the blog article without the state field\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the blog article without the state field\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the blog article without the state field\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Something went wrong' message when executing to get all the blog article without the state field\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to get all the blog article without the state field\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 10,\r\n    \"state\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/blog/article/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"article",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Edit Blog By ID",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to edit the blog article",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});\r",
															"pm.test(\"Article key matched\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"article\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Mitul Das\",\r\n    \"description\": \"<p>I am not student</p>\",\r\n    \"isPublished\": true,\r\n    \"thumbnail\": \"\",\r\n    \"tags\": [],\r\n    \"metaDescription\": \"\",\r\n    \"metaTitle\": \"\",\r\n    \"platform\": \"ts4u\",\r\n    \"slug\": \"mfgvc3g\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/blog/article/edit/{{article_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"article",
														"edit",
														"{{article_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to edit the blog article without giving the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit the blog article without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to edit the blog article without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to edit the blog article without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to edit the blog article without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to edit the blog article without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Mitul\",\r\n    \"description\": \"<p>I am not</p>\",\r\n    \"isPublished\": true,\r\n    \"thumbnail\": \"\",\r\n    \"tags\": [],\r\n    \"metaDescription\": \"\",\r\n    \"metaTitle\": \"\",\r\n    \"platform\": \"ts4u\",\r\n    \"slug\": \"mfgvc3g\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/blog/article/edit/{{article_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"article",
														"edit",
														"{{article_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to edit the blog article to keeping the title field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit the blog article without the title field\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to edit the blog article without the title field\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to edit the blog article without the title field\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'title, description is required' message when executing to edit the blog article without the title field\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"title, description is required\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to edit the blog article without the title field\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"\",\r\n    \"description\": \"<p>I am not student</p>\",\r\n    \"isPublished\": true,\r\n    \"thumbnail\": \"\",\r\n    \"tags\": [],\r\n    \"metaDescription\": \"\",\r\n    \"metaTitle\": \"\",\r\n    \"platform\": \"ts4u\",\r\n    \"slug\": \"mfgvc3g\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/blog/article/edit/{{article_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"article",
														"edit",
														"{{article_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to edit the blog article to keeping the description field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit the blog article without the description field\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to edit the blog article without the description field\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to edit the blog article without the description field\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'title, description is required' message when executing to edit the blog article without the description field\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"title, description is required\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to edit the blog article without the description field\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Mitul\",\r\n    \"description\": \"\",\r\n    \"isPublished\": true,\r\n    \"thumbnail\": \"\",\r\n    \"tags\": [],\r\n    \"metaDescription\": \"\",\r\n    \"metaTitle\": \"\",\r\n    \"platform\": \"ts4u\",\r\n    \"slug\": \"mfgvc3g\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/blog/article/edit/{{article_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"article",
														"edit",
														"{{article_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete blog",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an Admin, I should be able to delete the blog article",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful DELETE request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Mitul\",\r\n    \"description\": \"<p>I am not</p>\",\r\n    \"isPublished\": true,\r\n    \"thumbnail\": \"\",\r\n    \"tags\": [],\r\n    \"metaDescription\": \"\",\r\n    \"metaTitle\": \"\",\r\n    \"platform\": \"ts4u\",\r\n    \"slug\": \"mfgvc3g\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/blog/article/delete/{{article_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"article",
														"delete",
														"{{article_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an Admin, I should not be able to delete the blog article without giving the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to delete all the blog article without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to delete all the blog article without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to delete all the blog article without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to delete all the blog article without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to delete all the blog article without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Mitul\",\r\n    \"description\": \"<p>I am not</p>\",\r\n    \"isPublished\": true,\r\n    \"thumbnail\": \"\",\r\n    \"tags\": [],\r\n    \"metaDescription\": \"\",\r\n    \"metaTitle\": \"\",\r\n    \"platform\": \"ts4u\",\r\n    \"slug\": \"mfgvc3g\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/blog/article/delete/{{article_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"article",
														"delete",
														"{{article_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an Admin, I should not be able to delete the blog article without giving the article id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to delete all the blog article without article id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to delete all the blog article without article id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to delete all the blog article without article id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to delete all the blog article without article id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to delete all the blog article without article id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer"
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Mitul\",\r\n    \"description\": \"<p>I am not</p>\",\r\n    \"isPublished\": true,\r\n    \"thumbnail\": \"\",\r\n    \"tags\": [],\r\n    \"metaDescription\": \"\",\r\n    \"metaTitle\": \"\",\r\n    \"platform\": \"ts4u\",\r\n    \"slug\": \"mfgvc3g\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/blog/article/delete/{{article_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"article",
														"delete",
														"{{article_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Switch Blog",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a admin, I should be able to switch the blog article",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful PATCH request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/blog/article/switch/{{article_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"article",
														"switch",
														"{{article_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a admin, I should not be able to switch the blog article without giving the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to switch the blog article without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to switch the blog article without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to switch the blog article without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to switch the blog article without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to switch the blog article without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/blog/article/switch/{{article_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"article",
														"switch",
														"{{article_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a admin, I should not be able to switch the blog article without giving the article id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to stitch the blog article without article id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to switch all the blog article without article id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to switch all the blog article without article id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to switch all the blog article without article id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to switch the blog article without article id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/blog/article/switch/{{article_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"article",
														"switch",
														"{{article_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "My reading lists",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a admin, I want to find the  reading document lists",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin find the reading document list successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin find the reading document list within 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin get the 'OK' status code when executing to find the reading document lists\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin get the 'true' message when executing to find the reading document lists\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"    pm.expect(pm.response.text()).to.include(\"true\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to find the  reading document lists\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 10,\r\n    \"sort\": \"latest\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/blog/myreadinglists",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"myreadinglists"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to find the  reading document lists without giving the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to find the  reading document lists without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to find the  reading document lists without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to find the  reading document lists without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to find the  reading document lists without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to find the  reading document lists without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 10,\r\n    \"sort\": \"latest\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/blog/myreadinglists",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"myreadinglists"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Tags",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to see the new uploaded blog",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"HR can see the new reading document lists\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"HR can be upload document lists the new blog bellow 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Create new upload document response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/blog/tags",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"tags"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Blog_react",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an user, I want to show the blog reaction",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/blog/react/{{article_id}}",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"blog",
														"react",
														"{{article_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an user, I should not be able to see the blog reaction without the token number",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to see the blog reaction without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"User should get the response below 2100 ms when executing to see the blog reaction without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2100);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"User should get the 'Bad Request' status code name when executing to see the blog reaction without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"User should get the 'Authorization required' message when executing to see the blog reaction without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to see the blog reaction without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/blog/react/{{article_id}}",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"blog",
														"react",
														"{{article_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an user, I should not be able to see the blog reaction without the article id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to see the blog reaction without the article id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"User should get the response below 2100 ms when executing to see the blog reaction without the article id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2100);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"User should get the 'Bad Request' status code name when executing to see the blog reaction without the article id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"User should get the 'Authorization required' message when executing to see the blog reaction without the article id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to see the blog reaction without the article id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/blog/react/{{article_id}}",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"blog",
														"react",
														"{{article_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Blog_comment",
							"item": [
								{
									"name": "Create",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "Admin should be able to comment for any individual blogs",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody)\r",
																	"pm.environment.set(\"Content Blog comment_create ID\", jsonData.comment._id);\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"comment\": \"<p>Nice Blog</p>\",\r\n    \"article\": \"649816672c51110020691743\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/blog/comment/post",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"blog",
																"comment",
																"post"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "Admin should not be able to comment for any blogs without giving the token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to comment for any blogs without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to comment for any blogs without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Adnin should get the 'Bad Request' status code name when executing to comment for any blogs without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to comment for any blogs without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Validate the response header of the request to comment for any blogs without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"comment\": \"<p>Nice Blog</p>\",\r\n    \"article\": \"649816672c51110020691743\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/blog/comment/post",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"blog",
																"comment",
																"post"
															]
														}
													},
													"response": []
												},
												{
													"name": "Admin should not be able to comment for any individual blogs to keeping the comment field empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing  to comment for any individual blogs to keeping the comment field empty\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing  to comment for any individual blogs to keeping the comment field empty\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Adnin should get the 'Bad Request' status code name when executing  to comment for any individual blogs to keeping the comment field empty\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Comment and article is required' message when executing  to comment for any individual blogs to keeping the comment field empty\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Comment and article is required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Validate the response header of the request  to comment for any individual blogs to keeping the comment field empty\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"comment\": \"\",\r\n    \"article\": \"649816672c51110020691743\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/blog/comment/post",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"blog",
																"comment",
																"post"
															]
														}
													},
													"response": []
												},
												{
													"name": "Admin should not be able to comment for any individual blogs to keeping the article field empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing  to comment for any individual blogs to keeping the article field empty\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing  to comment for any individual blogs to keeping the article field empty\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Adnin should get the 'Bad Request' status code name when executing  to comment for any individual blogs to keeping the article field empty\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Comment and article is required' message when executing  to comment for any individual blogs to keeping the article field empty\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Comment and article is required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Validate the response header of the request  to comment for any individual blogs to keeping the article field empty\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"comment\": \"\",\r\n    \"article\": \"649816672c51110020691743\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/blog/comment/post",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"blog",
																"comment",
																"post"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Comments",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "Admin should be able to add comments on the individual blogs",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful GET request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/blog/comments/{{Content Blog comment_create ID}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"blog",
																"comments",
																"{{Content Blog comment_create ID}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Portal Documents",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an admin, I want to get all the portal documents",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/portal-doc/getall",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"portal-doc",
												"getall"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "As an admin, I want to get all the portal documents without giving the token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing to get all the portal documents without inputting the token\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to get all the portal documents without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to get all the portal documents without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the portal documents without inputting the token\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate the response header of the request to get all the portal documents without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/portal-doc/getall",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"portal-doc",
												"getall"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Important Links",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an admin, I should be able to create on the inportant links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"important_links_id\", jsonData.link._id);\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"Test23\",\r\n    \"url\": \"https://portal.ts4u.us/mydocuments\",\r\n    \"image\": \"\",\r\n    \"program\": \"611136a8c4ea52404a295b06\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/link/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"link",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, I should be able to see all the inportent links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"limit\": 30\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/link/getall",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"link",
												"getall"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, I should be able to see on the inportent links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"HR can be edit on the bellow 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"HR can be edit on the response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"HR can be edit all inportent links on the PATCH request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/link/mylinks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"link",
												"mylinks"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, I should be able to edit on the inportent links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"HR can be edit on the bellow 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"HR can be edit on the response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"HR can be edit all inportent links on the PATCH request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"Test2\",\r\n    \"url\": \"https://portal.ts4u.us/mydocuments\",\r\n    \"image\": \"\",\r\n    \"program\": \"611136a8c4ea52404a295b06\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/link/edit/{{important_links_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"link",
												"edit",
												"{{important_links_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, I should be able to delete on the inportent links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"HR can be edit on the bellow 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"HR can be edit on the response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"HR can be edit all inportent links on the PATCH request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/link/delete/{{important_links_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"link",
												"delete",
												"{{important_links_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "As an admin, I should not be able to create the important  links without token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing to create the important  links without inputting the token\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to create the important  links without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"Admin should get the 'Bad Request' status code name when executing to create the important  links without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"Admin should get the 'Authorization required' message when executing to create the important  links without inputting the token\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Validate the response header of the request to create the important  links without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"Test23\",\r\n    \"url\": \"https://portal.ts4u.us/mydocuments\",\r\n    \"image\": \"\",\r\n    \"program\": \"611136a8c4ea52404a295b06\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/link/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"link",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, I should not be able to get all the important links  without token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing to get all the important links  without inputting the token\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to get all the important links  without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the important links  without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the important links  without inputting the token\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Validate the response header of the request to get all the important links without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"limit\": 30\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/link/getall",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"link",
												"getall"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, I should not be able to edit the important links without giving the token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing to edit the important links without inputting the token\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to edit the important links  without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"Admin should get the 'Bad Request' status code name when executing to edit all the important links  without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"Admin should get the 'Authorization required' message when executing to edit all the important links  without inputting the token\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"\r",
													"});\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request to edit the important links without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"Test2\",\r\n    \"url\": \"https://portal.ts4u.us/mydocuments\",\r\n    \"image\": \"\",\r\n    \"program\": \"611136a8c4ea52404a295b06\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/link/edit/{{important_links_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"link",
												"edit",
												"{{important_links_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, I should not be able to delete the important links without the token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing to delete the important links without inputting the token\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to delete the important links  without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"Admin should get the 'Bad Request' status code name when executing to delete important links without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"Admin should get the 'Authorization required' message when executing to delete important links  without inputting the token\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"\r",
													"});\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request to delete the important links without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/link/delete/{{important_links_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"link",
												"delete",
												"{{important_links_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, I should be able to delete the important links without giving the  links id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing to delete the important links without inputting the links id\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to delete the important links  without inputting the links id\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"Admin should get the 'Bad Request' status code name when executing to delete important links without inputting the links id\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"Admin should get the 'Something went wrong' message when executing to delete important links  without inputting the links id\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
													"\r",
													"});\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request to delete the important links without inputting the links id\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/link/delete/{{}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"link",
												"delete",
												"{{}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Mock Interviews",
					"item": [
						{
							"name": "Create Interview",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to create the mock interview",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"mock_interview_id\", jsonData.interview._id);\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Test\",\r\n    \"isActive\": true,\r\n    \"index\": 0,\r\n    \"groups\": [\r\n        \"62bfc73b2276e90284245470\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/addinterview",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"addinterview"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to create the mock interview without giving the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to create the mock interview without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to create the mock interview without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to create the mock interview without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to create the mock interview without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create the mock interview without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Test\",\r\n    \"isActive\": true,\r\n    \"index\": 0,\r\n    \"groups\": [\r\n        \"62bfc73b2276e90284245470\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/addinterview",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"addinterview"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to create the mock interview without giving the name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to create the mock interview without inputting the name\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to create the mock interview without inputting the name\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request'status code name when executing to create the mock interview without inputting the name\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Name is required' message when executing to create the mock interview without inputting the name\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Name is required\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to create the mock interview without inputting the name\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"\",\r\n    \"isActive\": true,\r\n    \"index\": 0,\r\n    \"groups\": [\r\n        \"62bfc73b2276e90284245470\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/addinterview",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"addinterview"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to create the mock interview to keeping the groups field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to create the mock interview  to keeping the groups field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to create the mock interview  to keeping the groups field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request'status code name when executing to create the mock interview  to keeping the groups field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Something went wrong' message when executing to create the mock interview to keeping the groups field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to create the mock interview to keeping the groups field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Test\",\r\n    \"isActive\": true,\r\n    \"index\": 0,\r\n    \"groups\": [\r\n        \"\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/addinterview",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"addinterview"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get all Interview",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to get all the mock interviews",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin get all the mock interview successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin get all the applications within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin get the 'OK' status code when executing to get all the mock interviews\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin get messages when executing to get all the mock interviews \", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"session\");\r",
															"    pm.expect(pm.response.text()).to.include(\"type\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to get all the mock interviews\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to get all the mock interviews without giving the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the mock interviews without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the mock interviews without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the mock interviews without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the mock interviews without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to get all the mock interviews without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get AllLite",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to get all lite without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all lite without inputting the token\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all lite without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'OK' status code name when executing to get all lite without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to get all lite without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/interview/getalllite",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"getalllite"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should be able to get all lite without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all lite without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all lite without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all lite without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all lite without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to get all lite without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/interview/getalllite",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"getalllite"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get Interview by user's id",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to find a user's mock interview",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/interview/getinterview/{{mock_interview_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"getinterview",
														"{{mock_interview_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not  be able to find a user's mock interview without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to find a user's mock interview  without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to find a user's mock interview without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to find a user's mock interview without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to find a user's mock interview without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to find a user's mock interview without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/interview/getinterview/{{mock_interview_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"getinterview",
														"{{mock_interview_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Edit Interview",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to edit the mock interview",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"HR can be edit on the bellow 3000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
															"});\r",
															"pm.test(\"HR can be edit on the response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"HR can be edit all mock interview on the PATCH request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Kubernetes Cluster\",\r\n    \"isActive\": true,\r\n    \"index\": 0,\r\n    \"groups\": []\r\n}  ",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/edit/{{mock_interview_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"edit",
														"{{mock_interview_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should be able to edit on the mock interview quetion",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Server is runnung\");\r",
															"});\r",
															"pm.test(\"Successful Patch request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"test1234\",\r\n    \"video\": \"https://youtu.be/TWsDvvoGD7I?t=1310\",\r\n    \"hint\": \"abc\",\r\n    \"type\": \"audio\",\r\n    \"answer\": \"\",\r\n    \"index\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/editquestion/64a3fa4396621400196902ac/64a3fa9b96621400196902af",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"editquestion",
														"64a3fa4396621400196902ac",
														"64a3fa9b96621400196902af"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to edit the user's mock interview without mock interview id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400'status code when executing to edit a user's mock interview  without mock interview id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to edit a user's mock interview without mock interview id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code when executing to edit a user's mock interview without mock interview id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Something went wrong' message when executing to edit a user's mock interview without mock interview id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to edit a user's mock interview without mock interview id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Kubernetes Cluster\",\r\n    \"isActive\": true,\r\n    \"index\": 0,\r\n    \"groups\": []\r\n}  ",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/edit/{{}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"edit",
														"{{}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to edit the user's mock interview without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400'status code when executing to edit a user's mock interview  without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to edit a user's mock interview without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code when executing to edit a user's mock interview without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to edit a user's mock interview without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to edit a user's mock interview without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Kubernetes Cluster\",\r\n    \"isActive\": true,\r\n    \"index\": 0,\r\n    \"groups\": []\r\n}  ",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/edit/{{mock_interview_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"edit",
														"{{mock_interview_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete Interview",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to delete on the individual mock interview quetion",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful DELETE request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/interview/delete/{{mock_interview_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"delete",
														"{{mock_interview_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to delete on the individual mock interview questions without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful DELETE request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/interview/delete/{{mock_interview_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"delete",
														"{{mock_interview_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to delete on the individual mock interview without the interview id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to delete the individual mock interview questions without inputting interview id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to delete the individual mock interview questions without inputting interview id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to delete the individual mock interview questions without inputting interview id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to delete the individual mock interview questions without inputting interview id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request to delete the individual mock interview questions without inputting interview id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/interview/delete/{{mock_interview_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"delete",
														"{{mock_interview_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Clone interview",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to clone the mock interview question",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/cloneinterview/{{mock_interview_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"cloneinterview",
														"{{mock_interview_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to clone the mock interview question without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to clone the mock interview questions without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to clone the mock interview questions without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to clone the mock interview questions without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to clone the mock interview questions without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to clone the mock interview questions without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/cloneinterview/{{mock_interview_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"cloneinterview",
														"{{mock_interview_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "My reviews",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to get all the review",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/interview/myreviews",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"myreviews"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to get all the review without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the review without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the review without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the review without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the review without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to create the important  links without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/interview/myreviews",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"myreviews"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "(Fail) Answer",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to answer user on the mock interview",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Server is runnung\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/interview/answer/{{mock_interview_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"answer",
														"{{mock_interview_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to get mock interview  answer without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Server is runnung\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/interview/answer/{{mock_interview_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"answer",
														"{{mock_interview_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "(Fail)Questions",
							"item": [
								{
									"name": "Add question",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "(Fail)As an admin, I should be able to add on the mock interview question",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"Test12\",\r\n    \"isActive\": true,\r\n    \"index\": 0,\r\n    \"groups\": [ \"62bfc73b2276e90284245470\"]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/interview/addquestion/{{mock_interview_id}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"interview",
																"addquestion",
																"{{mock_interview_id}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As an admin, I should not be able to add on the mock interview questions without giving the token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to create the mock interview without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to create the mock interview without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Admin should get the 'Bad Request' status code name when executing to create the mock interview without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to create the mock interview without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to create the mock interview without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"Test12\",\r\n    \"isActive\": true,\r\n    \"index\": 0,\r\n    \"groups\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/interview/addquestion/{{mock_interview_id}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"interview",
																"addquestion",
																"{{mock_interview_id}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an admin, I should not be able to add on the mock interview questions to keeping the name field empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to create the mock interview questions to keeping the name field empty\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to create the mock interview questions to keeping the name field empty\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Admin should get the 'Bad Request' status code name when executing to create the mock interview questions to keeping the name field empty\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to create the mock interview questions to keeping the name field empty\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Incomplete data\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to create the mock interview questions to keeping the name field empty\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"\",\r\n    \"isActive\": true,\r\n    \"index\": 0,\r\n    \"groups\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/interview/addquestion/{{mock_interview_id}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"interview",
																"addquestion",
																"{{mock_interview_id}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Edit Question",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to edit on the mock interview quetion",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"Server is runnung\");\r",
																	"});\r",
																	"pm.test(\"Successful Patch request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"test1234\",\r\n    \"video\": \"https://youtu.be/TWsDvvoGD7I?t=1310\",\r\n    \"hint\": \"abc\",\r\n    \"type\": \"audio\",\r\n    \"answer\": \"\",\r\n    \"index\": 0\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/interview/editquestion/{{mock_interview_id}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"interview",
																"editquestion",
																"{{mock_interview_id}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As an admin, I should not  be able to edit on the mock interview question",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"Server is runnung\");\r",
																	"});\r",
																	"pm.test(\"Successful Patch request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"test1234\",\r\n    \"video\": \"https://youtu.be/TWsDvvoGD7I?t=1310\",\r\n    \"hint\": \"abc\",\r\n    \"type\": \"audio\",\r\n    \"answer\": \"\",\r\n    \"index\": 0\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/interview/editquestion/64a3fa4396621400196902ac/64a3fa9b96621400196902af",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"interview",
																"editquestion",
																"64a3fa4396621400196902ac",
																"64a3fa9b96621400196902af"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Delete Question",
									"item": [
										{
											"name": "As an admin, I should be able to delete on the mock interview quetion",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"HR can be shared on the bellow 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"HR can be shared on the response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"HR can be shared mock interview on the PATCH request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\r\n    {\r\n        \"video\": \"https://youtu.be/TWsDvvoGD7I?t=1310\",\r\n        \"type\": \"audio\",\r\n        \"hint\": \"abc\",\r\n        \"index\": 0,\r\n        \"answer\": \"\",\r\n        \"_id\": \"64a4016696621400196902d8\",\r\n        \"title\": \"test123\",\r\n        \"updatedAt\": \"2023-07-04T11:24:22.734Z\",\r\n        \"createdAt\": \"2023-07-04T11:24:22.734Z\"\r\n    }\r\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/deletequestion/64a3fa4396621400196902ac/64a3fa9b96621400196902af",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"deletequestion",
														"64a3fa4396621400196902ac",
														"64a3fa9b96621400196902af"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Documents and Labs / Content / Job Market / Job Profile / Job Offer / Join a Job - First Week",
					"item": [
						{
							"name": "(Id generation problem)Blog Publish",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin can be able to publish blog",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"success\": true,\r\n    \"message\": \"Published\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/content/publish-to-blog/64967bbec6f5ac0019c2b16c",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"content",
														"publish-to-blog",
														"64967bbec6f5ac0019c2b16c"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin should be able to publish a blog",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to publish a blog without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to publish a blog without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to publish a blog without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to publish a blog without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to publish a blog without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"success\": true,\r\n    \"message\": \"Published\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/content/publish-to-blog/64967bbec6f5ac0019c2b16c",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"content",
														"publish-to-blog",
														"64967bbec6f5ac0019c2b16c"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Find content",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to find all the content",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"HR can be edit on the bellow 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"HR can be edit on the response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"HR can be edit all inportent links on the GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/content/findcontent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"content",
														"findcontent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "(Fail)As an admin, I should not be able to find all the content without giving the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to find all the content without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to find all the content without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to find all the content without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to find all the content without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to find all the content without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/content/findcontent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"content",
														"findcontent"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "(Id Generation Problem) Single content",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to find on the single content",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/content/singlecontent/62462c4cec662560b66dbb2c",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"content",
														"singlecontent",
														"62462c4cec662560b66dbb2c"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "(Fail, Status code issue) As an admin, I should not be able to find the single content without giving the id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to find the single content without inputting the id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to find the single content without inputting the id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to find the single content without inputting the id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Server is runnung' message when executing to find the single content without inputting the id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Server is runnung\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to find the single content without inputting the id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/content/singlecontent/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"content",
														"singlecontent",
														""
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "(Problem)Interview Q & A",
					"item": [
						{
							"name": "Add new Interview",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should be able to  add new interview questions",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"What is Test Case?\",\r\n    \"chapter\": \"615720f160b919ef942a0f5b\",\r\n    \"program\": \"615720f160b919ef942a0f5b\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interviewqa/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interviewqa",
														"add"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin should not be able to add new interview questions to keeping the name field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to add new interview questions to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to add new interview questions to keeping the name field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to add new interview questions to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Name, program and chapter is required' message when executing to add new interview questions to keeping the name field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Name, program and chapter is required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to add new interview questions to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"\",\r\n    \"chapter\": \"615720f160b919ef942a0f5b\",\r\n    \"program\": \"615720f160b919ef942a0f5b\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interviewqa/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interviewqa",
														"add"
													]
												}
											},
											"response": []
										},
										{
											"name": "Admin should not be able to add new interview questions without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to add new interview questions links without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to add new interview questions links without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to add new interview questions without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to add new interview questions without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to add new interview questions without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"What is test?\",\r\n    \"chapter\": \"615720f160b919ef942a0f5b\",\r\n    \"program\": \"615720f160b919ef942a0f5b\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interviewqa/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interviewqa",
														"add"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Add questions",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "(FAIL)As an admin , I should be be able to create an interview questions",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"question\": \"What is Test?\",\r\n    \"options\": [\r\n        \"Find out\",\r\n        \"Find in\"\r\n    ],\r\n    \"answer\": \"Find out\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interviewqa/question/add/64b22759b0e27200202d0814",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interviewqa",
														"question",
														"add",
														"64b22759b0e27200202d0814"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a admin, I can be able to see on the interview qa",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"success\": false,\r\n    \"error\": \"Something went wrong\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interviewqa/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interviewqa",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "(FAIL)As an admin , I should not be be able to create an interview questions without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to add new interview questions without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to add new interview questions without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to add new interview questions without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to add new interview questions without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to add new interview questions without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"question\": \"What is Test?\",\r\n    \"options\": [\r\n        \"Find out\",\r\n        \"Find in\"\r\n    ],\r\n    \"answer\": \"Find out\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interviewqa/question/add/64b22759b0e27200202d0814",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interviewqa",
														"question",
														"add",
														"64b22759b0e27200202d0814"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a admin, I should not be able to get all the interview qa without giving the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the slides without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the slides without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the slides without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the slides inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to get all the slides without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"success\": false,\r\n    \"error\": \"Something went wrong\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interviewqa/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interviewqa",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Slide",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I want to the create the new slide",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"slide_id\",jsonData.slide._id);\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\":\"xdas\",\r\n\"slides\":[{\"content\":\"<p>f dsf</p>\",\r\n\"title\":\"\"},{\"content\":\"\",\"title\":\"\"},\r\n{\"content\":\"\",\"title\":\"\"}],\r\n\"programs\":[\"61113628c4ea52404a295b03\"],\r\n\"sessions\":[\"61113557c4ea52404a295afd\"]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/slide/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"slide",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to create the new slide without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing  to create the new slide without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing  to create the new slide without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing  to create the new slides without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the questions without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request  to create the new slide without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\":\"xdas\",\r\n\"slides\":[{\"content\":\"<p>f dsf</p>\",\r\n\"title\":\"\"},{\"content\":\"\",\"title\":\"\"},\r\n{\"content\":\"\",\"title\":\"\"}],\r\n\"programs\":[\"61113628c4ea52404a295b03\"],\r\n\"sessions\":[\"61113557c4ea52404a295afd\"]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/slide/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"slide",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to create the new slide to keep the title field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing  to create the new slide to keep the title field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing  to create the new slide to keep the title field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing  to create the new slide to keep the title field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Something went wrong' messagewhen executing  to create the new slide to keep the title field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request  when executing  to create the new slide to keep the title field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\":\"\",\r\n\"slides\":[{\"content\":\"<p>f dsf</p>\",\r\n\"title\":\"\"},{\"content\":\"\",\"title\":\"\"},\r\n{\"content\":\"\",\"title\":\"\"}],\r\n\"programs\":[\"61113628c4ea52404a295b03\"],\r\n\"sessions\":[\"61113557c4ea52404a295afd\"]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/slide/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"slide",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to create the new slide to keep the program field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing  to create the new slide to keep the program field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing  to create the new slide to keep the program field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing  to create the new slide to keep the program field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Something went wrong' messagewhen executing  to create the new slide to keep the program field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request  when executing  to create the new slide to keep the program field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\":\"xdas\",\r\n\"slides\":[{\"content\":\"<p>f dsf</p>\",\r\n\"title\":\"\"},{\"content\":\"\",\"title\":\"\"},\r\n{\"content\":\"\",\"title\":\"\"}],\r\n\"programs\":[\"\"],\r\n\"sessions\":[\"61113557c4ea52404a295afd\"]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/slide/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"slide",
														"create"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Single",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to see the any individual slide",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/slide/single/{{slide_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"slide",
														"single",
														"{{slide_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to get a user's individual slide without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing  to get a user's individual slide without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get a user's individual slide without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing  to get a user's individual slide without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get a user's individual slide without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request  to get a user's individual slide without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/slide/single/{{slide_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"slide",
														"single",
														"{{slide_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to get a user's individual slide without slide_id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing  to get a user's individual slide without the slide_id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get a user's individual slide without the slide_id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing  to get a user's individual slide without the slide_id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Something went wrong' message when executing to get a user's individual slide without the slide_id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request  to get a user's individual slide without the slide_id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/slide/single/{{}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"slide",
														"single",
														"{{}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get All",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to get all the slides",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/slide/all",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"slide",
														"all"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should be able to see the all slide list.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 30,\r\n    \"program\": \"\",\r\n    \"session\": \"\",\r\n    \"query\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/slide/all-list",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"slide",
														"all-list"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to get all the slides without giving the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing  to get all the slides without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the slides without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing  to get all the slides without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the slides without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request  to get all the slides without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/slide/all",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"slide",
														"all"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to see the all slides list without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing  to get all the slides list without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the slides list without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing  to get all the slides list without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the slides list without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request  to get all the slides list without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 30,\r\n    \"program\": \"\",\r\n    \"session\": \"\",\r\n    \"query\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/slide/all-list",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"slide",
														"all-list"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "(Failed)Edit",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "(Fail)As an Admin, i should be able to edit the slides",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Mituldas\",\r\n    \"description\": \"vsd\",\r\n    \"isPublished\": true,\r\n    \"thumbnail\": \"\",\r\n    \"tags\": [],\r\n    \"metaDescription\": \"\",\r\n    \"metaTitle\": \"\",\r\n    \"platform\": \"ts4u\",\r\n    \"slug\": \"das\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/slide/{{slide_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"slide",
														"{{slide_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "(Fail)As an Admin, i should not be able to edit the slides without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Mituldas\",\r\n    \"description\": \"vsd\",\r\n    \"isPublished\": true,\r\n    \"thumbnail\": \"\",\r\n    \"tags\": [],\r\n    \"metaDescription\": \"\",\r\n    \"metaTitle\": \"\",\r\n    \"platform\": \"ts4u\",\r\n    \"slug\": \"das\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/slide/{{slide_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"slide",
														"{{slide_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "(Failed)Delete",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "(Fail) As a admin ,I should be able to delete the slide",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"HR can be delete all the list delete slide post\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"HR can be delete all the list delete bellow 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Create on delete al the list delete response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"ETag\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Mituldas\",\r\n    \"description\": \"vsd\",\r\n    \"isPublished\": true,\r\n    \"thumbnail\": \"\",\r\n    \"tags\": [],\r\n    \"metaDescription\": \"\",\r\n    \"metaTitle\": \"\",\r\n    \"platform\": \"ts4u\",\r\n    \"slug\": \"das\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/slide/delete/{{slide_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"slide",
														"delete",
														"{{slide_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I want to delete the any individual request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"HR can be delete all the list delete slide post\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"HR can be delete all the list delete bellow 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Create on delete al the list delete response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"ETag\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Mituldas\",\r\n    \"description\": \"vsd\",\r\n    \"isPublished\": true,\r\n    \"thumbnail\": \"\",\r\n    \"tags\": [],\r\n    \"metaDescription\": \"\",\r\n    \"metaTitle\": \"\",\r\n    \"platform\": \"ts4u\",\r\n    \"slug\": \"das\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/slide/delete/64bfa4b6191bf70020c842cc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"slide",
														"delete",
														"64bfa4b6191bf70020c842cc"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Template",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to create the template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"template_id\", jsonData.template._id);\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"test\",\r\n  \"users\": [\r\n    \"649429e537a20c00197f1a8e\"\r\n  ],\r\n  \"category\": \"sqa\",\r\n  \"isActive\": true,\r\n  \"attachments\": [],\r\n  \"programs\": [\r\n    \"613f5d9c15f9faf6934efa18\"\r\n  ],\r\n  \"sessions\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/template/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"template",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to create the template without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing  to create the new templete without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing  to create the new template without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing  to create the new template without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing  to create the new template without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request  to create the new template without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"test\",\r\n  \"users\": [\r\n    \"649429e537a20c00197f1a8e\"\r\n  ],\r\n  \"category\": \"sqa\",\r\n  \"isActive\": true,\r\n  \"attachments\": [],\r\n  \"programs\": [\r\n    \"613f5d9c15f9faf6934efa18\"\r\n  ],\r\n  \"sessions\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/template/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"template",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to create the template to keeping the title field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to create the template to keeping the title field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to create the template to keeping the title field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing  to create the template to keeping the title field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Title is required' message when executing to create the template to keeping the title field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Title is required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to create the template to keeping the title field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"\",\r\n  \"users\": [\r\n    \"649429e537a20c00197f1a8e\"\r\n  ],\r\n  \"category\": \"sqa\",\r\n  \"isActive\": true,\r\n  \"attachments\": [],\r\n  \"programs\": [\r\n    \"613f5d9c15f9faf6934efa18\"\r\n  ],\r\n  \"sessions\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/template/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"template",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to create the template to keeping the program field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to create the template to keeping the program field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2100 ms when executing to create the template to keeping the program field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2100);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing  to create the template to keeping the program field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Something went wrong' message when executing to create the template to keeping the program field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to create the template to keeping the program field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"test\",\r\n  \"users\": [\r\n    \"649429e537a20c00197f1a8e\"\r\n  ],\r\n  \"category\": \"sqa\",\r\n  \"isActive\": true,\r\n  \"attachments\": [],\r\n  \"programs\": [\r\n    \"\"\r\n  ],\r\n  \"sessions\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/template/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"template",
														"create"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get All",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to get all the templates",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/template/all",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"template",
														"all"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to get all the templates without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the templete without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the templete without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the templete without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the templete without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to get all the templete without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/template/all",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"template",
														"all"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Edit",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to edit the template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful PATCH request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"test123\",\r\n    \"users\": [\r\n        \"649429e537a20c00197f1a8e\"\r\n    ],\r\n    \"category\": \"test\",\r\n    \"isActive\": true,\r\n    \"attachments\": [],\r\n    \"programs\": [\r\n        \"613f5d9c15f9faf6934efa18\"\r\n    ],\r\n    \"sessions\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/template/edit/{{template_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"template",
														"edit",
														"{{template_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to edit the template without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit the templete without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to edit the templete without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to edit the templete without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to edit the templete without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to edit the templete without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"test123\",\r\n    \"users\": [\r\n        \"649429e537a20c00197f1a8e\"\r\n    ],\r\n    \"category\": \"test\",\r\n    \"isActive\": true,\r\n    \"attachments\": [],\r\n    \"programs\": [\r\n        \"613f5d9c15f9faf6934efa18\"\r\n    ],\r\n    \"sessions\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/template/edit/{{template_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"template",
														"edit",
														"{{template_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to edit the template without the template id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit the templete without inputting the template_id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to edit the templete without inputting the template_id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to edit the templete without inputting the template_id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Something went wrong' message when executing to edit the templete without inputting the template_id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to edit the templete without inputting the template_id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"test123\",\r\n    \"users\": [\r\n        \"649429e537a20c00197f1a8e\"\r\n    ],\r\n    \"category\": \"test\",\r\n    \"isActive\": true,\r\n    \"attachments\": [],\r\n    \"programs\": [\r\n        \"\"\r\n    ],\r\n    \"sessions\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/template/edit/{{template_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"template",
														"edit",
														"{{template_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to edit the template without the body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit the templete to keeping the program field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to edit the templete to keeping the program field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to edit the templete to keeping the program field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Something went wrong' message when executing to edit the templete to keeping the program field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to edit the templete to keeping the program field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/template/edit/{{template_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"template",
														"edit",
														"{{template_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to delete the template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"test123\",\r\n    \"users\": [\r\n        \"649429e537a20c00197f1a8e\"\r\n    ],\r\n    \"category\": \"test\",\r\n    \"isActive\": true,\r\n    \"attachments\": [],\r\n    \"programs\": [\r\n        \"613f5d9c15f9faf6934efa18\"\r\n    ],\r\n    \"sessions\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/template/delete/{{template_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"template",
														"delete",
														"{{template_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to delete the template without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to delete the templete without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to delete the templete without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to delete the templete without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to delete the templete without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to delete the templete without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"test123\",\r\n    \"users\": [\r\n        \"649429e537a20c00197f1a8e\"\r\n    ],\r\n    \"category\": \"test\",\r\n    \"isActive\": true,\r\n    \"attachments\": [],\r\n    \"programs\": [\r\n        \"613f5d9c15f9faf6934efa18\"\r\n    ],\r\n    \"sessions\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/template/delete/{{template_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"template",
														"delete",
														"{{template_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to delete the template without the template_id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to delete the templete without inputting the template_id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to delete the templete without inputting the template_id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to delete the templete without inputting the template_id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Something went wrong' message when executing to delete the templete without inputting the template_id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to delete the templete without inputting the template_id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"test123\",\r\n    \"users\": [\r\n        \"649429e537a20c00197f1a8e\"\r\n    ],\r\n    \"category\": \"test\",\r\n    \"isActive\": true,\r\n    \"attachments\": [],\r\n    \"programs\": [\r\n        \"613f5d9c15f9faf6934efa18\"\r\n    ],\r\n    \"sessions\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/template/delete/{{}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"template",
														"delete",
														"{{}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Architecture Diagram",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to create the diagram",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"diagram_id\", jsonData.diagram._id);\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2100ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2100);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Test\",\r\n    \"users\": [],\r\n    \"category\": \"qa\",\r\n    \"isActive\": true,\r\n    \"attachments\": [],\r\n    \"programs\": [\r\n        \"61113628c4ea52404a295b03\"\r\n    ],\r\n    \"sessions\": [\r\n        \"6111359bc4ea52404a295aff\"\r\n    ],\r\n    \"description\": \"<p>fgfg</p>\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/diagram/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"diagram",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to create the diagram without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing  to create the new diagram without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing  to create the new diagram without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing  to create the new diagram without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing  to create the new diagram without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request  to create the new diagram without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Test\",\r\n    \"users\": [],\r\n    \"category\": \"qa\",\r\n    \"isActive\": true,\r\n    \"attachments\": [],\r\n    \"programs\": [\r\n        \"61113628c4ea52404a295b03\"\r\n    ],\r\n    \"sessions\": [\r\n        \"6111359bc4ea52404a295aff\"\r\n    ],\r\n    \"description\": \"<p>fgfg</p>\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/diagram/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"diagram",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to create the diagram to keep the title field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to create the diagram to keeping the title field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to create the diagram to keeping the title field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing  to create the diagram to keeping the title field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Title is required' message when executing to create the diagram to keeping the title field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Title is required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to create the diagram to keeping the title field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"\",\r\n    \"users\": [],\r\n    \"category\": \"qa\",\r\n    \"isActive\": true,\r\n    \"attachments\": [],\r\n    \"programs\": [\r\n        \"61113628c4ea52404a295b03\"\r\n    ],\r\n    \"sessions\": [\r\n        \"6111359bc4ea52404a295aff\"\r\n    ],\r\n    \"description\": \"<p>fgfg</p>\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/diagram/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"diagram",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to create the diagram to keeping the program field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to create the diagram to keeping the program field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to create the diagram to keeping the program field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing  to create the diagram to keeping the program field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Something went wrong' message when executing to create the diagram to keeping the program field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to create the diagram to keeping the program field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Test\",\r\n    \"users\": [],\r\n    \"category\": \"qa\",\r\n    \"isActive\": true,\r\n    \"attachments\": [],\r\n    \"programs\": [\r\n        \"\"\r\n    ],\r\n    \"sessions\": [\r\n        \"6111359bc4ea52404a295aff\"\r\n    ],\r\n    \"description\": \"<p>fgfg</p>\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/diagram/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"diagram",
														"create"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get all Diagram",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to find the diagram",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/diagram/all",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"diagram",
														"all"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to find the diagram without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to find the diagram without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to find the diagram without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing  to find the diagram without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing  to find the diagram without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request  to find the diagram without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/diagram/all",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"diagram",
														"all"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Edit Diagram",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to edit the diagram",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful PATCH request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});\r",
															"\r",
															"pm.test(\"Admin can edit the diagram successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Diagram for testing\",\r\n    \"users\": [],\r\n    \"category\": \"qa\",\r\n    \"isActive\": true,\r\n    \"attachments\": [],\r\n    \"programs\": [\r\n        \"61113628c4ea52404a295b03\"\r\n    ],\r\n    \"sessions\": [\r\n        \"6111359bc4ea52404a295aff\"\r\n    ],\r\n    \"description\": \"<p>fgfg</p>\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/diagram/edit/{{diagram_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"diagram",
														"edit",
														"{{diagram_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to edit the diagram without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit the new diagram without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing  to edit the new diagram without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to edit the new diagram without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing  to edit the new diagram without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request  to edit the new diagram without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Test1122\",\r\n    \"users\": [],\r\n    \"category\": \"qa\",\r\n    \"isActive\": true,\r\n    \"attachments\": [],\r\n    \"programs\": [\r\n        \"61113628c4ea52404a295b03\"\r\n    ],\r\n    \"sessions\": [\r\n        \"6111359bc4ea52404a295aff\"\r\n    ],\r\n    \"description\": \"<p>fgfg</p>\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/diagram/edit/{{diagram_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"diagram",
														"edit",
														"{{diagram_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to edit the diagram to keeping the program field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit the diagram to keeping the program field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing  to edit the diagram to keeping the program field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to edit the diagram to keeping the program field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing  to edit the diagram to keeping the program field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to edit the diagram to keeping the program field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Diagram for testing\",\r\n    \"users\": [],\r\n    \"category\": \"qa\",\r\n    \"isActive\": true,\r\n    \"attachments\": [],\r\n    \"programs\": [\r\n        \"\"\r\n    ],\r\n    \"sessions\": [\r\n        \"6111359bc4ea52404a295aff\"\r\n    ],\r\n    \"description\": \"<p>fgfg</p>\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/diagram/edit/{{diagram_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"diagram",
														"edit",
														"{{diagram_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to edit the diagram without the diagram_id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit the diagram without the diagram_id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing  to edit the diagram without the diagram_id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to edit the diagram without the diagram_id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing  to edit the diagram without the diagram_id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to edit the diagram without the diagram_id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Diagram for testing\",\r\n    \"users\": [],\r\n    \"category\": \"qa\",\r\n    \"isActive\": true,\r\n    \"attachments\": [],\r\n    \"programs\": [\r\n        \"\"\r\n    ],\r\n    \"sessions\": [\r\n        \"6111359bc4ea52404a295aff\"\r\n    ],\r\n    \"description\": \"<p>fgfg</p>\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/diagram/edit/{{}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"diagram",
														"edit",
														"{{}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to delete the diagram",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successfully deleted the diagram\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 200]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/api/diagram/delete/{{diagram_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"diagram",
														"delete",
														"{{diagram_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to delete the diagram without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successfully deleted the diagram\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 200]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Test\",\r\n    \"users\": [],\r\n    \"category\": \"qa\",\r\n    \"isActive\": true,\r\n    \"attachments\": [],\r\n    \"programs\": [\r\n        \"61113628c4ea52404a295b03\"\r\n    ],\r\n    \"sessions\": [\r\n        \"6111359bc4ea52404a295aff\"\r\n    ],\r\n    \"description\": \"<p>fgfg</p>\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/diagram/delete/{{diagram_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"diagram",
														"delete",
														"{{diagram_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to delete the diagram without the diagram_id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to delete the diagram without the diagram_id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing  to delete the diagram without the diagram_id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to delete the diagram without the diagram_id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing  to delete the diagram without the diagram_id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to delete the diagram without the diagram_id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Test\",\r\n    \"users\": [],\r\n    \"category\": \"qa\",\r\n    \"isActive\": true,\r\n    \"attachments\": [],\r\n    \"programs\": [\r\n        \"61113628c4ea52404a295b03\"\r\n    ],\r\n    \"sessions\": [\r\n        \"6111359bc4ea52404a295aff\"\r\n    ],\r\n    \"description\": \"<p>fgfg</p>\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/diagram/delete/{{}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"diagram",
														"delete",
														"{{}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Comment Diagram",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to get all the my_diagrams",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/diagram/mydiagrams",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"diagram",
														"mydiagrams"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to get all the my_diagrams without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the mydiagram without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the mydiagram without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing  to get all the mydiagram without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the mydiagram without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request to get all the mydiagram without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/diagram/mydiagrams",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"diagram",
														"mydiagrams"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Portal Guide",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to create guide on the portal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"guide_link_id\", jsonData.link._id);\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"test\",\r\n    \"url\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/any-document/1688271458301-Resume-part-1.pdf\",\r\n    \"image\": \"\",\r\n    \"isActive\": true,\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"61113589c4ea52404a295afe\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/guide/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"guide",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to create a guide on the portal without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing  to create a guide on the portal without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to create a guide on the portal without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to create a guide on the portal without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing  to create a guide on the portal without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request  to create a guide on the portal without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"test\",\r\n    \"url\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/any-document/1688271458301-Resume-part-1.pdf\",\r\n    \"image\": \"\",\r\n    \"isActive\": true,\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"61113589c4ea52404a295afe\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/guide/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"guide",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to create a guide on the portal without the title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing  to create a guide on the portal without the title\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to create a guide on the portal without the title\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to create a guide on the portal without the title\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Title and link are required' message when executing  to create a guide on the portal without the title\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Title and link are required\");\r",
															"\r",
															"});\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request  to create a guide on the portal without the title\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"\",\r\n    \"url\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/any-document/1688271458301-Resume-part-1.pdf\",\r\n    \"image\": \"\",\r\n    \"isActive\": true,\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"61113589c4ea52404a295afe\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/guide/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"guide",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to create a guide on the portal to keeping the url field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing  to create a guide on the portal to keeping the url field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to create a guide on the portal to keeping the url field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to create a guide on the portal to keeping the url field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Title and link are required' message when executing  to create a guide on the portal to keeping the url field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Title and link are required\");\r",
															"\r",
															"});\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request  to create a guide on the portal to keeping the url field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"test\",\r\n    \"url\": \"\",\r\n    \"image\": \"\",\r\n    \"isActive\": true,\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"61113589c4ea52404a295afe\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/guide/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"guide",
														"create"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get all",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to get all the guide for the portal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/guide/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"guide",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to get all the guide for the portal without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the guide for the portal without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the guide for the portal without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the guide for the portal without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the guide for the portal without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request to get all the guide for the portal without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\r\n    {\r\n        \"activeStatus\": {\r\n            \"isActive\": false,\r\n            \"activeUntill\": null\r\n        },\r\n        \"description\": null,\r\n        \"programs\": [\r\n            {\r\n                \"_id\": \"611136a8c4ea52404a295b06\",\r\n                \"title\": \"CloudOps Engineer\"\r\n            }\r\n        ],\r\n        \"sessions\": [\r\n            {\r\n                \"_id\": \"61113557c4ea52404a295afd\",\r\n                \"name\": \"Winter 2021- DevOps Engineer\"\r\n            }\r\n        ],\r\n        \"plans\": [\r\n            {\r\n                \"_id\": \"629a66d080c4ff665817af68\",\r\n                \"title\": \"standard\"\r\n            }\r\n        ],\r\n        \"users\": [\r\n            {\r\n                \"profilePicture\": \"https://lh3.googleusercontent.com/a-/AOh14Gi2-xfBWZTjEHdH-6HQHAbp8ejjrQLJ_JG3K_ECeA=s96-c\",\r\n                \"lastName\": \"Abedin\",\r\n                \"_id\": \"612f878b31f80587022a0e79\",\r\n                \"email\": \"jpranto2@gmail.com\",\r\n                \"firstName\": \"Md Joynal\",\r\n                \"fullName\": \"Md Joynal Abedin\"\r\n            },\r\n            {\r\n                \"profilePicture\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/1645464096091-Screenshot-2022\",\r\n                \"lastName\": \"Shimul\",\r\n                \"_id\": \"611151c15e58a9b155d8fc6b\",\r\n                \"email\": \"186mdshimul@gmail.com\",\r\n                \"firstName\": \"Md\",\r\n                \"fullName\": \"Md Shimul\"\r\n            }\r\n        ],\r\n        \"category\": \"technicalTest\",\r\n        \"_id\": \"62c05307e040fb2303525007\",\r\n        \"title\": \"Select Users\",\r\n        \"createdAt\": \"2022-07-02T14:15:35.091Z\",\r\n        \"updatedAt\": \"2022-10-02T09:55:35.358Z\",\r\n        \"__v\": 0\r\n    },\r\n    {\r\n        \"activeStatus\": {\r\n            \"isActive\": true,\r\n            \"activeUntill\": \"2022-07-30T14:14:48.000Z\"\r\n        },\r\n        \"description\": \"\",\r\n        \"programs\": [\r\n            {\r\n                \"_id\": \"611136a8c4ea52404a295b06\",\r\n                \"title\": \"CloudOps Engineer\"\r\n            }\r\n        ],\r\n        \"sessions\": [\r\n            {\r\n                \"_id\": \"611287afd6508fb6449022ab\",\r\n                \"name\": \"Fall 2021-DevOps Engineer\"\r\n            }\r\n        ],\r\n        \"plans\": [],\r\n        \"users\": [\r\n            {\r\n                \"profilePicture\": \"https://lh3.googleusercontent.com/a-/AOh14GjLdcSd5XjA28tm7AxH5DsMvnwydYNrxZxddPSiDA=s96-c\",\r\n                \"lastName\": \"Ahmad\",\r\n                \"_id\": \"610c4f4ab000a890e91f5d7e\",\r\n                \"email\": \"shiblufahmad@gmail.com\",\r\n                \"firstName\": \"Shiblu\",\r\n                \"fullName\": \"Shiblu Ahmad\"\r\n            }\r\n        ],\r\n        \"category\": \"global\",\r\n        \"_id\": \"62c052e7e040fb2303525006\",\r\n        \"title\": \"CloudOps Feb 22\",\r\n        \"createdAt\": \"2022-07-02T14:15:03.146Z\",\r\n        \"updatedAt\": \"2022-07-02T14:15:03.146Z\",\r\n        \"__v\": 0\r\n    },\r\n    {\r\n        \"activeStatus\": {\r\n            \"isActive\": true,\r\n            \"activeUntill\": null\r\n        },\r\n        \"description\": null,\r\n        \"programs\": [],\r\n        \"sessions\": [],\r\n        \"plans\": [],\r\n        \"users\": [\r\n            {\r\n                \"profilePicture\": \"https://lh3.googleusercontent.com/a-/AOh14GjLdcSd5XjA28tm7AxH5DsMvnwydYNrxZxddPSiDA=s96-c\",\r\n                \"lastName\": \"Ahmad\",\r\n                \"_id\": \"610c4f4ab000a890e91f5d7e\",\r\n                \"email\": \"shiblufahmad@gmail.com\",\r\n                \"firstName\": \"Shiblu\",\r\n                \"fullName\": \"Shiblu Ahmad\"\r\n            }\r\n        ],\r\n        \"category\": \"global\",\r\n        \"_id\": \"62c04f19e040fb2303525005\",\r\n        \"title\": \"Shiblu Tech Test (A session name or program name)\",\r\n        \"createdAt\": \"2022-07-02T13:58:49.965Z\",\r\n        \"updatedAt\": \"2022-08-01T17:35:53.308Z\",\r\n        \"__v\": 0\r\n    },\r\n    {\r\n        \"activeStatus\": {\r\n            \"isActive\": true,\r\n            \"activeUntill\": \"2022-07-01T15:36:25.000Z\"\r\n        },\r\n        \"description\": null,\r\n        \"programs\": [],\r\n        \"sessions\": [],\r\n        \"plans\": [],\r\n        \"users\": [\r\n            {\r\n                \"profilePicture\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/1645464096091-Screenshot-2022\",\r\n                \"lastName\": \"Shimul\",\r\n                \"_id\": \"611151c15e58a9b155d8fc6b\",\r\n                \"email\": \"186mdshimul@gmail.com\",\r\n                \"firstName\": \"Md\",\r\n                \"fullName\": \"Md Shimul\"\r\n            }\r\n        ],\r\n        \"category\": \"global\",\r\n        \"_id\": \"62bfd6ed161e4544a4d5b2b2\",\r\n        \"title\": \"tt\",\r\n        \"createdAt\": \"2022-07-02T05:26:05.598Z\",\r\n        \"updatedAt\": \"2022-07-02T15:36:48.526Z\",\r\n        \"__v\": 0\r\n    },\r\n    {\r\n        \"activeStatus\": {\r\n            \"isActive\": true,\r\n            \"activeUntill\": \"2022-08-24T18:04:14.000Z\"\r\n        },\r\n        \"description\": null,\r\n        \"programs\": [],\r\n        \"sessions\": [],\r\n        \"plans\": [],\r\n        \"users\": [\r\n            {\r\n                \"profilePicture\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/1645464096091-Screenshot-2022\",\r\n                \"lastName\": \"Shimul\",\r\n                \"_id\": \"611151c15e58a9b155d8fc6b\",\r\n                \"email\": \"186mdshimul@gmail.com\",\r\n                \"firstName\": \"Md\",\r\n                \"fullName\": \"Md Shimul\"\r\n            }\r\n        ],\r\n        \"category\": \"mockInterview\",\r\n        \"_id\": \"62bfc73b2276e90284245470\",\r\n        \"title\": \"test\",\r\n        \"createdAt\": \"2022-07-02T04:19:07.628Z\",\r\n        \"updatedAt\": \"2022-08-01T18:04:54.506Z\",\r\n        \"__v\": 0\r\n    }\r\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/guide/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"guide",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Edit Portal Guide",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to edit on the portal guide",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"HR can be see on the bellow 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"HR can be see on the response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"HR can be see all portal guide on the PATCH request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"\",\r\n    \"url\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/any-document/1688271458301-Resume-part-1.pdf\",\r\n    \"image\": \"\",\r\n    \"isActive\": true,\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"61113589c4ea52404a295afe\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/guide/edit/{{guide_link_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"guide",
														"edit",
														"{{guide_link_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to edit on the portal guide without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit on the portal guide without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to edit on the portal guide without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to edit on the portal guide without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to edit on the portal guide without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request to edit on the portal guide without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"This guide is created for the test\",\r\n    \"url\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/any-document/1688271458301-Resume-part-1.pdf\",\r\n    \"image\": \"\",\r\n    \"isActive\": true,\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"61113589c4ea52404a295afe\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/guide/edit/{{guide_link_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"guide",
														"edit",
														"{{guide_link_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to edit on the portal guide without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit on the portal guide without the guide_link_id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to edit on the portal guide without the guide_link_id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to edit on the portal guide without the guide_link_id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to edit on the portal guide without the guide_link_id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to edit on the portal guide without the guide_link_id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"This guide is created for the test\",\r\n    \"url\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/any-document/1688271458301-Resume-part-1.pdf\",\r\n    \"image\": \"\",\r\n    \"isActive\": true,\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"61113589c4ea52404a295afe\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/guide/edit/{{}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"guide",
														"edit",
														"{{}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to edit on the portal guide to keeping the title field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit on the portal guide without the guide_link_id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to edit on the portal guide without the guide_link_id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to edit on the portal guide without the guide_link_id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Title and link are required' message when executing to edit on the portal guide without the guide_link_id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Title and link are required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to edit on the portal guide without the guide_link_id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"\",\r\n    \"url\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/any-document/1688271458301-Resume-part-1.pdf\",\r\n    \"image\": \"\",\r\n    \"isActive\": true,\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"61113589c4ea52404a295afe\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/guide/edit/{{guide_link_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"guide",
														"edit",
														"{{guide_link_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "My links",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to get all mylinks guide  on the portal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/guide/mylinks",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"guide",
														"mylinks"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to get all mylinks guide  on the portal without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all mylinks guide on the portal without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all mylinks guide on the portal without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all mylinks guide on the portal without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all mylinks guide on the portal without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request to get all mylinks guide on the portal without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/guide/mylinks",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"guide",
														"mylinks"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to delete on the portal guide",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Successful DELETE request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/guide/delete/{{Id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"guide",
														"delete",
														"{{Id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to delete the portal guide without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Successful DELETE request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/guide/delete/{{guide_link_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"guide",
														"delete",
														"{{guide_link_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to delete the portal guide without the guide_link_id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to delete the portal guide without the guide_link_id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to delete the portal guide without the guide_link_id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to delete the portal guide without the guide_link_id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to delete the portal guide without the guide_link_id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to delete the portal guide without the guide_link_id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/guide/delete/{{}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"guide",
														"delete",
														"{{}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "E2E Program Agenda",
					"item": [
						{
							"name": "Create program agenda",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin,  I should be able to upload the new documents",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"e2e_program_agenda_documents_id\",jsonData.document._id);\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201, 201]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"test\",\r\n    \"attachment\": [],\r\n    \"description\": \"<p>test</p>\",\r\n    \"priority\": \"low\",\r\n    \"category\": \"e2e\",\r\n    \"program\": \"61113628c4ea52404a295b03\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/document/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"document",
														"add"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to create a new program agenda document without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to add/uploaded the new document without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to add/uploaded the new document without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to add/uploaded the new document without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to add/uploaded the new document without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to add/uploaded the new document without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"This document is for testing purpose\",\r\n    \"description\": \"<p>Test</p>\\n\",\r\n    \"attachment\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/document/userdocument/add",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"document",
														"userdocument",
														"add"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to create a new program agenda document to keeping the name field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to add new program agenda document to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to add new program agenda document to keeping the name field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to add new program agenda document to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Something went wrong' message when executing to add new program agenda document to keeping the name field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to add/uploaded the new document to add new program agenda document to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"\",\r\n    \"attachment\": [],\r\n    \"description\": \"<p>test</p>\",\r\n    \"priority\": \"low\",\r\n    \"category\": \"e2e\",\r\n    \"program\": \"61113628c4ea52404a295b03\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/document/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"document",
														"add"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get all",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin,I should be able see on e2e documents",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"document_id\",jsonData.documents[9]._id);\r",
															"console.log(jsonData);\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"page\": 2,\r\n    \"limit\": 10,\r\n    \"sort_by\": \"newest\",\r\n    \"program\": \"\",\r\n    \"session\": \"\",\r\n    \"query\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/document/getall/e2e",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"document",
														"getall",
														"e2e"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin ,I should not be able get all the e2e program agenda documents without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the e2e program agenda documents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the e2e program agenda documents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing  to get all the e2e program agenda documents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the e2e program agenda documents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request  to get all the e2e program agenda documents without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"page\": 2,\r\n    \"limit\": 10,\r\n    \"sort_by\": \"newest\",\r\n    \"program\": \"\",\r\n    \"session\": \"\",\r\n    \"query\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/document/getall/e2e",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"document",
														"getall",
														"e2e"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Edit",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able edit on my uploaded documents",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"pm.test(\"HR can edit create coments the document post\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
															"});\r",
															"pm.test(\"HR can edit create coments new blog bellow 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Upload document edit create comment response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"description\": \"<p>This is the program agenda document</p>\",\r\n    \"attachment\": [\r\n        \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/document-sending/1689490861651-generatedBy_react-csv.csv\"\r\n    ],\r\n    \"user\": [],\r\n    \"priority\": \"low\",\r\n    \"category\": \"e2e\",\r\n    \"_id\": \"64b395be9a46ee00190ae6ec\",\r\n    \"name\": \"test123\",\r\n    \"program\": {\r\n        \"_id\": \"61113628c4ea52404a295b03\",\r\n        \"title\": \"Software Quality Automation Engineer\"\r\n    },\r\n    \"comments\": [\r\n        {\r\n            \"comment\": \"hi\",\r\n            \"_id\": \"64b3966a9a46ee00190ae6f4\",\r\n            \"user\": \"64883e7837a20c00197f0a33\",\r\n            \"date\": \"2023-07-16T07:04:10.267Z\"\r\n        }\r\n    ],\r\n    \"createdAt\": \"2023-07-16T07:01:18.659Z\",\r\n    \"updatedAt\": \"2023-07-18T11:29:05.342Z\",\r\n    \"__v\": 0,\r\n    \"session\": {\r\n        \"_id\": \"61113557c4ea52404a295afd\",\r\n        \"name\": \"Winter 2021- DevOps Engineer\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/document/edit/{{e2e_program_agenda_documents_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"document",
														"edit",
														"{{e2e_program_agenda_documents_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able edit the program agenda documents without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit the program agenda documents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing  to edit the program agenda documents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to edit the program agenda documents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing  to edit the program agenda documents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request  to edit the program agenda documents without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"description\": \"<p>This is the program agenda document</p>\",\r\n    \"attachment\": [\r\n        \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/document-sending/1689490861651-generatedBy_react-csv.csv\"\r\n    ],\r\n    \"user\": [],\r\n    \"priority\": \"low\",\r\n    \"category\": \"e2e\",\r\n    \"_id\": \"64b395be9a46ee00190ae6ec\",\r\n    \"name\": \"test123\",\r\n    \"program\": {\r\n        \"_id\": \"61113628c4ea52404a295b03\",\r\n        \"title\": \"Software Quality Automation Engineer\"\r\n    },\r\n    \"comments\": [\r\n        {\r\n            \"comment\": \"hi\",\r\n            \"_id\": \"64b3966a9a46ee00190ae6f4\",\r\n            \"user\": \"64883e7837a20c00197f0a33\",\r\n            \"date\": \"2023-07-16T07:04:10.267Z\"\r\n        }\r\n    ],\r\n    \"createdAt\": \"2023-07-16T07:01:18.659Z\",\r\n    \"updatedAt\": \"2023-07-18T11:29:05.342Z\",\r\n    \"__v\": 0,\r\n    \"session\": {\r\n        \"_id\": \"61113557c4ea52404a295afd\",\r\n        \"name\": \"Winter 2021- DevOps Engineer\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/document/edit/{{e2e_program_agenda_documents_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"document",
														"edit",
														"{{e2e_program_agenda_documents_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able edit the program agenda documents without the e2e_program_agenda_documents_id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit the program agenda documents without the e2e_program_agenda_documents_id \", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing  to edit the program agenda documents without the e2e_program_agenda_documents_id \", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to edit the program agenda documents without the e2e_program_agenda_documents_id \", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Something went wrong' message when executing  edit the program agenda documents without the e2e_program_agenda_documents_id \", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request  to edit the program agenda documents without the e2e_program_agenda_documents_id \", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"description\": \"<p>This is the program agenda document</p>\",\r\n    \"attachment\": [\r\n        \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/document-sending/1689490861651-generatedBy_react-csv.csv\"\r\n    ],\r\n    \"user\": [],\r\n    \"priority\": \"low\",\r\n    \"category\": \"e2e\",\r\n    \"_id\": \"64b395be9a46ee00190ae6ec\",\r\n    \"name\": \"test123\",\r\n    \"program\": {\r\n        \"_id\": \"61113628c4ea52404a295b03\",\r\n        \"title\": \"Software Quality Automation Engineer\"\r\n    },\r\n    \"comments\": [\r\n        {\r\n            \"comment\": \"hi\",\r\n            \"_id\": \"64b3966a9a46ee00190ae6f4\",\r\n            \"user\": \"64883e7837a20c00197f0a33\",\r\n            \"date\": \"2023-07-16T07:04:10.267Z\"\r\n        }\r\n    ],\r\n    \"createdAt\": \"2023-07-16T07:01:18.659Z\",\r\n    \"updatedAt\": \"2023-07-18T11:29:05.342Z\",\r\n    \"__v\": 0,\r\n    \"session\": {\r\n        \"_id\": \"61113557c4ea52404a295afd\",\r\n        \"name\": \"Winter 2021- DevOps Engineer\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/document/edit/{{}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"document",
														"edit",
														"{{}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete Document",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to delete on the document",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful DELETE request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/document/delete/{{e2e_program_agenda_documents_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"document",
														"delete",
														"{{e2e_program_agenda_documents_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to delete the program agenda document without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to delete the program agenda document without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to delete the program agenda document without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to delete the program agenda document without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to delete the program agenda document without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to delete the program agenda document without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/document/delete/{{e2e_program_agenda_documents_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"document",
														"delete",
														"{{e2e_program_agenda_documents_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Mock Interviews Questions/Answers",
					"item": [
						{
							"name": "Add Interview",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin , I Should be able to create on the  mock interview",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"interview_id\", jsonData.interview._id);\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Test Interview12\",\r\n    \"isActive\": true,\r\n    \"index\": 0,\r\n    \"groups\": [\r\n        \"64c78ad1cad58e0024accd8f\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/addinterview",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"addinterview"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin , I should not be able to create a  mock interview without inputting the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to create a mock interview without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to create a mock interview without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to create a mock interview without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to create a mock interview without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to create a mock interview without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Postman\",\r\n    \"isActive\": true,\r\n    \"index\": \"1\",\r\n    \"groups\": [\r\n        \"64c78ad1cad58e0024accd8f\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/addinterview",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"addinterview"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin , I should not be able to create a  mock interview without inputting the name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to create a mock interview to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to create a mock interview to keeping the name field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to create a mock interview to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Name is required' message when executing to create a mock interview to keeping the name field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Name is required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to create a mock interview to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"\",\r\n    \"isActive\": true,\r\n    \"index\": \"1\",\r\n    \"groups\": [\r\n        \"64c78ad1cad58e0024accd8f\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/addinterview",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"addinterview"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin , I should not be able to create a  mock interview without inputting the group id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to create a mock interview to keeping the group field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to create a mock interview to keeping the group field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to create a mock interview to keeping the group field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Something went wrong' message when executing to create a mock interview to keeping the group field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to create a mock interview the group field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Postman\",\r\n    \"isActive\": true,\r\n    \"index\": \"1\",\r\n    \"groups\": [\r\n        \"\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/addinterview",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"addinterview"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "(Fail, go to the excel)GetAll Interview",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I can be able to add get all the interview",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2100ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2100);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I can be able to add get all the interview",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the interview without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the interview without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing  to get all the interview without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the interview without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to get all the interview without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get interview by ID",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Aa an admin, I should be able to get an interview by the user ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/getinterview/{{interview_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"getinterview",
														"{{interview_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Aa an admin, I should not be able to get a user interview without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get a user interview without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get a user interview without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get a user interview without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get a user interview without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to get a user interview without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/getinterview/{{interview_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"getinterview",
														"{{interview_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Aa an admin, I should not be able to get a user interview without the interview_id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get a user interview without the interview_id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get a user interview without the interview_id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get a user interview without the interview_id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Something went wrong' message when executing to get a user interview without the interview_id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to get a user interview without the interview_id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/getinterview/{{}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"getinterview",
														"{{}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Edit Interview",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should be able to edit the interview by the interview_id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 3000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful PATCH request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Java Interview for all IT & non-IT Students\",\r\n    \"isActive\": true,\r\n    \"index\": 0,\r\n    \"groups\": [\r\n        \"64605638145e9700180b7a47\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/edit/{{interview_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"edit",
														"{{interview_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin should not be able to edit the interview without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit the interview without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing  to edit the interview without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to edit the interview without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing  to edit the interview without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to edit the interview without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Java Interview for all IT & non-IT Students\",\r\n    \"isActive\": true,\r\n    \"index\": 0,\r\n    \"groups\": [\r\n        \"64605638145e9700180b7a47\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/edit/{{interview_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"edit",
														"{{interview_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Admin should not be able to edit the interview without the interview_id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit the interview without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing  to edit the interview without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to edit the interview without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing  to edit the interview without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to edit the interview without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Java Interview for all IT & non-IT Students\",\r\n    \"isActive\": true,\r\n    \"index\": 0,\r\n    \"groups\": [\r\n        \"64605638145e9700180b7a47\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/edit/{{interview_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"edit",
														"{{interview_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Admin should not be able to edit the interview to keeping the name field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit the interview to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing  to edit the interview to keeping the name field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to edit the interview to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Interview name is required' message when executing to edit the interview to keeping the name field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Interview name is required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to edit the interview to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"\",\r\n    \"isActive\": true,\r\n    \"index\": 0,\r\n    \"groups\": [\r\n        \"64605638145e9700180b7a47\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/edit/{{interview_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"edit",
														"{{interview_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Clone Interview",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should be able to clone an interview",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/cloneinterview/{{interview_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"cloneinterview",
														"{{interview_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin should  not be able to clone an interview without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to clone a interview without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to create a mock interview without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to create a mock interview without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to create a mock interview without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to create a mock interview without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/cloneinterview/{{interview_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"cloneinterview",
														"{{interview_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Admin should not be able to clone an interview without the interview_id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to clone an interview without the interview_id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to clone an interview without the interview_id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to clone an interview without the interview_id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to clone an interview without the interview_id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to clone an interview without the interview_id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/cloneinterview/{{}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"cloneinterview",
														"{{}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Interview questions Answer",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should be able to see all the submitted answers on the interviews",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userId\": \"6167480aff9129d3933e349b\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/allsubmission",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"allsubmission"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin should not be able to see all the submitted answers on the interview without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to see all the submitted answers on the interview without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to see all the submitted answers on the interview without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to see all the submitted answers on the interview without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to see all the submitted answers on the interview without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to see all the submitted answers on the interview without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userId\": \"6167480aff9129d3933e349b\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/allsubmission",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"allsubmission"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "(Need to fixed the api endpoint)Get all lite",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should be able to get all the interview title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userId\": \"6167480aff9129d3933e349b\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/getalllite",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"getalllite"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin should not be able to get all the title without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the interview title without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the interview title without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the interview title without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the interview title without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to get all the interview title without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"userId\": \"6167480aff9129d3933e349b\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/getalllite",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"getalllite"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Interview answer Update",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should be able to update the answer marks",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"mark\": 50\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/updatesubmission/{{interview_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"updatesubmission",
														"{{interview_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin should not be able to update the answer marks",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to update the answer marks without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to update the answer marks without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to update the answer marks without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to update the answer marks without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to update the answer marks without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"mark\": 50\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/updatesubmission/{{interview_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"updatesubmission",
														"{{interview_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Interview submission",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should be able to find the user's who submitted the  interview answer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"64a29b672ab66c0019adea73\",\r\n    \"query\": \" Israk Zahan\",\r\n    \"date\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/submissionusers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"submissionusers"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin should not be able to find the user's who submitted the  interview answer without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to find the user's who submitted the  interview answer  without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to find the user's who submitted the  interview answer  without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to find the user's who submitted the  interview answer  without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to find the user's who submitted the  interview answer  without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to find the user's who submitted the  interview answer  without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"64a29b672ab66c0019adea73\",\r\n    \"query\": \" Israk Zahan\",\r\n    \"date\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/interview/submissionusers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"interview",
														"submissionusers"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Job Market/ Job Offer(ContentRoutes)",
					"item": [
						{
							"name": "Add new Content",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should be able to add new job offer  content",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"job_offer_content_id\", jsonData.content._id);\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"SQA_Test_Job Offer\",\r\n    \"description\": \"<p>Test</p>\",\r\n    \"category\": \"joboffer\",\r\n    \"tags\": [\r\n        \"Negotiate\"\r\n    ],\r\n    \"dependencies\": [\r\n        \"64968a05c6f5ac0019c2b22e\"\r\n    ],\r\n    \"attachments\": [],\r\n    \"groups\": [\r\n        \"64c78ad1cad58e0024accd8f\"\r\n    ],\r\n    \"courses\": [\r\n        \"610c4a56b000a890e91f5d75\"\r\n    ],\r\n    \"programs\": [\r\n        \"61113628c4ea52404a295b03\"\r\n    ],\r\n    \"slide\": \"6491702ac6f5ac0019c2aee7\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/content/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"content",
														"add"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin should not be able to add new job offer  content without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to add new job offer content without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to add new job offer content without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to add new job offer content without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to add new job offer content without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to add new job offer content without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"New job offer test\",\r\n    \"description\": \"<p>Test22334455</p>\",\r\n    \"category\": \"joboffer\",\r\n    \"tags\": [\r\n        \"Calm Down\"\r\n    ],\r\n    \"dependencies\": [\r\n        \"615c8c3360b919ef942a1698\"\r\n    ],\r\n    \"attachments\": [],\r\n    \"groups\": [\r\n        \"62bfc73b2276e90284245470\"\r\n    ],\r\n    \"courses\": [\r\n        \"610c4a56b000a890e91f5d75\"\r\n    ],\r\n    \"programs\": [\r\n        \"613770f4a5f50fcf7b891003\"\r\n    ],\r\n    \"slide\": \"63f18811db87377003c977d7\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/content/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"content",
														"add"
													]
												}
											},
											"response": []
										},
										{
											"name": "Admin should not be able to add new job offer  content to keeping the name field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to add new job offer content to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to add new job offer content to keeping the name field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to add new job offer content to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'name, description and category is required' message when executing to add new job offer content to keeping the name field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"name, description and category is required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to add new job offer content to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"\",\r\n    \"description\": \"<p>Test22334455</p>\",\r\n    \"category\": \"joboffer\",\r\n    \"tags\": [\r\n        \"Calm Down\"\r\n    ],\r\n    \"dependencies\": [\r\n        \"615c8c3360b919ef942a1698\"\r\n    ],\r\n    \"attachments\": [],\r\n    \"groups\": [\r\n        \"62bfc73b2276e90284245470\"\r\n    ],\r\n    \"courses\": [\r\n        \"610c4a56b000a890e91f5d75\"\r\n    ],\r\n    \"programs\": [\r\n        \"613770f4a5f50fcf7b891003\"\r\n    ],\r\n    \"slide\": \"63f18811db87377003c977d7\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/content/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"content",
														"add"
													]
												}
											},
											"response": []
										},
										{
											"name": "Admin should not be able to add new job offer  content to keeping the description field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to add new job offer content to keeping the description field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to add new job offer content to keeping the description field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to add new job offer content to keeping the description field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'name, description and category is required' message when executing to add new job offer content to keeping the description field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"name, description and category is required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to add new job offer content to keeping the description field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"New job offer test\",\r\n    \"description\": \"\",\r\n    \"category\": \"joboffer\",\r\n    \"tags\": [\r\n        \"Calm Down\"\r\n    ],\r\n    \"dependencies\": [\r\n        \"615c8c3360b919ef942a1698\"\r\n    ],\r\n    \"attachments\": [],\r\n    \"groups\": [\r\n        \"62bfc73b2276e90284245470\"\r\n    ],\r\n    \"courses\": [\r\n        \"610c4a56b000a890e91f5d75\"\r\n    ],\r\n    \"programs\": [\r\n        \"613770f4a5f50fcf7b891003\"\r\n    ],\r\n    \"slide\": \"63f18811db87377003c977d7\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/content/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"content",
														"add"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "(Failed)Edit Job Offer Content",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should be able to edit the job offer content",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/content/edit/{{job_offer_content_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"content",
														"edit",
														"{{job_offer_content_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete new content",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should be able to delete the job_offer_content",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful DELETE request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Test by Israk\",\r\n    \"description\": \"<p>we prepare the people for job sciking easily</p>\",\r\n    \"category\": \"jobmarket\",\r\n    \"tags\": [],\r\n    \"dependencies\": [\r\n        \"61e19456b0db4c324d253603\"\r\n    ],\r\n    \"attachments\": [],\r\n    \"groups\": [\r\n        \"63ff8a09094b355a8968b4dd\"\r\n    ],\r\n    \"courses\": [\r\n        \"64533d60ce7ccd0019e43fe9\"\r\n    ],\r\n    \"programs\": [\r\n        \"61113628c4ea52404a295b03\"\r\n    ],\r\n    \"slide\": \"62dc393ffe767342fb74cf13\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/content/delete/{{job_offer_content_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"content",
														"delete",
														"{{job_offer_content_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin should not be able to  delete the job offer content without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to delete the job offer content without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to delete the job offer content without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to delete the job offer content without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to delete the job offer content without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to delete the job offer content without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Test by Israk\",\r\n    \"description\": \"<p>we prepare the people for job sciking easily</p>\",\r\n    \"category\": \"jobmarket\",\r\n    \"tags\": [],\r\n    \"dependencies\": [\r\n        \"61e19456b0db4c324d253603\"\r\n    ],\r\n    \"attachments\": [],\r\n    \"groups\": [\r\n        \"63ff8a09094b355a8968b4dd\"\r\n    ],\r\n    \"courses\": [\r\n        \"64533d60ce7ccd0019e43fe9\"\r\n    ],\r\n    \"programs\": [\r\n        \"61113628c4ea52404a295b03\"\r\n    ],\r\n    \"slide\": \"62dc393ffe767342fb74cf13\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/content/delete/{{job_offer_content_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"content",
														"delete",
														"{{job_offer_content_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Enrollment Service",
			"item": [
				{
					"name": "Pending",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Admin should able to see on the  painding students information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"Enrolment Approved ID\", jsonData.users._id);\r",
													"\r",
													"\r",
													"//Validate the status code\r",
													"pm.test(\"Admin approved the students applications successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin approved the students applications within 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"pm.test(\"users key matched\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
													"     pm.expect(pm.response.text()).to.include(\"lastName\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 30,\r\n    \"sort_by\": \"newest\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/students/getstudents/pending",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"students",
												"getstudents",
												"pending"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Admin shouldn't able to see on the  painding students information without body data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing to show all the students lists without inputting the body data\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to show all the students lists without inputting the body data\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"//Validate the status code name\r",
													"pm.test(\"Admin should get the 'Bad Request' status code name when executing to show all the students lists without inputting the body data\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"Admin should get the 'Authorization required' message when executing to show all the students lists without inputting the body data\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"\r",
													"});\r",
													"\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request of slider without inputting the body data\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/students/getstudents/pending",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"students",
												"getstudents",
												"pending"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin shouldn't able to see on the  painding students information without tokan",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing to show all the students lists without inputting the tokan\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to show all the students lists without inputting the tokan\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"//Validate the status code name\r",
													"pm.test(\"Admin should get the 'Bad Request' status code name when executing to show all the students lists without inputting the tokan\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"Admin should get the 'Authorization required' message when executing to show all the students lists without inputting the tokan\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"\r",
													"});\r",
													"\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request of slider without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 30,\r\n    \"sort_by\": \"newest\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/students/getstudents/pending",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"students",
												"getstudents",
												"pending"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Approved",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Admin should able to approved the students applications",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"personalInformation\": {\r\n        \"firstName\": \"Testt\",\r\n        \"lastName\": \"Das\",\r\n        \"middleName\": \"\",\r\n        \"otherName\": \"\",\r\n        \"dob\": \"'2003-01-01T08:51:10Z'\",\r\n        \"gender\": \"male\",\r\n        \"ssn\": \"\"\r\n    },\r\n    \"instantContact\": {\r\n        \"phone\": \"(261) 121-4013\",\r\n        \"whatsApp\": \"(462) 156-9563\",\r\n        \"outlook\": \"\",\r\n        \"address1\": \"54558415vfhsdi\",\r\n        \"address2\": \"\",\r\n        \"city\": \"dfvsd\",\r\n        \"state\": \"Alabama\",\r\n        \"zip\": \"32191\"\r\n    },\r\n    \"secondaryContact\": {\r\n        \"fullName\": \"gtyllguyui\",\r\n        \"address1\": \"jkl;k23vg263\",\r\n        \"address2\": \"\",\r\n        \"city\": \"oikopv4556\",\r\n        \"state\": \"California\",\r\n        \"zip\": \"644635k146\",\r\n        \"phone\": \"(526) 3552-6562\"\r\n    },\r\n    \"education\": {\r\n        \"education\": \"highSchool\",\r\n        \"majorProgram\": \"\",\r\n        \"occupation\": \"4kjiku\",\r\n        \"companyName\": \"\",\r\n        \"experience\": \"\",\r\n        \"languageProficiency\": \"begineer\"\r\n    },\r\n    \"payment\": {\r\n        \"method\": \"check\",\r\n        \"bankName\": \"\",\r\n        \"acountType\": \"\",\r\n        \"acountNumber\": \"\",\r\n        \"routingNumber\": \"\"\r\n    },\r\n    \"additionalInfo\": {\r\n        \"isVeteran\": false,\r\n        \"isFelenoy\": true,\r\n        \"hasDrivingLicense\": false,\r\n        \"hasCreditCard\": false,\r\n        \"hasDegree\": false,\r\n        \"hasAssociateDegree\": true,\r\n        \"isAuthorizeUSA\": true,\r\n        \"hasCompunerKnowledge\": true,\r\n        \"hasBasicInternetSkill\": true,\r\n        \"hasEnglishWritingSkill\": false,\r\n        \"hasSlack\": true,\r\n        \"isJoinedSlack\": true,\r\n        \"hasZoom\": true,\r\n        \"isAvailableWorkshop\": false,\r\n        \"isRefer\": false,\r\n        \"referName\": \"\"\r\n    },\r\n    \"document\": {\r\n        \"remark\": \"\",\r\n        \"idCard\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1689662890092-Mituldas.png\",\r\n        \"signature\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1689662864229-blob\",\r\n        \"check\": \"\",\r\n        \"otherDocument\": \"\",\r\n        \"isAgreedToPush\": true\r\n    },\r\n    \"totalAmount\": 0,\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"61113589c4ea52404a295afe\",\r\n    \"plan\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/students/approve/64ca3459a78d9d0020376029",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"students",
												"approve",
												"64ca3459a78d9d0020376029"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Admin shouldn't able to approved the students applications without token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing to show all the approval students lists without inputting the tokan\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to show all the approval students lists without inputting the tokan\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"//Validate the status code name\r",
													"pm.test(\"Admin should get the 'Bad Request' status code name when executing to show all the approval students lists without inputting the tokan\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"Admin should get the 'Authorization required' message when executing to show all the approval students lists without inputting the tokan\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"\r",
													"});\r",
													"\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request of approval students without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"personalInformation\": {\r\n        \"firstName\": \"Testt\",\r\n        \"lastName\": \"Das\",\r\n        \"middleName\": \"\",\r\n        \"otherName\": \"\",\r\n        \"dob\": \"'2003-01-01T08:51:10Z'\",\r\n        \"gender\": \"male\",\r\n        \"ssn\": \"\"\r\n    },\r\n    \"instantContact\": {\r\n        \"phone\": \"(261) 121-4013\",\r\n        \"whatsApp\": \"(462) 156-9563\",\r\n        \"outlook\": \"\",\r\n        \"address1\": \"54558415vfhsdi\",\r\n        \"address2\": \"\",\r\n        \"city\": \"dfvsd\",\r\n        \"state\": \"Alabama\",\r\n        \"zip\": \"32191\"\r\n    },\r\n    \"secondaryContact\": {\r\n        \"fullName\": \"gtyllguyui\",\r\n        \"address1\": \"jkl;k23vg263\",\r\n        \"address2\": \"\",\r\n        \"city\": \"oikopv4556\",\r\n        \"state\": \"California\",\r\n        \"zip\": \"644635k146\",\r\n        \"phone\": \"(526) 3552-6562\"\r\n    },\r\n    \"education\": {\r\n        \"education\": \"highSchool\",\r\n        \"majorProgram\": \"\",\r\n        \"occupation\": \"4kjiku\",\r\n        \"companyName\": \"\",\r\n        \"experience\": \"\",\r\n        \"languageProficiency\": \"begineer\"\r\n    },\r\n    \"payment\": {\r\n        \"method\": \"check\",\r\n        \"bankName\": \"\",\r\n        \"acountType\": \"\",\r\n        \"acountNumber\": \"\",\r\n        \"routingNumber\": \"\"\r\n    },\r\n    \"additionalInfo\": {\r\n        \"isVeteran\": false,\r\n        \"isFelenoy\": true,\r\n        \"hasDrivingLicense\": false,\r\n        \"hasCreditCard\": false,\r\n        \"hasDegree\": false,\r\n        \"hasAssociateDegree\": true,\r\n        \"isAuthorizeUSA\": true,\r\n        \"hasCompunerKnowledge\": true,\r\n        \"hasBasicInternetSkill\": true,\r\n        \"hasEnglishWritingSkill\": false,\r\n        \"hasSlack\": true,\r\n        \"isJoinedSlack\": true,\r\n        \"hasZoom\": true,\r\n        \"isAvailableWorkshop\": false,\r\n        \"isRefer\": false,\r\n        \"referName\": \"\"\r\n    },\r\n    \"document\": {\r\n        \"remark\": \"\",\r\n        \"idCard\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1689662890092-Mituldas.png\",\r\n        \"signature\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1689662864229-blob\",\r\n        \"check\": \"\",\r\n        \"otherDocument\": \"\",\r\n        \"isAgreedToPush\": true\r\n    },\r\n    \"totalAmount\": 0,\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"61113589c4ea52404a295afe\",\r\n    \"plan\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/students/approve/64ca3459a78d9d0020376029",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"students",
												"approve",
												"64ca3459a78d9d0020376029"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Marketing",
					"item": [
						{
							"name": "Export File",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should able to export the marketing file on the marketing page",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin exported the marketing file on the marketing page successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin exported the marketing file on the marketing page within 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"query\": \"\",\r\n    \"date\": null,\r\n    \"verification\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/user/students/exportmarketing",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"user",
														"students",
														"exportmarketing"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin shouldn't be able to export the marketing file on the marketing page without body data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to show all the students lists without inputting the tokan\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"//Validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to show all the students lists without inputting the tokan\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to show all the students lists without inputting the tokan\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to show all the students lists without inputting the tokan\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request of slider without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"query\": \"\",\r\n    \"date\": null,\r\n    \"verification\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/user/students/exportmarketing",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"user",
														"students",
														"exportmarketing"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Inquiry",
							"item": [
								{
									"name": "Admin should be able to send the email  to the students for marketing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin send the email  to the students for marketing successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin send the email  to the students for marketing form within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"pm.test(\"users key matched\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"isEmailVerified\");\r",
													"     pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"success\": true,\r\n    \"users\": [\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": true,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"Das\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64dd9fbb6cb48b0019b7ce13\",\r\n            \"email\": \"reggie21@hotmail.com}\",\r\n            \"firstName\": \"Mitul\",\r\n            \"phone\": \"375-769-1736\",\r\n            \"id\": \"197706\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-08-17T04:19:07.563Z\",\r\n            \"updatedAt\": \"2023-08-20T10:44:02.067Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"Mitul Das\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"Das\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64dd9f066cb48b0019b7ce0f\",\r\n            \"email\": \"mateo.lang@yahoo.com}\",\r\n            \"firstName\": \"Mitul\",\r\n            \"phone\": \"974-471-9798\",\r\n            \"id\": \"627393\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-08-17T04:16:06.969Z\",\r\n            \"updatedAt\": \"2023-08-17T04:16:06.969Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"Mitul Das\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"shimul\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64d7acb00a172471d486b626\",\r\n            \"email\": \"shiwerwetemul186@gmail.com\",\r\n            \"firstName\": \"md\",\r\n            \"phone\": \"15464357645\",\r\n            \"id\": \"898723\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-08-12T16:00:48.606Z\",\r\n            \"updatedAt\": \"2023-08-12T16:00:48.606Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"md shimul\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"shimul\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64d7ac970a172471d486b622\",\r\n            \"email\": \"shimusdgfdgdl186@gmail.com\",\r\n            \"firstName\": \"md\",\r\n            \"phone\": \"15476547456\",\r\n            \"id\": \"427000\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-08-12T16:00:23.343Z\",\r\n            \"updatedAt\": \"2023-08-12T16:00:23.343Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"md shimul\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"shimul\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64d7abf30a172471d486b5fe\",\r\n            \"email\": \"gartovexfgyda@gufum.com\",\r\n            \"firstName\": \"md\",\r\n            \"phone\": \"14564574574\",\r\n            \"id\": \"387782\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-08-12T15:57:39.799Z\",\r\n            \"updatedAt\": \"2023-08-12T15:57:39.799Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"md shimul\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"shimul\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64d7abbd0a172471d486b5f8\",\r\n            \"email\": \"gartoveyda@gufum.com\",\r\n            \"firstName\": \"md\",\r\n            \"phone\": \"15464575475\",\r\n            \"id\": \"815734\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-08-12T15:56:45.014Z\",\r\n            \"updatedAt\": \"2023-08-12T15:56:45.014Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"md shimul\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"shimul\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64d7ab800a172471d486b5f0\",\r\n            \"email\": \"curdebadra@gufum.com\",\r\n            \"firstName\": \"md\",\r\n            \"phone\": \"14364764574\",\r\n            \"id\": \"785152\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-08-12T15:55:44.914Z\",\r\n            \"updatedAt\": \"2023-08-12T15:55:44.914Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"md shimul\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"shimul\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64d7aaee0a172471d486b5db\",\r\n            \"email\": \"siltocuydo@gufum.com\",\r\n            \"firstName\": \"md\",\r\n            \"phone\": \"14575687568\",\r\n            \"id\": \"095977\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-08-12T15:53:18.857Z\",\r\n            \"updatedAt\": \"2023-08-12T15:53:18.857Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"md shimul\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"shimul\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64d7aa5e778866193c8fb260\",\r\n            \"email\": \"hognenarde@gufum.com\",\r\n            \"firstName\": \"md\",\r\n            \"phone\": \"15475674658\",\r\n            \"id\": \"541743\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-08-12T15:50:54.687Z\",\r\n            \"updatedAt\": \"2023-08-12T15:50:54.687Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"md shimul\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": true,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"shimul\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64d7a8f2c26d406c38f6ee96\",\r\n            \"email\": \"vafoga3041@tiuas.com\",\r\n            \"firstName\": \"md\",\r\n            \"phone\": \"14576568756\",\r\n            \"id\": \"511326\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-08-12T15:44:50.935Z\",\r\n            \"updatedAt\": \"2023-08-12T15:50:22.801Z\",\r\n            \"__v\": 0,\r\n            \"lastActive\": \"2023-08-12T15:50:22.801Z\",\r\n            \"fullName\": \"md shimul\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": false,\r\n                \"canInitiateChat\": false,\r\n                \"canCreateChannel\": false,\r\n                \"canReadMessage\": false,\r\n                \"canSendMessage\": false\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"Das\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64d1a4a411c2a200240e4ae8\",\r\n            \"email\": \"chadd0@yahoo.com}\",\r\n            \"firstName\": \"Mitul\",\r\n            \"phone\": \"888-650-4813\",\r\n            \"id\": \"728386\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-08-08T02:12:52.671Z\",\r\n            \"updatedAt\": \"2023-08-11T21:36:27.420Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"Mitul Das\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"Test\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64c9762ba78d9d0020375911\",\r\n            \"firstName\": \"Test\",\r\n            \"phone\": \"15862767347\",\r\n            \"id\": \"511264\",\r\n            \"email\": \"test@tst.com\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-08-01T21:16:27.590Z\",\r\n            \"updatedAt\": \"2023-08-12T03:42:42.322Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"Test Test\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"User\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64c56c5ebeab370020f23d5d\",\r\n            \"email\": \"nvjviytfncmnk@exelica.com\",\r\n            \"firstName\": \"Test\",\r\n            \"phone\": \"16785617194\",\r\n            \"id\": \"016243\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-07-29T19:45:34.860Z\",\r\n            \"updatedAt\": \"2023-07-29T19:45:34.860Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"Test User\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"User\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64c56a99beab370020f23d54\",\r\n            \"email\": \"i5805pdc2@qiott.com\",\r\n            \"firstName\": \"Test\",\r\n            \"phone\": \"14704622201\",\r\n            \"id\": \"010983\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-07-29T19:38:01.493Z\",\r\n            \"updatedAt\": \"2023-07-29T19:38:01.493Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"Test User\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"Protik\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64c51b68beab370020f23d4d\",\r\n            \"email\": \"imvhug@wuuvo.com\",\r\n            \"firstName\": \"Rafiur\",\r\n            \"phone\": \"19855456863\",\r\n            \"id\": \"048753\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-07-29T14:00:08.868Z\",\r\n            \"updatedAt\": \"2023-07-29T14:00:08.868Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"Rafiur Protik\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": true,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"Ahmed\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64bb777675b2f10019a83830\",\r\n            \"email\": \"c9b1590a6a@mymaily.lol\",\r\n            \"firstName\": \"Test Shakil\",\r\n            \"phone\": \"8801224313461\",\r\n            \"id\": \"272773\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-07-22T06:30:14.762Z\",\r\n            \"updatedAt\": \"2023-07-22T06:31:17.633Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"Test Shakil Ahmed\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": true,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"Unleash\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64bb42f875b2f10019a83676\",\r\n            \"email\": \"legade4721@miqlab.com\",\r\n            \"firstName\": \"Kazi\",\r\n            \"phone\": \"8801190496875\",\r\n            \"id\": \"833094\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-07-22T02:46:16.562Z\",\r\n            \"updatedAt\": \"2023-07-22T11:14:49.139Z\",\r\n            \"__v\": 0,\r\n            \"lastActive\": \"2023-07-22T11:14:49.139Z\",\r\n            \"fullName\": \"Kazi Unleash\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"Next\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64b93a2975b2f10019a8325e\",\r\n            \"email\": \"winyzyny@socam.me\",\r\n            \"firstName\": \"Shakil\",\r\n            \"phone\": \"8801445269156\",\r\n            \"id\": \"352984\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-07-20T13:44:09.962Z\",\r\n            \"updatedAt\": \"2023-07-20T13:44:09.962Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"Shakil Next\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": true,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"Goni\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64b8b62775b2f10019a8276e\",\r\n            \"email\": \"wixiqu@socam.me\",\r\n            \"firstName\": \"Osman\",\r\n            \"phone\": \"8801543751641\",\r\n            \"id\": \"063163\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-07-20T04:20:55.762Z\",\r\n            \"updatedAt\": \"2023-07-20T04:26:15.961Z\",\r\n            \"__v\": 0,\r\n            \"lastActive\": \"2023-07-20T04:26:15.960Z\",\r\n            \"fullName\": \"Osman Goni\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": true,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"1111\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64b6378d75b2f10019a810eb\",\r\n            \"email\": \"betib44104@rc3s.com\",\r\n            \"firstName\": \"Test\",\r\n            \"phone\": \"14514542165\",\r\n            \"id\": \"853655\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-07-18T06:56:13.062Z\",\r\n            \"updatedAt\": \"2023-07-18T07:18:11.344Z\",\r\n            \"__v\": 0,\r\n            \"lastActive\": \"2023-07-18T07:18:11.342Z\",\r\n            \"fullName\": \"Test 1111\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"fg\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64b6304675b2f10019a81028\",\r\n            \"email\": \"pinak22512@semonir.com\",\r\n            \"firstName\": \"g\",\r\n            \"phone\": \"15278627852\",\r\n            \"id\": \"649115\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-07-18T06:25:10.564Z\",\r\n            \"updatedAt\": \"2023-07-18T06:25:10.564Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"g fg\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"65655\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64b62f2875b2f10019a8101c\",\r\n            \"email\": \"voyid29022@sparkroi.com\",\r\n            \"firstName\": \"test\",\r\n            \"phone\": \"15659269565\",\r\n            \"id\": \"341145\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-07-18T06:20:24.458Z\",\r\n            \"updatedAt\": \"2023-07-18T06:20:24.458Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"test 65655\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"665\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64b62e6475b2f10019a8100b\",\r\n            \"email\": \"tihobo4236@semonir.com\",\r\n            \"firstName\": \"Test\",\r\n            \"phone\": \"16566232565\",\r\n            \"id\": \"512244\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-07-18T06:17:08.063Z\",\r\n            \"updatedAt\": \"2023-07-18T06:17:08.063Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"Test 665\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": true,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"55\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64b62d7e75b2f10019a80fdf\",\r\n            \"email\": \"nihaceb939@rc3s.com\",\r\n            \"firstName\": \"test1254\",\r\n            \"phone\": \"15626563265\",\r\n            \"id\": \"661093\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-07-18T06:13:18.261Z\",\r\n            \"updatedAt\": \"2023-07-18T06:27:44.123Z\",\r\n            \"__v\": 0,\r\n            \"lastActive\": \"2023-07-18T06:27:44.123Z\",\r\n            \"fullName\": \"test1254 55\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"321\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64b62c1875b2f10019a80fb4\",\r\n            \"email\": \"pamege8488@sparkroi.com\",\r\n            \"firstName\": \"Test\",\r\n            \"phone\": \"1856565252\",\r\n            \"id\": \"153616\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-07-18T06:07:20.459Z\",\r\n            \"updatedAt\": \"2023-07-18T06:07:20.459Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"Test 321\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"123\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64b62b4a75b2f10019a80fa0\",\r\n            \"email\": \"racodi1109@sparkroi.com\",\r\n            \"firstName\": \"Test\",\r\n            \"phone\": \"15652659652\",\r\n            \"id\": \"127764\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-07-18T06:03:54.385Z\",\r\n            \"updatedAt\": \"2023-07-18T06:03:54.385Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"Test 123\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"Das\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64b629f275b2f10019a80f56\",\r\n            \"email\": \"cageb82269@ridteam.com\",\r\n            \"firstName\": \"test\",\r\n            \"phone\": \"15632516563\",\r\n            \"id\": \"450809\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-07-18T05:58:10.188Z\",\r\n            \"updatedAt\": \"2023-07-18T05:58:10.188Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"test Das\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"Test\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64b6295375b2f10019a80f46\",\r\n            \"email\": \"yexobog941@ridteam.com\",\r\n            \"firstName\": \"Mitul\",\r\n            \"phone\": \"16569563526\",\r\n            \"id\": \"651275\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-07-18T05:55:31.757Z\",\r\n            \"updatedAt\": \"2023-07-18T05:55:31.757Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"Mitul Test\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"test\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64b627ee75b2f10019a80f15\",\r\n            \"email\": \"xelig56202@ridteam.com\",\r\n            \"firstName\": \"Test\",\r\n            \"phone\": \"19785656956\",\r\n            \"id\": \"549986\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-07-18T05:49:34.263Z\",\r\n            \"updatedAt\": \"2023-07-18T05:49:34.263Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"Test test\"\r\n        },\r\n        {\r\n            \"isEmailVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"isPhoneVerified\": {\r\n                \"status\": false,\r\n                \"token\": \"\"\r\n            },\r\n            \"chatPermissions\": {\r\n                \"isSuspended\": false,\r\n                \"canJoinChat\": true,\r\n                \"canInitiateChat\": true,\r\n                \"canCreateChannel\": true,\r\n                \"canReadMessage\": true,\r\n                \"canSendMessage\": true\r\n            },\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"name\",\r\n            \"isApproved\": false,\r\n            \"type\": \"marketing\",\r\n            \"password_reset_token\": \"\",\r\n            \"role\": \"user\",\r\n            \"expoTokens\": [],\r\n            \"readingLists\": [],\r\n            \"isLockExcluded\": false,\r\n            \"_id\": \"64b6276e75b2f10019a80ef6\",\r\n            \"email\": \"yevome5538@sparkroi.com\",\r\n            \"firstName\": \"Test\",\r\n            \"phone\": \"11325321316\",\r\n            \"id\": \"460420\",\r\n            \"clientIdentifierIds\": [],\r\n            \"createdAt\": \"2023-07-18T05:47:26.682Z\",\r\n            \"updatedAt\": \"2023-07-18T05:47:26.682Z\",\r\n            \"__v\": 0,\r\n            \"fullName\": \"Test name\"\r\n        }\r\n    ],\r\n    \"count\": 299,\r\n    \"registeredInquiries\": [\r\n        \"15626563265\",\r\n        \"15632516563\",\r\n        \"16566232565\",\r\n        \"16569563526\",\r\n        \"19785656956\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/students/marketing",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"students",
												"marketing"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Inactive Members",
					"item": [
						{
							"name": "(FAIL)Block Members",
							"item": [
								{
									"name": "Admin should be able to block the members",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin blocked the members successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin blocked the members within 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"pm.test(\"users key matched\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
													"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/students/inactive",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"students",
												"inactive"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Approved members",
							"item": [
								{
									"name": "Admin should able to approved the candidates applications",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin approved the candidates applications successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin approved the candidates applications within 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"pm.test(\"users key matched\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
													"     pm.expect(pm.response.text()).to.include(\"lastName\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"personalInformation\": {\r\n        \"firstName\": \"rewr\",\r\n        \"lastName\": \"serwe\",\r\n        \"middleName\": \"ewr\",\r\n        \"otherName\": \"werwer\",\r\n        \"dob\": \"'2003-01-01T08:51:10Z'\",\r\n        \"gender\": \"male\",\r\n        \"ssn\": \"\"\r\n    },\r\n    \"instantContact\": {\r\n        \"phone\": \"(345) 345-3453\",\r\n        \"whatsApp\": \"(435) 345-345\",\r\n        \"outlook\": \"\",\r\n        \"address1\": \"345345345345\",\r\n        \"address2\": \"\",\r\n        \"city\": \"345345\",\r\n        \"state\": \"Colorado\",\r\n        \"zip\": \"34534\"\r\n    },\r\n    \"secondaryContact\": {\r\n        \"fullName\": \"345\",\r\n        \"address1\": \"34534\",\r\n        \"address2\": \"\",\r\n        \"city\": \"346346\",\r\n        \"state\": \"Alaska\",\r\n        \"zip\": \"346346\",\r\n        \"phone\": \"(436) 346-3453\"\r\n    },\r\n    \"education\": {\r\n        \"education\": \"ged\",\r\n        \"majorProgram\": \"\",\r\n        \"occupation\": \"346\",\r\n        \"companyName\": \"\",\r\n        \"experience\": \"\",\r\n        \"languageProficiency\": \"intermediate\"\r\n    },\r\n    \"payment\": {\r\n        \"method\": \"cash\",\r\n        \"bankName\": \"\",\r\n        \"acountType\": \"\",\r\n        \"acountNumber\": \"\",\r\n        \"routingNumber\": \"\"\r\n    },\r\n    \"additionalInfo\": {\r\n        \"isVeteran\": true,\r\n        \"isFelenoy\": true,\r\n        \"hasDrivingLicense\": true,\r\n        \"hasCreditCard\": true,\r\n        \"hasDegree\": true,\r\n        \"hasAssociateDegree\": true,\r\n        \"isAuthorizeUSA\": true,\r\n        \"hasCompunerKnowledge\": true,\r\n        \"hasBasicInternetSkill\": true,\r\n        \"hasEnglishWritingSkill\": true,\r\n        \"hasSlack\": true,\r\n        \"isJoinedSlack\": true,\r\n        \"hasZoom\": true,\r\n        \"isAvailableWorkshop\": true,\r\n        \"isRefer\": false,\r\n        \"referName\": \"\"\r\n    },\r\n    \"document\": {\r\n        \"remark\": \"\",\r\n        \"idCard\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1668776910715-321733.3.jpg\",\r\n        \"signature\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1668776914475-blob\",\r\n        \"check\": \"\",\r\n        \"otherDocument\": \"\",\r\n        \"isAgreedToPush\": true\r\n    },\r\n    \"totalAmount\": 0,\r\n    \"program\": \"611136a8c4ea52404a295b06\",\r\n    \"session\": \"611287afd6508fb6449022ab\",\r\n    \"plan\": \"629a774fbfad3e561cf3ba04\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/students/approve/637783d977b3a339d0619ffa",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"students",
												"approve",
												"637783d977b3a339d0619ffa"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "LeaderBoard",
					"item": [
						{
							"name": "My Progress",
							"item": [
								{
									"name": "(FAIL)User Should be able to see their own progress",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User see the own progress successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User see the own progress  within 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"pm.test(\"results key matched\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"     pm.expect(pm.response.text()).to.include(\"results\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl_user}}/api/progress/myprogress/other",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"progress",
												"myprogress",
												"other"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Invoice Ts4u",
					"item": [
						{
							"name": "Search name/email/All invoice",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should be able to search the user by searching the name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin searched the user by searching the name successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin searched the user by searching the name within 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"query\": \"asdasf\",\r\n    \"program\": \"\",\r\n    \"session\": \"\",\r\n    \"limit\": 50\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/invoice/allinvoices/TS4U",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"invoice",
														"allinvoices",
														"TS4U"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin shouldn't be able to search the user by searching the name without tokan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"HR should get the '400' status code when executing to invoice without inputting the title\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"HR should get the response below 2000 ms when executing to invoice without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"HR should get the 'Bad Request' status code name when executing to invoice without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"HR should get the 'Authorization required' message when executing to invoice without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create a invoice without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"query\": \"asdasf\",\r\n    \"program\": \"\",\r\n    \"session\": \"\",\r\n    \"limit\": 50\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/invoice/allinvoices/TS4U",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"invoice",
														"allinvoices",
														"TS4U"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "View  user's payment receipt",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin can able to search the user by searching the name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/invoice/getuserdata/62363b4bc2f8360a2426a68a?invoice={{Invoice Create ID}}&account=TS4U",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"invoice",
														"getuserdata",
														"62363b4bc2f8360a2426a68a"
													],
													"query": [
														{
															"key": "invoice",
															"value": "{{Invoice Create ID}}"
														},
														{
															"key": "account",
															"value": "TS4U"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin shouldn't be able to search the user by searching the name without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Content writer should get the '400' status code when executing to invoice without inputting the title\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Content writer should get the response below 2000 ms when executing to invoice without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to invoice without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Content writer should get the 'Authorization required' message when executing to invoice without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create a invoice without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/invoice/getuserdata/62363b4bc2f8360a2426a68a?invoice={{Invoice Create ID}}&account=TS4U",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"invoice",
														"getuserdata",
														"62363b4bc2f8360a2426a68a"
													],
													"query": [
														{
															"key": "invoice",
															"value": "{{Invoice Create ID}}"
														},
														{
															"key": "account",
															"value": "TS4U"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Edit the user's payment slip",
							"item": [
								{
									"name": "(FAIL)Admin should able to search the user by searching the name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful PATCH request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Test1122\",\r\n    \"address\": \"Aftabnagar\",\r\n    \"phone\": \"01723456789\",\r\n    \"tax\": 6,\r\n    \"user\": \"62363b4bc2f8360a2426a68a\",\r\n    \"courses\": [\r\n        {\r\n            \"price\": 0,\r\n            \"_id\": \"632f53ed2fbf4b3c6c5cda9a\",\r\n            \"title\": \"SQA\",\r\n            \"session\": \"20\"\r\n        }\r\n    ],\r\n    \"payments\": [\r\n        {\r\n            \"date\": 1688531993341,\r\n            \"description\": \"20\",\r\n            \"method\": \"20\",\r\n            \"amount\": \"20\"\r\n        }\r\n    ],\r\n    \"loan\": {\r\n        \"received\": 0,\r\n        \"approved\": 0\r\n    },\r\n    \"account\": \"TS4U\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/invoice/getuserdata/62363b4bc2f8360a2426a69a?invoice={{Invoice Create ID}}&account=TS4U",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"invoice",
												"getuserdata",
												"62363b4bc2f8360a2426a69a"
											],
											"query": [
												{
													"key": "invoice",
													"value": "{{Invoice Create ID}}"
												},
												{
													"key": "account",
													"value": "TS4U"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invoice email send",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin can able send the invoice message of the students",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"html\": \"\\n        <div class=\\\"invoice_wrapper\\\">\\n                    <div class=\\\"top\\\">\\n                        <img src=\\\"https://ts4u.us/logo.png\\\" alt=\\\"\\\" />\\n                    </div>\\n                    <div class=\\\"content\\\">\\n                        <h2 class=\\\"page_title\\\">Invoice and Payment Receipt</h2>\\n\\n                        <div class=\\\"address_info\\\">\\n                            <h2 class=\\\"date\\\">\\n                                Date: 07/05/2023\\n\\n                            </h2>\\n\\n\\n                            <table class='addres_table'>\\n                                <tr>\\n                                    <th>Paid to</th>\\n                                    <th>Paid by</th>\\n                                </tr>\\n\\n                                <tr>\\n                                    <td>\\n                                        <p>TS4U</p>\\n                                        <p>Address: 28751 Ryan Road\\n                                            Warren MI 48092</p>\\n                                        <p>Phone: 586-276-7347</p>\\n                                        <p>Email: payment@techserve4u.com</p>\\n                                    </td>\\n\\n                                    <td>\\n                                        <p>Student Name: Israk Zahan Monisha1122</p>\\n                                        <p>Address: Mi, , MI, Indiana, 49971</p>\\n                                        <p>Phone: 12025550120</p>\\n                                    </td>\\n                                </tr>\\n\\n\\n                            </table>\\n                        </div>\\n\\n                        <div class='course_price'>\\n                            <table class=\\\"price_table\\\">\\n                                <tr>\\n                                    <th>Course name</th>\\n                                    <th>Session</th>\\n                                    <th>Fees</th>\\n                                </tr>\\n                                \\n                                       <tr key=0>\\n                                       <td>CloudOps Engineer</td>\\n                                       <td>Winter 2021- DevOps Engineer</td>\\n                                       <td>$5000</td>\\n\\n                                   </tr>\\n                                       \\n\\n                                <tr>\\n                                    <td colspan=\\\"2\\\">Subtotal</td>\\n                                    <td>$5000.00</td>\\n                                </tr>\\n                                <tr>\\n                                    <td colspan=\\\"2\\\">Michigan State Sales Tax: 6%</td>\\n                                    <td >$300.00</td>\\n                                </tr>\\n                                <tr>\\n                                    <td colspan=\\\"2\\\">Total</td>\\n                                    <td class='red_text'>$5300.00</td>\\n                                </tr>\\n                            </table>\\n                        </div>\\n\\n\\n                        <div class=\\\"details_info\\\">\\n                            <table class='details_table'>\\n                                <tr>\\n                                    <th>Date</th>\\n                                    <th>Description</th>\\n                                    <th>Payment method</th>\\n                                    <th>Paid amount</th>\\n\\n                                </tr>\\n\\n                                \\n                                        <tr key=0>\\n                                            <td>07/05/2023</td>\\n                                            <td></td>\\n                                            <td></td>\\n                                            <td>$19</td>\\n\\n                                        </tr>\\n                                        \\n                                <tr>\\n                                    <td colspan=\\\"3\\\">Total paid</td>\\n                                    <td >$19</td>\\n                                </tr>\\n\\n                                \\n                                <tr>\\n                                    <td colspan=\\\"3\\\">Total Amount Due</td>\\n                                    <td class='red_text'>\\n                                    $5282\\n                                    </td>\\n                                   \\n                                </tr>\\n                            </table>\\n                        </div>\\n\\n                        <div class=\\\"note\\\">\\n                            <strong>Note:</strong> No sales tax is collected when a student is paid cash, Zelle, or checks, only Online payment through\\n                            square charges the sales tax. This is an Online automated generated version, so a signature is not\\n                            required when sending a digital copy.\\n\\n                        </div>\\n                        <div class=\\\"divider\\\"></div>\\n                        <div class=\\\"note\\\">\\n                            <strong>Disclaimer:</strong> This is a payment receipt for a student that has taken courses, or services from the TS4U. For\\n                            any discrepancy, please send email to payment@techserve4u.com. For any due balances, TS4U’s partner\\n                            company will work with you to resolve the matter.\\n                        </div>\\n                    </div>\\n                </div>\\n        \",\r\n    \"emails\": [\r\n        \"payment@techserve4u.com\",\r\n        \"israkzahan21@gmail.com\"\r\n    ],\r\n    \"invoice\": \"64a506d2a2b16b0021015e0c\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/invoice/sendemail",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"invoice",
														"sendemail"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin shouldn't be able send the invoice message of the students without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Content writer should get the '400' status code when executing to invoice without inputting the title\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Content writer should get the response below 2000 ms when executing to invoice without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to invoice without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Content writer should get the 'Authorization required' message when executing to invoice without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create a invoice without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"html\": \"\\n        <div class=\\\"invoice_wrapper\\\">\\n                    <div class=\\\"top\\\">\\n                        <img src=\\\"https://ts4u.us/logo.png\\\" alt=\\\"\\\" />\\n                    </div>\\n                    <div class=\\\"content\\\">\\n                        <h2 class=\\\"page_title\\\">Invoice and Payment Receipt</h2>\\n\\n                        <div class=\\\"address_info\\\">\\n                            <h2 class=\\\"date\\\">\\n                                Date: 07/05/2023\\n\\n                            </h2>\\n\\n\\n                            <table class='addres_table'>\\n                                <tr>\\n                                    <th>Paid to</th>\\n                                    <th>Paid by</th>\\n                                </tr>\\n\\n                                <tr>\\n                                    <td>\\n                                        <p>TS4U</p>\\n                                        <p>Address: 28751 Ryan Road\\n                                            Warren MI 48092</p>\\n                                        <p>Phone: 586-276-7347</p>\\n                                        <p>Email: payment@techserve4u.com</p>\\n                                    </td>\\n\\n                                    <td>\\n                                        <p>Student Name: Israk Zahan Monisha1122</p>\\n                                        <p>Address: Mi, , MI, Indiana, 49971</p>\\n                                        <p>Phone: 12025550120</p>\\n                                    </td>\\n                                </tr>\\n\\n\\n                            </table>\\n                        </div>\\n\\n                        <div class='course_price'>\\n                            <table class=\\\"price_table\\\">\\n                                <tr>\\n                                    <th>Course name</th>\\n                                    <th>Session</th>\\n                                    <th>Fees</th>\\n                                </tr>\\n                                \\n                                       <tr key=0>\\n                                       <td>CloudOps Engineer</td>\\n                                       <td>Winter 2021- DevOps Engineer</td>\\n                                       <td>$5000</td>\\n\\n                                   </tr>\\n                                       \\n\\n                                <tr>\\n                                    <td colspan=\\\"2\\\">Subtotal</td>\\n                                    <td>$5000.00</td>\\n                                </tr>\\n                                <tr>\\n                                    <td colspan=\\\"2\\\">Michigan State Sales Tax: 6%</td>\\n                                    <td >$300.00</td>\\n                                </tr>\\n                                <tr>\\n                                    <td colspan=\\\"2\\\">Total</td>\\n                                    <td class='red_text'>$5300.00</td>\\n                                </tr>\\n                            </table>\\n                        </div>\\n\\n\\n                        <div class=\\\"details_info\\\">\\n                            <table class='details_table'>\\n                                <tr>\\n                                    <th>Date</th>\\n                                    <th>Description</th>\\n                                    <th>Payment method</th>\\n                                    <th>Paid amount</th>\\n\\n                                </tr>\\n\\n                                \\n                                        <tr key=0>\\n                                            <td>07/05/2023</td>\\n                                            <td></td>\\n                                            <td></td>\\n                                            <td>$19</td>\\n\\n                                        </tr>\\n                                        \\n                                <tr>\\n                                    <td colspan=\\\"3\\\">Total paid</td>\\n                                    <td >$19</td>\\n                                </tr>\\n\\n                                \\n                                <tr>\\n                                    <td colspan=\\\"3\\\">Total Amount Due</td>\\n                                    <td class='red_text'>\\n                                    $5282\\n                                    </td>\\n                                   \\n                                </tr>\\n                            </table>\\n                        </div>\\n\\n                        <div class=\\\"note\\\">\\n                            <strong>Note:</strong> No sales tax is collected when a student is paid cash, Zelle, or checks, only Online payment through\\n                            square charges the sales tax. This is an Online automated generated version, so a signature is not\\n                            required when sending a digital copy.\\n\\n                        </div>\\n                        <div class=\\\"divider\\\"></div>\\n                        <div class=\\\"note\\\">\\n                            <strong>Disclaimer:</strong> This is a payment receipt for a student that has taken courses, or services from the TS4U. For\\n                            any discrepancy, please send email to payment@techserve4u.com. For any due balances, TS4U’s partner\\n                            company will work with you to resolve the matter.\\n                        </div>\\n                    </div>\\n                </div>\\n        \",\r\n    \"emails\": [\r\n        \"payment@techserve4u.com\",\r\n        \"israkzahan21@gmail.com\"\r\n    ],\r\n    \"invoice\": \"64a506d2a2b16b0021015e0c\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/invoice/sendemail",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"invoice",
														"sendemail"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "(Fail)Filter User on TS4u",
							"item": [
								{
									"name": "Admin can able to find the student by add new button clicking",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"program\": \"\",\r\n    \"session\": \"\",\r\n    \"query\": \"Mitul Das\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/settings/filter-user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"settings",
												"filter-user"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete invoice",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin can able to delete the students informations",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful DELETE request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\r\n    \"payment@techserve4u.com\",\r\n    \"pes.shimul@gmail.com\"\r\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/invoice/delete/{{Invoice Create ID}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"invoice",
														"delete",
														"{{Invoice Create ID}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin shouldn't able to delete the students informations without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"HR should get the '400' status code when delete invoice without inputting the title\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"HR should get the response below 2000 ms when delete invoice without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"HR should get the 'Bad Request' status code name when delete invoice without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"HR should get the 'Authorization required' message when delete invoice without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to delete invoice without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\r\n    \"payment@techserve4u.com\",\r\n    \"pes.shimul@gmail.com\"\r\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/invoice/delete/{{Invoice Create ID}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"invoice",
														"delete",
														"{{Invoice Create ID}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Invoice Ts4u BD",
					"item": [
						{
							"name": "Invoice form create",
							"item": [
								{
									"name": "User can create the payment form",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"Invoice TS4U bd Create id\", jsonData.invoice._id);\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Israk Monisha\",\r\n    \"address\": \"Mi, , MI, Indiana, 49971\",\r\n    \"phone\": \"12025550120\",\r\n    \"tax\": 6,\r\n    \"user\": \"648fbeba37a20c00197f0f01\",\r\n    \"courses\": [\r\n        {\r\n            \"title\": \"CloudOps Engineer\",\r\n            \"price\": 5000,\r\n            \"session\": \"Winter 2021- DevOps Engineer\"\r\n        }\r\n    ],\r\n    \"payments\": [],\r\n    \"loan\": {\r\n        \"approved\": 0,\r\n        \"received\": 0\r\n    },\r\n    \"account\": \"TS4U\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/invoice/create",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"invoice",
												"create"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edit invoice form",
							"item": [
								{
									"name": "User can able to edit the form information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful PATCH request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Israk Zahan Monisha1122\",\r\n    \"address\": [\r\n        \"Mi, , MI, Indiana, 49971\"\r\n    ],\r\n    \"phone\": \"12025550120\",\r\n    \"tax\": 6,\r\n    \"user\": \"648fbeba37a20c00197f0f01\",\r\n    \"courses\": [\r\n        {\r\n            \"price\": 5000,\r\n            \"_id\": \"64a506d2a2b16b0021015e0d\",\r\n            \"title\": \"CloudOps Engineer\",\r\n            \"session\": \"Winter 2021- DevOps Engineer\"\r\n        }\r\n    ],\r\n    \"payments\": [\r\n        {\r\n            \"date\": 1688537267484,\r\n            \"description\": \"\",\r\n            \"method\": \"\",\r\n            \"amount\": \"19\"\r\n        }\r\n    ],\r\n    \"loan\": {\r\n        \"received\": 0,\r\n        \"approved\": \"-1\"\r\n    },\r\n    \"account\": \"TS4U\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/invoice/edit/{{Invoice TS4U bd Create id}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"invoice",
												"edit",
												"{{Invoice TS4U bd Create id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "View  user's payment receipt",
							"item": [
								{
									"name": "Admin can able to search the user by searching the name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/invoice/getuserdata/{{Invoice TS4U bd Create id}}?invoice={{Invoice Create ID}}&account=TS4U",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"invoice",
												"getuserdata",
												"{{Invoice TS4U bd Create id}}"
											],
											"query": [
												{
													"key": "invoice",
													"value": "{{Invoice Create ID}}"
												},
												{
													"key": "account",
													"value": "TS4U"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edit the user's payment slip",
							"item": [
								{
									"name": "(FAIL)Admin can able to search the user by searching the name",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Test1122\",\r\n    \"address\": \"Aftabnagar\",\r\n    \"phone\": \"01723456789\",\r\n    \"tax\": 6,\r\n    \"user\": \"62363b4bc2f8360a2426a68a\",\r\n    \"courses\": [\r\n        {\r\n            \"price\": 0,\r\n            \"_id\": \"632f53ed2fbf4b3c6c5cda9a\",\r\n            \"title\": \"SQA\",\r\n            \"session\": \"20\"\r\n        }\r\n    ],\r\n    \"payments\": [\r\n        {\r\n            \"date\": 1688531993341,\r\n            \"description\": \"20\",\r\n            \"method\": \"20\",\r\n            \"amount\": \"20\"\r\n        }\r\n    ],\r\n    \"loan\": {\r\n        \"received\": 0,\r\n        \"approved\": 0\r\n    },\r\n    \"account\": \"TS4U\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/invoice/getuserdata/62363b4bc2f8360a2426a68a?invoice=632f53ed2fbf4b3c6c5cda99&account=TS4U",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"invoice",
												"getuserdata",
												"62363b4bc2f8360a2426a68a"
											],
											"query": [
												{
													"key": "invoice",
													"value": "632f53ed2fbf4b3c6c5cda99"
												},
												{
													"key": "account",
													"value": "TS4U"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invoice email send",
							"item": [
								{
									"name": "Admin can able send the invoice message of the students",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"html\": \"\\n        <div class=\\\"invoice_wrapper\\\">\\n                    <div class=\\\"top\\\">\\n                        <img src=\\\"https://ts4u.us/logo.png\\\" alt=\\\"\\\" />\\n                    </div>\\n                    <div class=\\\"content\\\">\\n                        <h2 class=\\\"page_title\\\">Invoice and Payment Receipt</h2>\\n\\n                        <div class=\\\"address_info\\\">\\n                            <h2 class=\\\"date\\\">\\n                                Date: 07/05/2023\\n\\n                            </h2>\\n\\n\\n                            <table class='addres_table'>\\n                                <tr>\\n                                    <th>Paid to</th>\\n                                    <th>Paid by</th>\\n                                </tr>\\n\\n                                <tr>\\n                                    <td>\\n                                        <p>TS4U</p>\\n                                        <p>Address: 9143, Plot 2, Baunia Bazar, Uttara, Dhaka-1230</p>\\n                                        <p>Phone: +880 16-1117-1308</p>\\n                                        <p>Email: payment@techserve4u.com</p>\\n                                    </td>\\n\\n                                    <td>\\n                                        <p>Name: Israk Monisha</p>\\n                                        <p>Address: Aftabnagar</p>\\n                                        <p>Phone: 01723456789</p>\\n                                    </td>\\n                                </tr>\\n\\n\\n                            </table>\\n                        </div>\\n\\n                        <div class='course_price'>\\n                            <table class=\\\"price_table\\\">\\n                                <tr>\\n                                    <th>Courses / Other fees</th>\\n                                    <th>Fees</th>\\n                                </tr>\\n                                \\n                                       <tr key=0>\\n                                       <td>CloudOps Engineer</td>\\n                                    \\n                                       <td>৳5000</td>\\n\\n                                   </tr>\\n                                       \\n\\n                                <tr>\\n                                    <td>Subtotal</td>\\n                                    <td>৳5000.00</td>\\n                                </tr>\\n                                <tr>\\n                                    <td>Tax: 6%</td>\\n                                    <td >৳300.00</td>\\n                                </tr>\\n                                <tr>\\n                                    <td>Total</td>\\n                                    <td class='red_text'>৳5300.00</td>\\n                                </tr>\\n                            </table>\\n                        </div>\\n\\n\\n                        <div class=\\\"details_info\\\">\\n                            <table class='details_table'>\\n                                <tr>\\n                                    <th>Date</th>\\n                                    <th>Description</th>\\n                                    <th>Payment method</th>\\n                                    <th>Paid amount</th>\\n\\n                                </tr>\\n\\n                                \\n                                <tr>\\n                                    <td colspan=\\\"3\\\">Total paid</td>\\n                                    <td >৳0</td>\\n                                </tr>\\n\\n                                \\n                                <tr>\\n                                    <td colspan=\\\"3\\\">Total Amount Due</td>\\n                                    <td class='red_text'>\\n                                    ৳5300\\n                                    </td>\\n                                   \\n                                </tr>\\n                            </table>\\n                        </div>\\n\\n                        <div class=\\\"note\\\">\\n                            <strong>Note:</strong> This is an Online automated generated version, so a signature is not\\n                            required when sending a digital copy.\\n\\n                        </div>\\n                        <div class=\\\"divider\\\"></div>\\n                        <div class=\\\"note\\\">\\n                            <strong>Disclaimer:</strong> This is a payment receipt for a student that has taken courses, or services from the TS4U. For\\n                            any discrepancy, please send email to payment@techserve4u.com. For any due balances, TS4U’s partner\\n                            company will work with you to resolve the matter.\\n                        </div>\\n                    </div>\\n                </div>\\n        \",\r\n    \"emails\": [\r\n        \"payment@techserve4u.com\",\r\n        \"israkzahan21@gmail.com\"\r\n    ],\r\n    \"invoice\": \"64a50ccba2b16b0021015e52\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/invoice/sendemail",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"invoice",
												"sendemail"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Filter User on TS4u",
							"item": [
								{
									"name": "Admin can able to find the student by add new button clicking",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"program\": \"\",\r\n    \"session\": \"\",\r\n    \"query\": \"israk zahan\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/settings/filter-user",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"settings",
												"filter-user"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete invoice",
							"item": [
								{
									"name": "Admin can able to delete the students informations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n    \"payment@techserve4u.com\",\r\n    \"pes.shimul@gmail.com\"\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/invoice/delete/{{Invoice TS4U bd Create id}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"invoice",
												"delete",
												"{{Invoice TS4U bd Create id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invoice Ts4u BD",
							"item": []
						}
					]
				},
				{
					"name": "Lock User",
					"item": [
						{
							"name": "Get users",
							"item": [
								{
									"name": "Admin can able to search the lock user's list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 30,\r\n    \"sort_by\": \"newest\",\r\n    \"query\": \"156579\",\r\n    \"isValid\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/lock/get-users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"lock",
												"get-users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "View locked members",
							"item": [
								{
									"name": "Admin can click the view new button",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"success\": true,\r\n    \"users\": [\r\n        {\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"shimul\",\r\n            \"_id\": \"62ab9deb8b42280a50e7ca65\",\r\n            \"email\": \"funnytom92@gmail.com\",\r\n            \"firstName\": \"sfsf\",\r\n            \"id\": \"184771\",\r\n            \"lastActive\": \"2022-07-26T07:17:21.462Z\",\r\n            \"fullName\": \"sfsf shimul\"\r\n        },\r\n        {\r\n            \"profilePicture\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/1631642364085-demo.jpg\",\r\n            \"lastName\": \"shimul\",\r\n            \"_id\": \"613f6b79c5af452db89feb7b\",\r\n            \"email\": \"shimul1866@gmail.com\",\r\n            \"id\": \"060188\",\r\n            \"lastActive\": \"2023-04-05T19:41:32.268Z\",\r\n            \"firstName\": \"md\",\r\n            \"fullName\": \"md shimul\"\r\n        },\r\n        {\r\n            \"profilePicture\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/1645464096091-Screenshot-2022\",\r\n            \"lastName\": \"Shimul\",\r\n            \"_id\": \"611151c15e58a9b155d8fc6b\",\r\n            \"email\": \"186mdshimul@gmail.com\",\r\n            \"id\": \"009486\",\r\n            \"lastActive\": \"2023-07-04T11:22:22.678Z\",\r\n            \"firstName\": \"Md\",\r\n            \"fullName\": \"Md Shimul\"\r\n        }\r\n    ],\r\n    \"count\": 3,\r\n    \"ids\": [\r\n        \"611151c15e58a9b155d8fc6b\",\r\n        \"613f6b79c5af452db89feb7b\",\r\n        \"62ab9deb8b42280a50e7ca65\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/lock/get-users/excluded",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"lock",
												"get-users",
												"excluded"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Unlocked the members",
							"item": [
								{
									"name": "Admin can able to unlock the members",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"success\": true,\r\n    \"users\": [\r\n        {\r\n            \"profilePicture\": \"\",\r\n            \"lastName\": \"shimul\",\r\n            \"_id\": \"62ab9deb8b42280a50e7ca65\",\r\n            \"email\": \"funnytom92@gmail.com\",\r\n            \"firstName\": \"sfsf\",\r\n            \"id\": \"184771\",\r\n            \"lastActive\": \"2022-07-26T07:17:21.462Z\",\r\n            \"fullName\": \"sfsf shimul\"\r\n        },\r\n        {\r\n            \"profilePicture\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/1631642364085-demo.jpg\",\r\n            \"lastName\": \"shimul\",\r\n            \"_id\": \"613f6b79c5af452db89feb7b\",\r\n            \"email\": \"shimul1866@gmail.com\",\r\n            \"id\": \"060188\",\r\n            \"lastActive\": \"2023-04-05T19:41:32.268Z\",\r\n            \"firstName\": \"md\",\r\n            \"fullName\": \"md shimul\"\r\n        },\r\n        {\r\n            \"profilePicture\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/1645464096091-Screenshot-2022\",\r\n            \"lastName\": \"Shimul\",\r\n            \"_id\": \"611151c15e58a9b155d8fc6b\",\r\n            \"email\": \"186mdshimul@gmail.com\",\r\n            \"id\": \"009486\",\r\n            \"lastActive\": \"2023-07-04T11:22:22.678Z\",\r\n            \"firstName\": \"Md\",\r\n            \"fullName\": \"Md Shimul\"\r\n        }\r\n    ],\r\n    \"count\": 3,\r\n    \"ids\": [\r\n        \"611151c15e58a9b155d8fc6b\",\r\n        \"613f6b79c5af452db89feb7b\",\r\n        \"62ab9deb8b42280a50e7ca65\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/lock/unlock/613f6b79c5af452db89feb7b",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"lock",
												"unlock",
												"613f6b79c5af452db89feb7b"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Unlock the lock members",
							"item": [
								{
									"name": "Admin can able to unlock the members",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"isLockExcluded\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/lock/exclude/611151c15e58a9b155d8fc6b",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"lock",
												"exclude",
												"611151c15e58a9b155d8fc6b"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Whatsapp Chat",
					"item": [
						{
							"name": "Chat",
							"item": [
								{
									"name": "User can able to send the message",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/api/text-chat/messages/641427ebf153721a64018485",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"text-chat",
												"messages",
												"641427ebf153721a64018485"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "View chat",
							"item": [
								{
									"name": "User can click the chat profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/api/text-chat/whatsapp/templates",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"text-chat",
												"whatsapp",
												"templates"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Send message on the chat",
							"item": [
								{
									"name": "User can be able to click the chat profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"text\": \"Test message\",\r\n    \"phone\": \"8801620473816\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/text-chat/whatsapp/send",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"text-chat",
												"whatsapp",
												"send"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ChatList",
							"item": [
								{
									"name": "Admin can be able to see my checkList",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/text-chat/sms/my-lists",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"text-chat",
												"sms",
												"my-lists"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get all chat",
							"item": [
								{
									"name": "Admin can able to get all the inquiry message list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/api/text-chat/sms/my-lists",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"text-chat",
												"sms",
												"my-lists"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Trash",
					"item": [
						{
							"name": "Restore",
							"item": [
								{
									"name": "Admin can be able to restore the information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful PATCH request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/enrollment/inquiry/log/restore/649fca837fae7e0020cc8e20",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"enrollment",
												"inquiry",
												"log",
												"restore",
												"649fca837fae7e0020cc8e20"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "Admin can be able to delete the inquiry log",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful DELETE request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/enrollment/inquiry/log/delete/648eaadbb8c0c911302d9b18",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"enrollment",
												"inquiry",
												"log",
												"delete",
												"648eaadbb8c0c911302d9b18"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "CheckList Form",
					"item": [
						{
							"name": "Checklist",
							"item": [
								{
									"name": "User can able to submit the checkList form",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Test1122\",\r\n    \"phone\": \"197845632\",\r\n    \"email\": \"israkzahan21@gmail.com\",\r\n    \"gender\": \"female\",\r\n    \"hearAbout\": \"facebook\",\r\n    \"hearAboutInput\": \"\",\r\n    \"eligibleToWork\": true,\r\n    \"eligibleToWorkInput\": \"\",\r\n    \"joinedTrial\": true,\r\n    \"hoursWeekly\": true,\r\n    \"currentCredit\": true,\r\n    \"defaulted\": false,\r\n    \"trialSupport\": false,\r\n    \"currentEducation\": \"school\",\r\n    \"howSoonToJoin\": \"lookingAndSearching\",\r\n    \"planToOverSeas\": false,\r\n    \"watchedWebinar\": true,\r\n    \"doneITCourse\": false,\r\n    \"completedITCourse\": \"\",\r\n    \"currentITSkill\": \"novice\",\r\n    \"currentITSkillInput\": \"\",\r\n    \"enrollDirectly\": true,\r\n    \"whereToGoGrant\": \"localMichinganWorks\",\r\n    \"workingSchedule\": \"firstShift\",\r\n    \"currentOccupation\": \"sales\",\r\n    \"currentOccupationInput\": \"\",\r\n    \"veteran\": true,\r\n    \"felenoy\": true,\r\n    \"driverLicense\": true,\r\n    \"basicComputer\": true,\r\n    \"availableOnWorkshop\": true,\r\n    \"ts4uApp\": true,\r\n    \"preferCommunication\": \"phoneCall\",\r\n    \"followUpDate\": \"2023/07/06\",\r\n    \"time\": \"2023-07-06T15:00:00.000Z\",\r\n    \"discussion\": \"<p>Hi</p>\",\r\n    \"followUp\": \"\",\r\n    \"actionItems\": \"\",\r\n    \"state\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/enrollment/inquiry/checklist/submit",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"enrollment",
												"inquiry",
												"checklist",
												"submit"
											]
										}
									},
									"response": []
								},
								{
									"name": "User can able to submit the checkList form Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful DELETE request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/api/enrollment/inquiry/checklist/getall",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"enrollment",
												"inquiry",
												"checklist",
												"getall"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Checklist Update Copy",
							"item": [
								{
									"name": "User can be able to update the checklist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful PATCH request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Test112233\",\r\n    \"phone\": \"197845632\",\r\n    \"email\": \"israkzahan21@gmail.com\",\r\n    \"gender\": \"female\",\r\n    \"hearAbout\": \"facebook\",\r\n    \"hearAboutInput\": \"\",\r\n    \"eligibleToWork\": true,\r\n    \"eligibleToWorkInput\": \"\",\r\n    \"joinedTrial\": true,\r\n    \"hoursWeekly\": true,\r\n    \"currentCredit\": true,\r\n    \"defaulted\": false,\r\n    \"trialSupport\": false,\r\n    \"currentEducation\": \"school\",\r\n    \"howSoonToJoin\": \"lookingAndSearching\",\r\n    \"planToOverSeas\": false,\r\n    \"watchedWebinar\": true,\r\n    \"doneITCourse\": false,\r\n    \"completedITCourse\": \"\",\r\n    \"currentITSkill\": \"novice\",\r\n    \"currentITSkillInput\": \"\",\r\n    \"enrollDirectly\": true,\r\n    \"whereToGoGrant\": \"localMichinganWorks\",\r\n    \"workingSchedule\": \"firstShift\",\r\n    \"currentOccupation\": \"sales\",\r\n    \"currentOccupationInput\": \"\",\r\n    \"veteran\": true,\r\n    \"felenoy\": true,\r\n    \"driverLicense\": true,\r\n    \"basicComputer\": true,\r\n    \"availableOnWorkshop\": true,\r\n    \"ts4uApp\": true,\r\n    \"preferCommunication\": \"phoneCall\",\r\n    \"followUpDate\": \"2023/07/06\",\r\n    \"time\": \"2023-07-06T15:00:00.000Z\",\r\n    \"discussion\": \"<p>Hi</p>\",\r\n    \"followUp\": \"\",\r\n    \"actionItems\": \"\",\r\n    \"state\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://staging-api.ts4u.us/api/enrollment/inquiry/checklist/edit/64a6635da2b16b00210162da",
											"protocol": "https",
											"host": [
												"staging-api",
												"ts4u",
												"us"
											],
											"path": [
												"api",
												"enrollment",
												"inquiry",
												"checklist",
												"edit",
												"64a6635da2b16b00210162da"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete Pre-enrollment CheckList",
							"item": [
								{
									"name": "Admin can able to delete the pre-enrollment checklist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Server is runnung\");\r",
													"});\r",
													"pm.test(\"Successful PATCH request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/enrollment/inquiry/checklist/edit/64cde2a335153c0020ceb6e4",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"enrollment",
												"inquiry",
												"checklist",
												"edit",
												"64cde2a335153c0020ceb6e4"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Enrollment inquires/All inquires",
					"item": [
						{
							"name": "SearchBar",
							"item": [
								{
									"name": "Admin can search the users name by using the id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 20,\r\n    \"program\": \"\",\r\n    \"query\": \"Md shimul\",\r\n    \"assignedTo\": \"\",\r\n    \"status\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/enrollment/inquiry/getall",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"enrollment",
												"inquiry",
												"getall"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Text Message",
							"item": [
								{
									"name": "(Fail)Admin can be able to send the text message",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"text\": \"hi\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/enrollment/inquiry/messages/send/64307d71ac7833827cf8cc31",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"enrollment",
												"inquiry",
												"messages",
												"send",
												"64307d71ac7833827cf8cc31"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin can be able to get the message",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"text\": \"hi\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/enrollment/inquiry/messages/64307d71ac7833827cf8cc31",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"enrollment",
												"inquiry",
												"messages",
												"64307d71ac7833827cf8cc31"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Export",
							"item": [
								{
									"name": "Admin can be able to export the inquires file",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/enrollment/inquiry/getall",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"enrollment",
												"inquiry",
												"getall"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Admin can be able to update the enrolment form information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful PATCH request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"assignedTo\": \"Md Joynal Abedin\",\r\n    \"status\": \"new\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/enrollment/inquiry/update/639e1ea0d4f4832d646d5cf8",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"enrollment",
												"inquiry",
												"update",
												"639e1ea0d4f4832d646d5cf8"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "WhatsApp Logs",
							"item": [
								{
									"name": "Message send",
									"item": [
										{
											"name": "As a admin, i can be able to send the message in whatsApp",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"text\": \"hi\",\r\n    \"phone\": \"whatsapp:+13139368294\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/enrollment/inquiry/whatsapp/messages/send",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"enrollment",
														"inquiry",
														"whatsapp",
														"messages",
														"send"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get All WhatsApp message List",
									"item": [
										{
											"name": "As a admin, i can be able to send the message in whatsApp",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 3000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful DELETE request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"text\": \"hi\",\r\n    \"phone\": \"whatsapp:+13139368294\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/enrollment/inquiry/whatsapp/messages",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"enrollment",
														"inquiry",
														"whatsapp",
														"messages"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get message by phone number",
									"item": [
										{
											"name": "Admin can be able to get message by phone number",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful DELETE request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/enrollment/inquiry/whatsapp/messages/whatsapp:+13476910280",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"enrollment",
														"inquiry",
														"whatsapp",
														"messages",
														"whatsapp:+13476910280"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "verify",
							"item": [
								{
									"name": "(FAIL)Admin can be able to verify on the inquiry board",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"phone\": \"12315492838\",\r\n    \"channel\": \"sms\",\r\n    \"captchaToken\": \"03AAYGu2QIGYvC_kMjkfJ1dwx38INTqqnPE6V9EnkGyX2b60fCtDjbRHVw5-keakwK92UoIbZ4rnoMRVmhDw0DCu56w7UXxGY0HQGKCs0ndtZL8R4--i3LAgjkJk_BL2Mz349wPfW1x7uy8xIGCl149cB4H2Msnm3AiRmnWvRPuctMyttX-w8fRfd7aVuWsOb7JaFTFGf2C6sWl7Cvq0etUoBd9JltnF9n9wslxT6-HlpJ61dmeipcDaRQXK02mKdyDDk9yjIPhlwoME9rVzd5l6TWjvewcnhpiYykyjYKju1GrChu7qZLcdbAXy4xVfi7eD5eZw8-HPSa-2JpyOCtgpkq6aDTkVGNTWZ2dXAuvJ7Dx6Pgu7VBZ9IXKEohDG9tF8b_z0fyY0lHkoz6F07xJjhzIolHkIHrd3Y8gyDC0Nk6qsbuN3c2a0sXMcdAtMR5FFAR6JPkYzhZ0Xe97B4uYY-SI2tI66sbhCDnulqgU04UHGKh_G91kHQR6tp4SrUGsLGuwzpVaw0sDV_5Ek1SvVfKCzWblrbBbRiq2YccVluIdP_389MHp_P0KGqfPEyt3ih3Um4Q1Eon\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/enrollment/inquiry/verify",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"enrollment",
												"inquiry",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "(FAIL)Admin can be able to check on the verification inquiry board",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"phone\": \"+18157809623\",\r\n    \"code\": \"419193\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/enrollment/inquiry/verification-check",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"enrollment",
												"inquiry",
												"verification-check"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create Discussion",
							"item": [
								{
									"name": "Admin can be able to create a discussion by clicking the Discussion Button",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"text\": \"test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/enrollment/inquiry/discussion/create/63d6d0dc8505fc4c98faa21d",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"enrollment",
												"inquiry",
												"discussion",
												"create",
												"63d6d0dc8505fc4c98faa21d"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Alerts",
							"item": [
								{
									"name": "Admin can be able to alerts on the inquiry board",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/enrollment/inquiry/alerts/63d6d0dc8505fc4c98faa21d",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"enrollment",
												"inquiry",
												"alerts",
												"63d6d0dc8505fc4c98faa21d"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Enrollment Test Questions",
					"item": [
						{
							"name": "Create the enrollment questions",
							"item": [
								{
									"name": "Admin can be able to create the enrollment questions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"question\": \"{{$randomJobTitle}}\",//every requrst need to change quetion title. \r\n    \"options\": [\r\n        {\r\n            \"option\": \"Yes\",\r\n            \"isCorrect\": false\r\n        },\r\n        {\r\n            \"option\": \"No\",\r\n            \"isCorrect\": false\r\n        }\r\n    ],\r\n    \"isActive\": true,\r\n    \"program\": [\r\n        \"61113628c4ea52404a295b03\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/enrollment-test/create",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"enrollment-test",
												"create"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get all the enrollment questions",
							"item": [
								{
									"name": "Admin can be able to get all the enrollment questions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"page\": 5,\r\n    \"limit\": 10,\r\n    \"sort_by\": \"newest\",\r\n    \"program\": \"\",\r\n    \"query\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/enrollment-test/getall",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"enrollment-test",
												"getall"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Test Users",
					"item": [
						{
							"name": "Update information",
							"item": [
								{
									"name": "As a user, I will be able to update my information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful PATCH request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"personalInformation\": {\r\n        \"firstName\": \"md\",\r\n        \"lastName\": \"shimul\",\r\n        \"middleName\": \"ew35345\",\r\n        \"otherName\": \"\",\r\n        \"dob\": \"'2003-01-01T08:51:10Z'\",\r\n        \"gender\": \"male\",\r\n        \"ssn\": \"\"\r\n    },\r\n    \"instantContact\": {\r\n        \"phone\": \"13223523523\",\r\n        \"whatsApp\": \"12352352352\",\r\n        \"outlook\": \"\",\r\n        \"address1\": \"99/6,Nasiruddin sardar len,Sutrapur, Dhaka\",\r\n        \"address2\": \"\",\r\n        \"city\": \"Dhaka\",\r\n        \"state\": \"California\",\r\n        \"zip\": \"457\"\r\n    },\r\n    \"secondaryContact\": {\r\n        \"fullName\": \"Md shimul\",\r\n        \"address1\": \"99/6,Nasiruddin sardar len,Sutrapur, Dhaka\",\r\n        \"address2\": \"\",\r\n        \"city\": \"Dhaka\",\r\n        \"state\": \"Alabama\",\r\n        \"zip\": \"457\",\r\n        \"phone\": \"(235) 235-2352\"\r\n    },\r\n    \"education\": {\r\n        \"education\": \"ged\",\r\n        \"majorProgram\": \"\",\r\n        \"occupation\": \"235235235235\",\r\n        \"companyName\": \"\",\r\n        \"experience\": \"\",\r\n        \"languageProficiency\": \"intermediate\"\r\n    },\r\n    \"payment\": {\r\n        \"method\": \"cash\",\r\n        \"bankName\": \"\",\r\n        \"acountType\": \"\",\r\n        \"acountNumber\": \"\",\r\n        \"routingNumber\": \"\"\r\n    },\r\n    \"additionalInfo\": {\r\n        \"isVeteran\": true,\r\n        \"isFelenoy\": true,\r\n        \"hasDrivingLicense\": true,\r\n        \"hasCreditCard\": true,\r\n        \"hasDegree\": true,\r\n        \"hasAssociateDegree\": true,\r\n        \"isAuthorizeUSA\": true,\r\n        \"hasCompunerKnowledge\": true,\r\n        \"hasBasicInternetSkill\": true,\r\n        \"hasEnglishWritingSkill\": true,\r\n        \"hasSlack\": true,\r\n        \"isJoinedSlack\": true,\r\n        \"hasZoom\": true,\r\n        \"isAvailableWorkshop\": true,\r\n        \"isRefer\": false,\r\n        \"referName\": \"\"\r\n    },\r\n    \"document\": {\r\n        \"remark\": \"\",\r\n        \"idCard\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1675591369118-1668457862732-noti.png\",\r\n        \"signature\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1675591372814-blob\",\r\n        \"check\": \"\",\r\n        \"otherDocument\": \"\",\r\n        \"isAgreedToPush\": false\r\n    },\r\n    \"totalAmount\": 1699,\r\n    \"plan\": \"629a66d080c4ff665817af68\",\r\n    \"program\": \"611136a8c4ea52404a295b06\",\r\n    \"session\": \"61113557c4ea52404a295afd\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/students/update/63df7ed3ca42ac55d872a528",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"students",
												"update",
												"63df7ed3ca42ac55d872a528"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edit the test-user's information",
							"item": [
								{
									"name": "As a Admin, I will be able to edit the test-user's information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"phone\": \"14534634635\",\r\n    \"isEmailVerified\": true,\r\n    \"isPhoneVerified\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/students/test-users/edit/6236fc675e16f48c172e039e",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"students",
												"test-users",
												"edit",
												"6236fc675e16f48c172e039e"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Remove the test-user",
							"item": [
								{
									"name": "As a Admin, I will be able to remove a test-user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"type\": \"marketing\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/students/test-users/remove/6236fc675e16f48c172e039e",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"students",
												"test-users",
												"remove",
												"6236fc675e16f48c172e039e"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bulk Upload",
							"item": [
								{
									"name": "User can be able to upload the file",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "UmU4eXHsz/assignment_bulk.csv"
												}
											]
										},
										"url": {
											"raw": "{{baseURL}}/api/students/bulkenroll",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"students",
												"bulkenroll"
											],
											"query": [
												{
													"key": "",
													"value": null,
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get test user list",
							"item": [
								{
									"name": "Admin can be able to see all the test user's name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/TS4U/Downloads/generatedBy_react-csv (9).csv"
												}
											]
										},
										"url": {
											"raw": "{{baseURL}}/api/students/test-users",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"students",
												"test-users"
											],
											"query": [
												{
													"key": "",
													"value": null,
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Bootcamp",
					"item": [
						{
							"name": "Enrollment",
							"item": [
								{
									"name": "As an admin, I should be able to add new student on bootcamp",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Server is runnung\");\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/enrollment/bootcamp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"enrollment",
												"bootcamp"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bootcamp Form",
							"item": [
								{
									"name": "As a student, I should be able to register on the bootcamp",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"HR can be see on the bellow 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"HR can be see on the response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"HR can be see all inportent links on the GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"success\": true,\r\n    \"results\": {\r\n        \"isEngineer\": true,\r\n        \"isOthersEducation\": false,\r\n        \"_id\": \"64af7ea5ec50e10020743f27\",\r\n        \"program\": {\r\n            \"_id\": \"611136a8c4ea52404a295b06\",\r\n            \"title\": \"CloudOps Engineer\"\r\n        },\r\n        \"linkdin\": \"\",\r\n        \"github\": \"\",\r\n        \"nid\": \"\",\r\n        \"gender\": \"male\",\r\n        \"educationQualification\": \"Mechanical_Engineering\",\r\n        \"completedBachelor\": true,\r\n        \"yearOfStudy\": \"\",\r\n        \"isOthersYearStudy\": false,\r\n        \"createdBy\": {\r\n            \"lastName\": \"Das\",\r\n            \"_id\": \"64883e7837a20c00197f0a33\",\r\n            \"email\": \"mitul.das@ts4u.us\",\r\n            \"firstName\": \"Mitul\",\r\n            \"phone\": \"01949338805\",\r\n            \"fullName\": \"Mitul Das\"\r\n        },\r\n        \"createdAt\": \"2023-07-13T04:33:41.004Z\",\r\n        \"updatedAt\": \"2023-07-13T04:33:41.004Z\",\r\n        \"__v\": 0\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/enrollment/bootcamp/my-form",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"enrollment",
												"bootcamp",
												"my-form"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete bootcamp",
							"item": [
								{
									"name": "As an admin, I should be able to delete on the bootcamp registration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Server is runnung\");\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"success\": true,\r\n    \"results\": {\r\n        \"isEngineer\": true,\r\n        \"isOthersEducation\": false,\r\n        \"_id\": \"64b93b73a8c62c002095872b\",\r\n        \"program\": \"613f5d9c15f9faf6934efa18\",\r\n        \"linkdin\": \"\",\r\n        \"github\": \"\",\r\n        \"nid\": \"\",\r\n        \"gender\": \"male\",\r\n        \"educationQualification\": \"Computer_Science_Engineering\",\r\n        \"completedBachelor\": true,\r\n        \"yearOfStudy\": \"\",\r\n        \"isOthersYearStudy\": false,\r\n        \"createdBy\": \"64b93b4875b2f10019a8327a\",\r\n        \"createdAt\": \"2023-07-20T13:49:39.517Z\",\r\n        \"updatedAt\": \"2023-07-20T13:49:39.517Z\",\r\n        \"__v\": 0\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/enrollment/bootcamp/delete-user/64b93b73a8c62c002095872b",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"enrollment",
												"bootcamp",
												"delete-user",
												"64b93b73a8c62c002095872b"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "HR & Accounting",
			"item": [
				{
					"name": "(Need to Discuss)Career Application",
					"item": [
						{
							"name": "Create Career Application Create/Submit",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "User should be able to submit the application for a job post",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"User submitted the application for a job post successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"User submitted the application within 2500 ms \", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"User should get the 'OK' status code name when executing to submit the application for a job post\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response headers\r",
															"\r",
															"pm.test(\"Validate the response header of the request to submit the application for a job post\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"value": "Iss",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "/C:/Users/TS4U/Downloads/rest_api.pdf"
														},
														{
															"key": "email",
															"value": "israkzahan21@gmail.com",
															"type": "text"
														},
														{
															"key": "phone",
															"value": "017534432558",
															"type": "text"
														},
														{
															"key": "experience",
															"value": "0.3",
															"type": "text"
														},
														{
															"key": "position",
															"value": "SQA Engineer",
															"type": "text"
														},
														{
															"key": "github",
															"value": "21",
															"type": "text"
														},
														{
															"key": "expectedSalary",
															"value": "2000000",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/career/submit",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"career",
														"submit"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "User should not be able to submit the application for a job post without uploading the CV",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to submit the application for a job post without uploading the CV\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to submit the application for a job post without uploading the CV\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to submit the application for a job post without uploading the CV\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'No resume is attached' message when executing to submit the application for a job post without uploading the CV\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"No resume is attached\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to submit the application for a job post without uploading the CV\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"value": "Iss",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "/C:/Users/TS4U/Downloads/rest_api.pdf",
															"disabled": true
														},
														{
															"key": "email",
															"value": "israkzahan21@gmail.com",
															"type": "text"
														},
														{
															"key": "phone",
															"value": "017534432558",
															"type": "text"
														},
														{
															"key": "experience",
															"value": "0.3",
															"type": "text"
														},
														{
															"key": "position",
															"value": "SQA Engineer",
															"type": "text"
														},
														{
															"key": "github",
															"value": "21",
															"type": "text"
														},
														{
															"key": "expectedSalary",
															"value": "2000000",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/career/submit",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"career",
														"submit"
													]
												}
											},
											"response": []
										},
										{
											"name": "User should not be able to submit the application for a job post without writing his/her name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to submit the application for a job post without writing his/her name\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2500 ms when executing to submit the application for a job post without writing his/her name\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to submit the application for a job post without writing his/her name\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Name, email, phone, position, experience is required' message when executing to submit the application for a job post without writing his/her name\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Name, email, phone, position, experience is required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to submit the application for a job post without writing his/her name\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"value": "Iss",
															"type": "text",
															"disabled": true
														},
														{
															"key": "file",
															"type": "file",
															"src": "KUefkkY0E/rest_api.pdf"
														},
														{
															"key": "email",
															"value": "israkzahan21@gmail.com",
															"type": "text"
														},
														{
															"key": "phone",
															"value": "017534432558",
															"type": "text"
														},
														{
															"key": "experience",
															"value": "0.3",
															"type": "text"
														},
														{
															"key": "position",
															"value": "SQA Engineer",
															"type": "text"
														},
														{
															"key": "github",
															"value": "21",
															"type": "text"
														},
														{
															"key": "expectedSalary",
															"value": "2000000",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/career/submit",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"career",
														"submit"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get all Career Applications",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should be able to get all the candidates resume",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//var jsonData = JSON.parse(responseBody)\r",
															"//pm.environment.set(\"forms_id\",jsonData.documents[9]._id);\r",
															"//console.log(jsonData);\r",
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin get all the applications successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin get all the applications within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/career/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"career",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin should not be able to get all the candidates applications without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the candidates applications without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2500 ms when executing to get all the candidates applications without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to get all the candidates applications without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the candidates applications without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to get all the candidates applications without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/career/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"career",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Edit appliactions status",
							"item": [
								{
									"name": "Admin should be able to update the application status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin can edit all the applications successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin can edit all the applications within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"status\": \"onReview\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/career/edit/635d6b149eab0019100e55ee",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"career",
												"edit",
												"635d6b149eab0019100e55ee"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete the  Appliactions",
							"item": [
								{
									"name": "Admin should be able to delete the applications",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin can delete their application successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin can delete their resume within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"status\": \"onReview\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/career/delete/635d6b149eab0019100e55ee",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"career",
												"delete",
												"635d6b149eab0019100e55ee"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "(Need to discuss)Ts4u Ltd",
					"item": [
						{
							"name": "Create Voucher",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "HR should be able to create the payment voucher",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"voucher_id\", jsonData.voucher._id);\r",
															"\r",
															"//Validate the status code\r",
															"pm.test(\"HR can create the payment voucher successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"HR can create the payment voucher within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															"pm.test(\"Voucher key matched\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"voucher\");\r",
															"     pm.expect(pm.response.text()).to.include(\"credits\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"type\": \"receipt\",\r\n    \"date\": 1688791999275,\r\n    \"mainLedgers\": [\r\n        {\r\n            \"ledger\": \"63d96a4daf85a92758d1d28c\",\r\n            \"amount\": 100,\r\n            \"isActive\": true\r\n        }\r\n    ],\r\n    \"ledgers\": [\r\n        {\r\n            \"ledger\": \"63d96a4daf85a92758d1d28e\",\r\n            \"amount\": 100\r\n        }\r\n    ],\r\n    \"description\": \"\",\r\n    \"currency\": \"BDT\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/ts4u-account/voucher/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"ts4u-account",
														"voucher",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "HR should not be able to create the payment voucher without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"voucher_id\", jsonData.voucher._id);\r",
															"\r",
															"//Validate the status code\r",
															"pm.test(\"HR can create the payment voucher successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"HR can create the payment voucher within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															"pm.test(\"Voucher key matched\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"voucher\");\r",
															"     pm.expect(pm.response.text()).to.include(\"credits\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"type\": \"receipt\",\r\n    \"date\": 1688791999275,\r\n    \"mainLedgers\": [\r\n        {\r\n            \"ledger\": \"63d96a4daf85a92758d1d28c\",\r\n            \"amount\": 100,\r\n            \"isActive\": true\r\n        }\r\n    ],\r\n    \"ledgers\": [\r\n        {\r\n            \"ledger\": \"63d96a4daf85a92758d1d28e\",\r\n            \"amount\": 100\r\n        }\r\n    ],\r\n    \"description\": \"\",\r\n    \"currency\": \"BDT\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/ts4u-account/voucher/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"ts4u-account",
														"voucher",
														"create"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get all voucher",
							"item": [
								{
									"name": "Admin should be able to get all the payment voucher or search the payment voucher by the date",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin can get all the payment voucher successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin can get all the payment voucher within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"page\": 0,\r\n    \"limit\": 30,\r\n    \"sortBy\": \"payment_desc\",\r\n    \"startDate\": \"2023-07-04T18:00:00.000Z\",\r\n    \"endDate\": \"2023-07-05T17:59:59.999Z\",\r\n    \"currency\": \"BDT\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/ts4u-account/voucher/getall",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"ts4u-account",
												"voucher",
												"getall"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edit Voucher",
							"item": [
								{
									"name": "HR should able to edit the payment voucher",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"HR can edit the payment voucher successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"HR can edit the payment voucher within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"type\": \"payment\",\r\n    \"date\": \"2023-07-08T03:44:43.000Z\",\r\n    \"mainLedgers\": [\r\n        {\r\n            \"ledger\": \"63d96a4daf85a92758d1d28a\",\r\n            \"amount\": 100,\r\n            \"isActive\": true\r\n        }\r\n    ],\r\n    \"ledgers\": [\r\n        {\r\n            \"ledger\": \"63d96a4daf85a92758d1d28c\",\r\n            \"amount\": 100,\r\n            \"isActive\": false\r\n        }\r\n    ],\r\n    \"description\": \"\",\r\n    \"currency\": \"BDT\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/ts4u-account/voucher/edit/{{voucher_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"ts4u-account",
												"voucher",
												"edit",
												"{{voucher_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete Voucher",
							"item": [
								{
									"name": "HR should be able to edit the payment voucher",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"HR can edit all the applications successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"HR can edit all the applications within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"type\": \"payment\",\r\n    \"date\": \"2023-07-08T03:44:43.000Z\",\r\n    \"mainLedgers\": [\r\n        {\r\n            \"ledger\": \"63d96a4daf85a92758d1d28a\",\r\n            \"amount\": 100,\r\n            \"isActive\": true\r\n        }\r\n    ],\r\n    \"ledgers\": [\r\n        {\r\n            \"ledger\": \"63d96a4daf85a92758d1d28c\",\r\n            \"amount\": 100,\r\n            \"isActive\": false\r\n        }\r\n    ],\r\n    \"description\": \"\",\r\n    \"currency\": \"BDT\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/ts4u-account/voucher/delete/{{voucher_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"ts4u-account",
												"voucher",
												"delete",
												"{{voucher_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update Leader",
							"item": [
								{
									"name": "HR should be able to update the Leader profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"HR can update the leader profile successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"HR can update the leader profile within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"account\": \"bank \",\r\n    \"group\": \"current asset\",\r\n    \"type\": \"asset\",\r\n    \"currency\": \"BDT\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/ts4u-account/ledger/update/63d96a4daf85a92758d1d28a",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"ts4u-account",
												"ledger",
												"update",
												"63d96a4daf85a92758d1d28a"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Transactions",
					"item": [
						{
							"name": "Add transaction",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should able to add the transaction",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"transaction_id\",jsonData.transaction._id);\r",
															"\r",
															"//Validate the status code\r",
															"pm.test(\"HR can create the payment voucher successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"HR can create the payment voucher within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															"pm.test(\"transaction key matched\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"transaction\");\r",
															"     pm.expect(pm.response.text()).to.include(\"program\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"israkzahan21@gmail.com\",\r\n    \"method\": \"cash\",\r\n    \"amount\": \"100\",\r\n    \"date\": \"2023-07-18T08:52:33+06:00\",\r\n    \"status\": \"pending\",\r\n    \"note\": \"Transaction for test\",\r\n    \"attachment\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/transaction/addbyadmin",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transaction",
														"addbyadmin"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin should not be able to add the transaction without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to add the transaction without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing  to add the transaction without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to add the transaction without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to add the transaction without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to add the transaction without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"israkzahan21@gmail.com\",\r\n    \"method\": \"cash\",\r\n    \"amount\": \"100\",\r\n    \"date\": \"2023-07-18T08:52:33+06:00\",\r\n    \"status\": \"pending\",\r\n    \"note\": \"Transaction for test\",\r\n    \"attachment\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/transaction/addbyadmin",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transaction",
														"addbyadmin"
													]
												}
											},
											"response": []
										},
										{
											"name": "Admin should not be able to add the transaction to keeping the email field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to add the transaction to keeping the email field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to add the transaction to keeping the email field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing  to add the transaction to keeping the email field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to add the transaction to keeping the email field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Email, amount and method is required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request  to add the transaction to keeping the email field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"\",\r\n    \"method\": \"cash\",\r\n    \"amount\": \"100\",\r\n    \"date\": \"2023-07-18T08:52:33+06:00\",\r\n    \"status\": \"pending\",\r\n    \"note\": \"Transaction for test\",\r\n    \"attachment\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/transaction/addbyadmin",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transaction",
														"addbyadmin"
													]
												}
											},
											"response": []
										},
										{
											"name": "Admin should not be able to add the transaction to keeping the method field",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to add the transaction to keeping the method field \", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to add the transaction to keeping the method field \", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing  to add the transaction to keeping the method field \", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to add the transaction to keeping the method field \", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Email, amount and method is required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request  to add the transaction to keeping the method field \", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"israkzahan21@gmail.com\",\r\n    \"method\": \"\",\r\n    \"amount\": \"100\",\r\n    \"date\": \"2023-07-18T08:52:33+06:00\",\r\n    \"status\": \"pending\",\r\n    \"note\": \"Transaction for test\",\r\n    \"attachment\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/transaction/addbyadmin",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transaction",
														"addbyadmin"
													]
												}
											},
											"response": []
										},
										{
											"name": "Admin should not be able to add the transaction to keeping the amount field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to add the transaction to keeping the amount field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to add the transaction to keeping the amount field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing  to add the transaction to keeping the amount field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to add the transaction to keeping the amount field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Email, amount and method is required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request  to add the transaction to keeping the amount field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"israkzahan21@gmail.com\",\r\n    \"method\": \"cash\",\r\n    \"amount\": \"\",\r\n    \"date\": \"2023-07-18T08:52:33+06:00\",\r\n    \"status\": \"pending\",\r\n    \"note\": \"Transaction for test\",\r\n    \"attachment\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/transaction/addbyadmin",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transaction",
														"addbyadmin"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get all transactions",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should able to see get all transactions",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"HR get all the transactions \", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"HR get all the transactions  within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 10,\r\n    \"sort_by\": \"newest\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/transaction/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transaction",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin should not be able to get all transactions without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the transaction without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing  to get all the transaction without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the transaction without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the transaction without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to get all the transaction without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 10,\r\n    \"sort_by\": \"newest\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/transaction/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transaction",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Edit transaction information",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should be able to edit the transaction information",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"HR edit the transactions successfully \", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"HR edit the transactions within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"israkzahan21@gmail.com\",\r\n    \"method\": \"\",\r\n    \"amount\": 50000,\r\n    \"date\": \"2023-07-19T08:52:33+06:00\",\r\n    \"status\": \"pending\",\r\n    \"note\": \"For test\",\r\n    \"attachment\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/order/transaction/edit/{{transaction_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"order",
														"transaction",
														"edit",
														"{{transaction_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin should not be able to edit the transaction information without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit the transaction information without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing  to edit the transaction information without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to edit the transaction information without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to edit the transaction information without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to edit the transaction information without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"israkzahan21@gmail.com\",\r\n    \"method\": \"card\",\r\n    \"amount\": 50000,\r\n    \"date\": \"2023-07-19T08:52:33+06:00\",\r\n    \"status\": \"pending\",\r\n    \"note\": \"For test\",\r\n    \"attachment\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/order/transaction/edit/{{transaction_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"order",
														"transaction",
														"edit",
														"{{transaction_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Admin should not be able to edit the transaction information without the transaction_id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit the transaction information without the transaction_id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing  to edit the transaction information without the transaction_id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to edit the transaction information without the transaction_id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Something went wrong' message when executing to edit the transaction information without the transaction_id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to edit the transaction information without the transaction_id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"israkzahan21@gmail.com\",\r\n    \"method\": \"card\",\r\n    \"amount\": 50000,\r\n    \"date\": \"2023-07-19T08:52:33+06:00\",\r\n    \"status\": \"pending\",\r\n    \"note\": \"For test\",\r\n    \"attachment\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/order/transaction/edit/{{}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"order",
														"transaction",
														"edit",
														"{{}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Admin should not be able to edit the transaction to keeping the method field",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit the transaction to keeping the method field \", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to edit the transaction to keeping the method field \", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing  to edit the transaction to keeping the method field \", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'amount and method is required' message when executing to edit the transaction to keeping the method field \", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"amount and method is required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request  to edit the transaction to keeping the method field \", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"israkzahan21@gmail.com\",\r\n    \"method\": \"\",\r\n    \"amount\": \"100\",\r\n    \"date\": \"2023-07-18T08:52:33+06:00\",\r\n    \"status\": \"pending\",\r\n    \"note\": \"Transaction for test\",\r\n    \"attachment\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/order/transaction/edit/{{transaction_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"order",
														"transaction",
														"edit",
														"{{transaction_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Admin should not be able to edit the transaction to keeping the amount amount field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit the transaction to keeping the amount field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to edit the transaction to keeping the amount field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing  to edit the transaction to keeping the amount field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'amount and method is required' message when executing to edit the transaction to keeping the amount field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"amount and method is required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request  to edit the transaction to keeping the amount field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"israkzahan21@gmail.com\",\r\n    \"method\": \"\",\r\n    \"amount\": \"100\",\r\n    \"date\": \"2023-07-18T08:52:33+06:00\",\r\n    \"status\": \"pending\",\r\n    \"note\": \"Transaction for test\",\r\n    \"attachment\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/order/transaction/edit/{{transaction_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"order",
														"transaction",
														"edit",
														"{{transaction_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete Transaction",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should be able to delete the transaction id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"HR deleted the transaction successfully \", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"HR deleted all the transactions within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{baseUrl}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/transaction/delete/{{transaction_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transaction",
														"delete",
														"{{transaction_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin should not be able to delete without the transaction_id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to delete the transaction information without the transaction_id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing  to delete the transaction information without the transaction_id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to delete the transaction information without the transaction_id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Something went wrong' message when executing to delete the transaction information without the transaction_id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to delete the transaction information without the transaction_id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/transaction/delete/{{}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transaction",
														"delete",
														"{{}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Admin should not be able to delete without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to delete the transaction information without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing  to delete the transaction information without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to delete the transaction information without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to delete the transaction information without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Validate the response header of the request to delete the transaction information without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/transaction/delete/{{transaction_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transaction",
														"delete",
														"{{transaction_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get all transactions(Course)",
							"item": [
								{
									"name": "(Fail)Admin should able to get all the transactions by the course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"HR get all the transactions by the course \", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"HR get all the transactions by the course within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 10,\r\n    \"sort_by\": \"newest\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/order/alltransaction/course",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"order",
												"alltransaction",
												"course"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edit course status",
							"item": [
								{
									"name": "(FAIL)HR should able to edit course pending status or approved status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"HR can edit course status successfully \", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"HR can edit course status within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"shimul1866@gmail.com\",\r\n    \"method\": \"cashApp\",\r\n    \"amount\": 20,\r\n    \"date\": \"2021-11-27T19:46:34.442Z\",\r\n    \"status\": \"approved\",\r\n    \"note\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/order/transaction/61a28b24d410900b94eca46e",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"order",
												"transaction",
												"61a28b24d410900b94eca46e"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Export transaction file",
							"item": [
								{
									"name": "Admin should be able to export the transaction file",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"HR exported a transaction file successfully \", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"HR exported a transactions within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "/C:/Users/TS4U/Downloads/generatedBy_react-csv (11).csv"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/transaction/export",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"transaction",
												"export"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "(Need to discuss)Orders",
					"item": [
						{
							"name": "Get all orders",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "HR should be able to add all the orders",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"HR see all the orders successfully \", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"HR see all the orders within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															"pm.test(\"Orders key matched\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"fullName\");\r",
															"     pm.expect(pm.response.text()).to.include(\"user\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/order/allorders",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"order",
														"allorders"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "HR should not be able to get all the orders  without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"HR see all the orders successfully \", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"HR see all the orders within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															"pm.test(\"Orders key matched\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"fullName\");\r",
															"     pm.expect(pm.response.text()).to.include(\"user\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/order/allorders",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"order",
														"allorders"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update order",
							"item": [
								{
									"name": "HR should be able to update the orders",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"HR update the orders successfully \", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"HR see all the orders within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Orders key matched\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"fullName\");\r",
													"     pm.expect(pm.response.text()).to.include(\"user\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"status\": \"active\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/order/update/61bf7788ac5af55464e04719",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"order",
												"update",
												"61bf7788ac5af55464e04719"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "(Need to discuss)Staff List",
					"item": [
						{
							"name": "Add Staff",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "HR should be able to add new staff",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"\r",
															"//Validate the status code\r",
															"pm.test(\"HR add a new staff successfully \", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"HR add a new staff within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phone\": \"{{$randomPhoneNumber}}\",\r\n    \"gender\": \"Male\",\r\n    \"email\": \"{{$randomEmail}}\",//every request need to change valid email.\r\n    \"permission\": \"6183d40115e841739c8dbdbd\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/staff/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"add"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "HR should be able to add new staff",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"HR add a new staff successfully \", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"HR add a new staff within 1500ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phone\": \"{{$randomPhoneNumber}}\",\r\n    \"gender\": \"Male\",\r\n    \"email\": \"{{$randomEmail}}\",//every request need to change valid email.\r\n    \"permission\": \"6183d40115e841739c8dbdbd\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/staff/add",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"staff",
																"add"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Get all staff",
							"item": [
								{
									"name": "HR should be able to get all the staff roll list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"staff_id\",jsonData.roles[19]._id);\r",
													"//Validate the status code\r",
													"pm.test(\"HR get all the staff roll list successfully \", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"HR get all the staff roll list within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Roles key matched\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"roles\");\r",
													"     pm.expect(pm.response.text()).to.include(\"read\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Pranto\",\r\n    \"lastName\": \"Mazumder\",\r\n    \"phone\": \"01629111902\",\r\n    \"gender\": \"Male\",\r\n    \"email\": \"jpranto2@gmail.com\",\r\n    \"permission\": \"64883e7837a20c00197f0a33\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/staff/role/get",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"staff",
												"role",
												"get"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update staff List",
							"item": [
								{
									"name": "(Fail)Admin can able to update the the staff list",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"permission\": \"63395f6deb85924ce0f58cab\",\r\n    \"email\": \"mituldas751@gmail.com\",\r\n    \"firstName\": \"Mitul\",\r\n    \"lastName\": \"Das\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/staff/update/63395f6deb85924ce0f58cab",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"staff",
												"update",
												"63395f6deb85924ce0f58cab"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Deleted the staff information",
							"item": [
								{
									"name": "HR should be able to deleted the staff information successfully",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful DELETE request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Israk Zahan\",\r\n    \"lastName\": \"Monisha\",\r\n    \"phone\": \"01753443558\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"sidegan801@kameili.com\",\r\n    \"permission\": \"6183d40115e841739c8dbdbd\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/staff/delete/{{staff_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"staff",
												"delete",
												"{{staff_id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Role Management",
					"item": [
						{
							"name": "Add/Create Staff Roll",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "HR should be able to add new staff roll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"role_id\", jsonData.role._id);\r",
															"\r",
															"//Validate the status code\r",
															"pm.test(\"HR add the staff roll successfully \", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"HR add the staff roll within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															"pm.test(\"Role key matched\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"category\");\r",
															"     pm.expect(pm.response.text()).to.include(\"create\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Israk Zahan Monisha\",\r\n    \"description\": \"Description for test\"\r\n    \r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/staff/role/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"role",
														"add"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "HR should not be able to add new staff roll without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to create new staff roll without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to create a staff role without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to create staff role without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to create a staff role without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to create a staff role without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Israk Zahan Monisha\",\r\n    \"description\": \"Description for test\"\r\n    \r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/staff/role/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"role",
														"add"
													]
												}
											},
											"response": []
										},
										{
											"name": "HR should not be able to add new staff roll without giving the role name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to create new staff roll to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to create new staff roll to keeping the name field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to create new staff roll to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to create new staff roll to keeping the name field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Name is required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to create new staff roll to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"\",\r\n    \"description\": \"Description for test\"\r\n    \r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/staff/role/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"role",
														"add"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Edit staff roll",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "HR should be able to edit the role information",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful PATCH request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Test Role\",\r\n    \"description\": \"Description for test\"\r\n    \r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/staff/role/edit/{{role_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"role",
														"edit",
														"{{role_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "HR should not be able to edit the role information without inputting the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit the staff role without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to edit the staff role without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to edit the staff role without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to edit the staff role without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to edit the staff role without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Test Role\",\r\n    \"description\": \"Description for test\"\r\n    \r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/staff/role/edit/{{role_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"role",
														"edit",
														"{{role_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "HR should not be able to edit the role information to keeping the name field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit the staff roll to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to edit the staff roll to keeping the name field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to edit the staff roll to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to edit the staff roll to keeping the name field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Name is required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to edit the staff roll to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"\",\r\n    \"description\": \"Description for test\"\r\n    \r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/staff/role/edit/{{role_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"role",
														"edit",
														"{{role_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete staff information",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "HR should be able to delete the staff roll information from the staff list",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful DELETE request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/staff/role/delete/{{role_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"role",
														"delete",
														"{{role_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "HR should not be able to delete the staff roll information from the staff list without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to delete the staff role without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to delete the staff role without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to delete the staff role without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to delete the staff role without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to delete the staff role without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/staff/role/delete/{{role_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"role",
														"delete",
														"{{role_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(Fail)HR should not be able to delete the staff roll information from the staff list without the role_id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to delete the staff roll information from the staff list without the role_id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to delete the staff roll information from the staff list without the role_id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to delete the staff roll information from the staff list without the role_id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to delete the staff roll information from the staff list without the role_id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to delete the staff roll information from the staff list without the role_id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/staff/role/delete/{{}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"role",
														"delete",
														"{{}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "(Need to Discuss)Staff Attendence",
					"item": [
						{
							"name": "(Need to Discuss)Create Attendance",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Staff should be able to start their attendance by clicking the start button",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\" Staff created their attendance successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Staff created their attendance within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"date\": \"2023-07-26T02:27:15.660Z\",\r\n    \"title\": \"Hi\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/staff-attendance/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff-attendance",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Staff should be able to start their attendance by clicking the start button",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\" Staff created their attendance successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Staff created their attendance within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"date\": \"2023-07-26T02:27:15.660Z\",\r\n    \"title\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/staff-attendance/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff-attendance",
														"create"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Stop event",
							"item": [
								{
									"name": "Staff should be able to stop their attendance by clicking the stop button",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Staff stopped their attendance successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Staff stopped their attendance within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"event\": \"64b2479fc2c3cd0020e3c51c\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/staff-attendance/stopevent",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"staff-attendance",
												"stopevent"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edit Attendence",
							"item": [
								{
									"name": "As a admin, I able to edit the staff attendance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin edited the staff attendance successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin edited the staff attendance within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"events\": [\r\n        {\r\n            \"title\": \"Checkin\",\r\n            \"_id\": \"64b23a5ac2c3cd0020e3c47e\",\r\n            \"start\": \"2023-07-14T12:19:06+06:00\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/staff-attendance/edit/64b23a5ac2c3cd0020e3c47d",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"staff-attendance",
												"edit",
												"64b23a5ac2c3cd0020e3c47d"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Approve attendence",
							"item": [
								{
									"name": "Admin should able to approve to the staff's attendance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin approved the staff attendance successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin approved the staff attendance within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"64b23a5ac2c3cd0020e3c47d\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/staff-attendance/markapprove",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"staff-attendance",
												"markapprove"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete staff attendence",
							"item": [
								{
									"name": "Admin should able to delete to the staff's attendance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin deleted the staff attendance successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin deleted the staff attendance within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/staff-attendance/delete/64b23a5ac2c3cd0020e3c47d",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"staff-attendance",
												"delete",
												"64b23a5ac2c3cd0020e3c47d"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Markoff attendence",
							"item": [
								{
									"name": "As a user, i will be able to Mark off a day.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Staff markOff a day when the give their attendance successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Staff markOff a day when the give their attendance within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"date\": \"2023-07-15T06:09:40.809Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/staff-attendance/markof",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"staff-attendance",
												"markof"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Check-in",
					"item": [
						{
							"name": "(Need to discuss)My programe",
							"item": [
								{
									"name": "(Need to discuss) Checkin",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "Admin should be able to get all the checkin program",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin is viewing all the program successfully \", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin is viewing all the program within 1500ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/user/getall-checkin",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"user",
																"getall-checkin"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Send otp",
									"item": [
										{
											"name": "System send the OTP  on the registration time",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"System send the OTP  on the registration time successfully \", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"System send the OTP  on the registration time within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"channel\": \"email\",\r\n    \"email\": \"mitul751@gmail.com\",\r\n    \"phone\": \"1526546421\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/user/sendotp",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"user",
														"sendotp"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update user information",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should be able to update his account information",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"User updated their information successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"User updated their information within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"pm.test(\"User key matched\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"isEmailVerified\");\r",
															"     pm.expect(pm.response.text()).to.include(\"profilePicture\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"phone\": \"12025550149\",\r\n    \"firstName\": \"Israk\",\r\n    \"lastName\": \"Monisha\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/user/updateuser",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"user",
														"updateuser"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin should not be able to update his account information without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to update his account information  without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to update his account information  without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to update his account information  without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to update his account information  without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to update his account information  without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"phone\": \"12025550149\",\r\n    \"firstName\": \"Israk\",\r\n    \"lastName\": \"Monisha\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/user/updateuser",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"user",
														"updateuser"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "ChangePassword",
							"item": [
								{
									"name": "OTP",
									"item": [
										{
											"name": "User should be able to reset his password",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful DELETE request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_staging_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"mitul.das@ts4u.us\",\r\n    \"otp\": \"078615\",\r\n    \"password\": \"Mituldas@#$1999\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseURL}}/user/password/reset",
													"host": [
														"{{baseURL}}"
													],
													"path": [
														"user",
														"password",
														"reset"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Forgot",
									"item": [
										{
											"name": "User should be able to click forgot his password button",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"isOtpSend\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_staging_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"mitul.das@ts4u.us\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseURL}}/api/user/password/forgot",
													"host": [
														"{{baseURL}}"
													],
													"path": [
														"api",
														"user",
														"password",
														"forgot"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "User should be able to change his password",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"currentPassword\": \"Mo908070600.\",\r\n    \"newPassword\": \"Mo90807060.\",\r\n    \"confirmPassword\": \"Mo90807060.\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/user/changepassword",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"user",
												"changepassword"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Add payment",
							"item": [
								{
									"name": "User should be  able to pay for their registered courses",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User updated their information successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User updated their information within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"pm.test(\"transaction key matched\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"amount\");\r",
													"     pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"method\": \"cash\",\r\n    \"amount\": \"10000\",\r\n    \"date\": \"2023-07-15T08:33:29.017Z\",\r\n    \"note\": \"\",\r\n    \"attachment\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/transaction/addbyuser",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"transaction",
												"addbyuser"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Enrollment validate",
							"item": [
								{
									"name": "User should be able to validate the enrollment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User validated their enrollment successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User validated their enrollment within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"israkzahan2@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://staging-api.ts4u.us/api/user/enrollmentValidate",
											"protocol": "https",
											"host": [
												"staging-api",
												"ts4u",
												"us"
											],
											"path": [
												"api",
												"user",
												"enrollmentValidate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Existing refer id",
							"item": [
								{
									"name": "Refer id",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"israkzahan21@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/user/existing/11223",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"user",
												"existing",
												"11223"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get enrollment form",
							"item": [
								{
									"name": "User should be able to get the enrollment form",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User get the enrollment form successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User get the enrollment form within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"pm.test(\"enrollment key matched\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"personalInformation\");\r",
													"     pm.expect(pm.response.text()).to.include(\"instantContact\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/user/myenrollmentform",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"user",
												"myenrollmentform"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Ts4u ltd/Accounting",
					"item": [
						{
							"name": "Add account",
							"item": [
								{
									"name": "Admin should be able to create an account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"transaction_id\", jsonData.transaction._id);\r",
													"\r",
													"\r",
													"//Validate the status code\r",
													"pm.test(\"Admin created an account successfully\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin created an account within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"pm.test(\"transaction key matched\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"amount\");\r",
													"     pm.expect(pm.response.text()).to.include(\"account\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"account\": \"TS4U\",\r\n    \"date\": 1689646000445,\r\n    \"amount\": \"100\",\r\n    \"type\": \"income\",\r\n    \"method\": {\r\n        \"name\": \"check\",\r\n        \"number\": \"11223344\"\r\n    },\r\n    \"description\": \"Test\",\r\n    \"sourceType\": \"feesdddcc\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/ts4u-account/add",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"ts4u-account",
												"add"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edit account information",
							"item": [
								{
									"name": "Admin should be able to edit a account's information by a id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin edited the account's information by the id successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin edited the account's information by the id within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"pm.test(\"transaction key matched\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"amount\");\r",
													"     pm.expect(pm.response.text()).to.include(\"method\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"account\": \"TS4U\",\r\n    \"date\": \"2022-09-03T20:08:27.238Z\",\r\n    \"amount\": \"298\",\r\n    \"type\": \"income\",\r\n    \"method\": {\r\n        \"name\": \"card\",\r\n        \"number\": \"34534645\"\r\n    },\r\n    \"description\": \"test dec\",\r\n    \"sourceType\": \"feesddd\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/ts4u-account/edit/{{transaction_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"ts4u-account",
												"edit",
												"{{transaction_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete account information",
							"item": [
								{
									"name": "(FAIL)Admin will be able to delete a account's information by a id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin deleted the account information successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin delete the acount information bellow 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"account\": \"TS4U\",\r\n    \"date\": \"2023-09-03T20:08:27.238Z\",\r\n    \"amount\": \"298\",\r\n    \"type\": \"income\",\r\n    \"method\": {\r\n        \"name\": \"card\",\r\n        \"number\": \"34534645\"\r\n    },\r\n    \"description\": \"test dec\",\r\n    \"sourceType\": \"safd\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/ts4u-account/delete/{{transaction_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ts4u-account",
												"delete",
												"{{transaction_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Account summary",
							"item": [
								{
									"name": "Get by ref",
									"item": [
										{
											"name": "Admin should able to summarize the account's information",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin summarized the account's information successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin summarized the account's information within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"pm.test(\"summary key matched\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"summary\");\r",
															"    pm.expect(pm.response.text()).to.include(\"sources\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"startDate\": null,\r\n    \"endDate\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/ts4u-account/get-summary/TS4U",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"ts4u-account",
														"get-summary",
														"TS4U"
													]
												}
											},
											"response": []
										},
										{
											"name": "Admin should  able to see all  the TS4U account's information",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin see the TS4U account's information the successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin summarize the account's information within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"pm.test(\"transactions key matched\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"account\");\r",
															"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"limit\": 100,\r\n    \"method\": \"\",\r\n    \"expenseType\": \"\",\r\n    \"sourceType\": \"\",\r\n    \"type\": \"\",\r\n    \"sortBy\": \"createdAt_asc\",\r\n    \"startDate\": null,\r\n    \"endDate\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/ts4u-account/getall/TS4U",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"ts4u-account",
														"getall",
														"TS4U"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Payment Management",
					"item": [
						{
							"name": "Get Enrollment List",
							"item": [
								{
									"name": "Admin should able to get all the enrollment list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"user_id\", jsonData.users._id);\r",
													"\r",
													"//Validate the status code\r",
													"pm.test(\"Admin get all the enrollment list successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin get all the enrollment list within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"pm.test(\"users key matched\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"isActive\");\r",
													"     pm.expect(pm.response.text()).to.include(\"activeTill\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"61113557c4ea52404a295afd\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/transaction/getenrollmentlis",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"transaction",
												"getenrollmentlis"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update enrollment status",
							"item": [
								{
									"name": "(Fail)Admin can be able to update enrollment status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//Validate the status code\r",
													"pm.test(\"Admin update the enrollment status successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin get all the enrollment status within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"isActive\": true,\r\n    \"activeTill\": null,\r\n    \"note\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/transaction/enrollment/updatestatus/63850e01d1218d16409352f8",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"transaction",
												"enrollment",
												"updatestatus",
												"63850e01d1218d16409352f8"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bulk Deadline",
							"item": [
								{
									"name": "Admin should be able to select the payment deadline",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin select the payment deadline successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin select the payment deadline within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"61113557c4ea52404a295afd\",\r\n    \"activeTill\": \"2023-07-10T10:28:05+06:00\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/transaction/bulk/deadline",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"transaction",
												"bulk",
												"deadline"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Marketing Services",
			"item": [
				{
					"name": "(FAIL)Send E-mail",
					"item": [
						{
							"name": "Admin can be able to save the email for marketing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"Save this email successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"Admin save all the email bellow 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"success\": true,\r\n    \"marketing\": {\r\n        \"isIncludeName\": false,\r\n        \"userLists\": [\r\n            {\r\n                \"email\": \"{{$randomEmail}}\",\r\n                \"name\": \"{{$randomUserName}}\"\r\n            }\r\n        ],\r\n        \"_id\": \"{{$guid}}\",\r\n        \"category\": \"email\",\r\n        \"subject\": \"ghfh\",\r\n        \"createdAt\": \"2023-08-03T02:23:18.348Z\",\r\n        \"updatedAt\": \"2023-08-03T02:23:18.348Z\",\r\n        \"__v\": 0\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl_user}}/api/marketing/sendsms",
									"host": [
										"{{baseUrl_user}}"
									],
									"path": [
										"api",
										"marketing",
										"sendsms"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Save email",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Admin can be able to save the email for marketing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//Validate the status code\r",
													"pm.test(\"Save this email successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin save all the email bellow 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"pm.test(\"Marketing key matched\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"isIncludeName\");\r",
													"     pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"items\": [\r\n        {\r\n            \"email\": \"mitul.das@ts4u.us\",\r\n            \"name\": \"Rafiur Protik\"\r\n        }\r\n    ],\r\n    \"subject\": \"ghfh\",\r\n    \"includeName\": false,\r\n    \"template\": \"0101\",\r\n    \"category\": \"email\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/marketing/save",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"marketing",
												"save"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Admin shouldn't be able to save the email for marketing without token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//Validate the status code\r",
													"pm.test(\"Marketing speaclist should get the '400' status code when executing to save the email for marketing without inputting the token\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Marketing speaclist should get the response below 2000 ms when executing to save the email for marketing without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"Marketing speaclist should get the 'Bad Request' status code name when executing to save the email for marketing without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"Marketing speaclist should get the 'Authorization required' message when executing to save the email for marketing without inputting the token\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"\r",
													"});\r",
													"\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request to save the email for marketing without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"items\": [\r\n        {\r\n            \"email\": \"mitul.das@ts4u.us\",\r\n            \"name\": \"Rafiur Protik\"\r\n        }\r\n    ],\r\n    \"subject\": \"ghfh\",\r\n    \"includeName\": false,\r\n    \"template\": \"0101\",\r\n    \"category\": \"email\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/marketing/save",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"marketing",
												"save"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Filter user-sms",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Admin should be able to filter the sms",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin will be able to filter the user's sms successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin can filter the email bellow 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"pm.test(\"Items key matched\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
													"     pm.expect(pm.response.text()).to.include(\"firstName\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userType\": \"approved\",\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"61113557c4ea52404a295afd\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/marketing/filter-user-sms",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"marketing",
												"filter-user-sms"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Admin shouldn't  be able to filter the sms without the token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//Validate the status code\r",
													"pm.test(\"Marketing speaclist should get the '400' status code when executing to filter the sms without inputting the token\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Marketing speaclist should get the response below 2000 ms when executing to filter the sms without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"Marketing speaclist should get the 'Bad Request' status code name when executing to filter the sms without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"Marketing speaclist should get the 'Authorization required' message when executing to filter the sms without inputting the token\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"\r",
													"});\r",
													"\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request to filter the sms without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userType\": \"approved\",\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"61113557c4ea52404a295afd\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/marketing/filter-user-sms",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"marketing",
												"filter-user-sms"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "(ID issue) Delete User",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Admin should be able to delete the user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin deleted the user successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin delete the user bellow 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/marketing/delete/64b22b9e7b37450020233120",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"marketing",
												"delete",
												"64b22b9e7b37450020233120"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Admin should be able to delete the user without token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//Validate the status code\r",
													"pm.test(\"Marketing speaclist should get the '400' status code when executing to delete history without inputting the blog title\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Marketing speaclist should get the response below 2000 ms when executing to delete history without inputting the title\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"Marketing speaclist should get the 'Bad Request' status code name when executing to delete history without inputting the title\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"Marketing speaclist should get the 'Authorization required' message when executing to delete history without inputting the title\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"error\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"\r",
													"});\r",
													"\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request to delete history without inputting the title\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/marketing/delete/64b22b9e7b37450020233120",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"marketing",
												"delete",
												"64b22b9e7b37450020233120"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"auth": {
						"type": "bearer"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Sucess Stories, Facebook Reviews, Google Reviews, Features & Services, Chacking page",
					"item": [
						{
							"name": "Success Stories",
							"item": [
								{
									"name": "Create",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to create on the success stories",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"HR can be Create on the bellow 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"HR can be Create on the response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"HR can be Create on the POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"userImage\": \"\",\r\n    \"userName\": \"Mitul\",\r\n    \"user\": {\r\n        \"profilePicture\": \"\",\r\n        \"lastName\": \"Rasheed\",\r\n        \"_id\": \"62b9e0d10bee38dbc09f0c73\",\r\n        \"email\": \"jesminrasheed@gmail.com\",\r\n        \"firstName\": \"Jesmin\",\r\n        \"fullName\": \"Jesmin Rasheed\"\r\n    },\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"6111359bc4ea52404a295aff\",\r\n    \"order\": \"1\",\r\n    \"details\": \"<p>cvbc</p>\",\r\n    \"isActive\": true,\r\n    \"category\": \"success\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/programpage/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"programpage",
																"create"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As an admin, I shouldn't  be able to create on the success stories without token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Marketing speaclist should get the '400' status code when create program without inputting the without token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Marketing speaclist should get the response below 2000 ms when create program without inputting the without token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Marketing speaclist should get the 'Bad Request' status code name when create program without inputting the without token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Marketing speaclist should get the 'Authorization required' message when create program without inputting the without token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to create program without inputting the without token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"userImage\": \"\",\r\n    \"userName\": \"Mitul\",\r\n    \"user\": {\r\n        \"profilePicture\": \"\",\r\n        \"lastName\": \"Rasheed\",\r\n        \"_id\": \"62b9e0d10bee38dbc09f0c73\",\r\n        \"email\": \"jesminrasheed@gmail.com\",\r\n        \"firstName\": \"Jesmin\",\r\n        \"fullName\": \"Jesmin Rasheed\"\r\n    },\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"6111359bc4ea52404a295aff\",\r\n    \"order\": \"1\",\r\n    \"details\": \"<p>cvbc</p>\",\r\n    \"isActive\": true,\r\n    \"category\": \"success\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/programpage/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"programpage",
																"create"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Get all",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to see all the success stories",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful GET request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/programpage/getall?category=success",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"programpage",
																"getall"
															],
															"query": [
																{
																	"key": "category",
																	"value": "success"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As an admin, I shouldn't be able to get all the success stories  without token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Marketing speaclist should get the '400' status code when create program without inputting the without token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Marketing speaclist should get the response below 2000 ms when see all program without inputting the without token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Marketing speaclist should get the 'Bad Request' status code name when see all program without inputting the without token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Marketing speaclist should get the 'Authorization required' message when see all program without inputting the without token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to see all program without inputting the without token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/programpage/getall?category=success",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"programpage",
																"getall"
															],
															"query": [
																{
																	"key": "category",
																	"value": "success"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Edit",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to edit the success stories",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful GET request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"userImage\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/program-user-image/1649525238808-Faruk.png\",\r\n    \"userName\": \"Faruk\",\r\n    \"user\": \"\",\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"61113557c4ea52404a295afd\",\r\n    \"order\": \"11\",\r\n    \"details\": \"<p>I have done courses from different training centers but was not able to understand the complexity of software development. Once I joined our job readiness program for the QE, I completed and got his job in 3 weeks. I like about the TS4U: they provide their services and application access permission, and you will feel like you're working. You can feel the growth and gain competency. You feel like you're in the project. They are different than others when It comes to providing the contents.</p>\",\r\n    \"isActive\": true,\r\n    \"category\": \"success\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/programpage/edit/6251c205e2da39eaccbd8567",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"programpage",
																"edit",
																"6251c205e2da39eaccbd8567"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As an admin, I shouldn't be able to edit the success stories without token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Marketing speaclist should get the '400' status code when edit to user without inputting the blog title\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Marketing speaclist should get the response below 2000 ms when edit to user without inputting the title\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Marketing speaclist should get the 'Bad Request' status code name when edit to user without inputting the title\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Marketing speaclist should get the 'Authorization required' message when edit to user without inputting the title\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to edit to user without inputting the title\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"userImage\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/program-user-image/1649525238808-Faruk.png\",\r\n    \"userName\": \"Faruk\",\r\n    \"user\": \"\",\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"61113557c4ea52404a295afd\",\r\n    \"order\": \"11\",\r\n    \"details\": \"<p>I have done courses from different training centers but was not able to understand the complexity of software development. Once I joined our job readiness program for the QE, I completed and got his job in 3 weeks. I like about the TS4U: they provide their services and application access permission, and you will feel like you're working. You can feel the growth and gain competency. You feel like you're in the project. They are different than others when It comes to providing the contents.</p>\",\r\n    \"isActive\": true,\r\n    \"category\": \"success\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/programpage/edit/6251c205e2da39eaccbd8567",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"programpage",
																"edit",
																"6251c205e2da39eaccbd8567"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Announcement",
							"item": [
								{
									"name": "Get all",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to see the all announcement",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful GET request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/announcement/getall",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"announcement",
																"getall"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As an admin, I should be able to see the all announcement",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Marketing speaclist should get the '400' status code when see to user without inputting the without token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Marketing speaclist should get the response below 2000 ms when see to user without inputting the without token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Marketing speaclist should get the 'Bad Request' status code name when see to user without inputting the without token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Marketing speaclist should get the 'Authorization required' message when see to user without inputting the without token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to see to user without inputting the without token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/announcement/getall",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"announcement",
																"getall"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Get active",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to see active the all announcement",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful GET request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/announcement/getactive",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"announcement",
																"getactive"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Create",
									"item": [
										{
											"name": "As an admin, I should be able to create the announcement",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Test1234\",\r\n    \"url\": \"sdwd\",\r\n    \"isActive\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/announcement/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"announcement",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Edit",
									"item": [
										{
											"name": "As an admin, I should be able to edit the announcement",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful PATCH request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Test12\",\r\n    \"url\": \"sdwd\",\r\n    \"isActive\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/announcement/edit/64af91af7b37450020232e54",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"announcement",
														"edit",
														"64af91af7b37450020232e54"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Delate",
									"item": [
										{
											"name": "As an admin, I should be able to delete the announcement",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful DELETE request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/announcement/delete/64af91af7b37450020232e54",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"announcement",
														"delete",
														"64af91af7b37450020232e54"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Program Service",
			"item": [
				{
					"name": "Generate Certificate",
					"item": [
						{
							"name": "Get Certified user's",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin i should be able to get all the certified user's",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 4000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"query\": \"fonugyt@mailto.plus\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/certificate/getuser",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"certificate",
														"getuser"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to get all the certified user's name without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the certified user's name without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"//Validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the certified user's name without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the certified user's name without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the certified user's name without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to get all the certified user's name without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"query\": \"fonugyt@mailto.plus\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/certificate/getuser",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"certificate",
														"getuser"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Upload_certificate",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to upload a students certificate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"results\": [],\r\n    \"id\": \"{{$guid}}\",\r\n    \"user\": \"64883e7837a20c00197f0a33\",\r\n    \"userData\": {\r\n        \"name\": \"Mitul Das\",\r\n        \"program\": \"CloudOps Engineer\",\r\n        \"session\": \"Feb-22\",\r\n        \"plan\": \"test 2\",\r\n        \"id\": \"553211\",\r\n        \"instructor\": \"Shahed Mehebub\",\r\n        \"signature\": \"Shahed Mehebub\",\r\n        \"issueDate\": \"03 Jul 2023\",\r\n        \"expireDate\": \"03 Jul 2025\"\r\n    },\r\n    \"certificateTemplate\": {\r\n        \"templateName\": \"template1\",\r\n        \"details1\": \"Has successfully completed the CloudOps Engineer\",\r\n        \"details2\": \"requirements and has achieved his\"\r\n    },\r\n    \"testimonial\": \"Mitul\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/certificate/upload",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"certificate",
														"upload"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to upload a students certificate without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to upload a students certificate without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2100 ms when executing to upload a students certificate without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2100);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to upload a students certificate without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to upload a students certificate without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to upload a students certificate without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"results\": [],\r\n    \"id\": \"{{$guid}}\",\r\n    \"user\": \"64883e7837a20c00197f0a33\",\r\n    \"userData\": {\r\n        \"name\": \"Mitul Das\",\r\n        \"program\": \"CloudOps Engineer\",\r\n        \"session\": \"Feb-22\",\r\n        \"plan\": \"test 2\",\r\n        \"id\": \"553211\",\r\n        \"instructor\": \"Shahed Mehebub\",\r\n        \"signature\": \"Shahed Mehebub\",\r\n        \"issueDate\": \"03 Jul 2023\",\r\n        \"expireDate\": \"03 Jul 2025\"\r\n    },\r\n    \"certificateTemplate\": {\r\n        \"templateName\": \"template1\",\r\n        \"details1\": \"Has successfully completed the CloudOps Engineer\",\r\n        \"details2\": \"requirements and has achieved his\"\r\n    },\r\n    \"testimonial\": \"Mitul\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/certificate/upload",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"certificate",
														"upload"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to upload a students certificate to keeping the user field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to upload a students certificate to keeping the user field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2100 ms when executing to upload a students certificate to keeping the user field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2100);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to upload a students certificate to keeping the user field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to upload a students certificate to keeping the user field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to upload a students certificate to keeping the user field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"results\": [],\r\n    \"id\": \"{{$guid}}\",\r\n    \"user\": \"\",\r\n    \"userData\": {\r\n        \"name\": \"Mitul Das\",\r\n        \"program\": \"CloudOps Engineer\",\r\n        \"session\": \"Feb-22\",\r\n        \"plan\": \"test 2\",\r\n        \"id\": \"553211\",\r\n        \"instructor\": \"Shahed Mehebub\",\r\n        \"signature\": \"Shahed Mehebub\",\r\n        \"issueDate\": \"03 Jul 2023\",\r\n        \"expireDate\": \"03 Jul 2025\"\r\n    },\r\n    \"certificateTemplate\": {\r\n        \"templateName\": \"template1\",\r\n        \"details1\": \"Has successfully completed the CloudOps Engineer\",\r\n        \"details2\": \"requirements and has achieved his\"\r\n    },\r\n    \"testimonial\": \"Mitul\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/certificate/upload",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"certificate",
														"upload"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Verify certificates",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to verify the student's certificates",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://staging-api.ts4u.us/api/certificate/verify?query=mitul.das@ts4u.us",
													"protocol": "https",
													"host": [
														"staging-api",
														"ts4u",
														"us"
													],
													"path": [
														"api",
														"certificate",
														"verify"
													],
													"query": [
														{
															"key": "query",
															"value": "mitul.das@ts4u.us"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to verify the student's certificates without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to verify the student's certificates without the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to verify the student's certificates without the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to verify the student's certificates without the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to verify the student's certificates without the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to verify the student's certificates without the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://staging-api.ts4u.us/api/certificate/verify?query=mitul.das@ts4u.us",
													"protocol": "https",
													"host": [
														"staging-api",
														"ts4u",
														"us"
													],
													"path": [
														"api",
														"certificate",
														"verify"
													],
													"query": [
														{
															"key": "query",
															"value": "mitul.das@ts4u.us"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get all",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin I should be able to get all the student's certificate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/certificate/all",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"certificate",
														"all"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin I should not be able to get all the student's certificate without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing  to get all the student's certificate without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing  to get all the student's certificate without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing  to get all the student's certificate without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing  to get all the student's certificate without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request  to get all the student's certificate without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/certificate/all",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"certificate",
														"all"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "NEED TO DISCUSS FOR ID)Delete certificate",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to delete a specific student's certificate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful DELETE request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/certificate/delete/{{Id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"certificate",
														"delete",
														"{{Id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to delete a specific student's certificate without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful DELETE request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/certificate/delete/{{Id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"certificate",
														"delete",
														"{{Id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Audio/video & Audio/Video Sending",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to upload the  audio and video file",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"media_id\", jsonData.media._id); \r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Test123\",\r\n    \"attachments\": [],\r\n    \"description\": \"\",\r\n    \"mediaType\": \"video\",\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"url\": \"https://youtu.be/TWsDvvoGD7I?t=420\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/media/admin/send",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"media",
														"admin",
														"send"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to upload the  audio and video file without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to upload the  audio and video file  without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"//Validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to upload the  audio and video file  without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to upload the  audio and video file  without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to upload the  audio and video file  without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to upload the  audio and video file  without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Test123\",\r\n    \"attachments\": [],\r\n    \"description\": \"\",\r\n    \"mediaType\": \"video\",\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"url\": \"https://youtu.be/TWsDvvoGD7I?t=420\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/media/admin/send",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"media",
														"admin",
														"send"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to upload the  audio and video file to keeping the name field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to upload the  audio and video file to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"//Validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to upload the  audio and video file to keeping the name field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to upload the  audio and video file to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Title is required' message when executing to upload the  audio and video file to keeping the name field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Title is required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to upload the audio and video file to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"\",\r\n    \"attachments\": [],\r\n    \"description\": \"\",\r\n    \"mediaType\": \"video\",\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"url\": \"https://youtu.be/TWsDvvoGD7I?t=420\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/media/admin/send",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"media",
														"admin",
														"send"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to get all the video/Audio file",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"HR can be upload  on the bellow 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"HR can be upload  on the response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"HR can be see  on the POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 10,\r\n    \"sort_by\": \"newest\",\r\n    \"program\": \"\",\r\n    \"session\": \"\",\r\n    \"query\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/media/admin/getall/media-sending",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"media",
														"admin",
														"getall",
														"media-sending"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to get all the video/Audio file without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the video/Audio file without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the video/Audio file without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to get all the video/Audio file without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the video/Audio file without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to get all the video/Audio file without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 10,\r\n    \"sort_by\": \"newest\",\r\n    \"program\": \"\",\r\n    \"session\": \"\",\r\n    \"query\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/media/admin/getall/media-sending",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"media",
														"admin",
														"getall",
														"media-sending"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to update the video/Audio file",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Test1234\",\r\n    \"attachments\": [],\r\n    \"description\": \"\",\r\n    \"mediaType\": \"video\",\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"url\": \"https://youtu.be/TWsDvvoGD7I?t=420\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/media/admin/update/{{media_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"media",
														"admin",
														"update",
														"{{media_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to update the video/Audio file without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Test1234\",\r\n    \"attachments\": [],\r\n    \"description\": \"\",\r\n    \"mediaType\": \"video\",\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"url\": \"https://youtu.be/TWsDvvoGD7I?t=420\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/media/admin/update/{{media_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"media",
														"admin",
														"update",
														"{{media_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to delete the video/Audio file",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/media/delete/media-sending/{{media_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"media",
														"delete",
														"media-sending",
														"{{media_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to delete the video/Audio file without the  token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to delete the video/Audio file without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to delete the video/Audio file without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to delete the video/Audio file without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to delete the video/Audio file without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to delete the video/Audio file without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/media/delete/media-sending/{{media_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"media",
														"delete",
														"media-sending",
														"{{media_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "See all audio&video",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to see the all media",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"description\": \"\",\r\n    \"attachments\": [],\r\n    \"mediaType\": \"video\",\r\n    \"users\": [],\r\n    \"category\": \"my-media\",\r\n    \"_id\": \"64a3b42d2ab66c0019adebda\",\r\n    \"title\": \"Test1234\",\r\n    \"url\": \"https://youtu.be/TWsDvvoGD7I?t=420\",\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"comments\": [],\r\n    \"createdAt\": \"2023-07-04T05:54:53.864Z\",\r\n    \"updatedAt\": \"2023-07-04T06:03:31.330Z\",\r\n    \"__v\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/media/single-media/{{media_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"media",
														"single-media",
														"{{media_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should be able to get all the media",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/media/mymedia",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"media",
														"mymedia"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to get the single media without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the blog article without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the blog article without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to get all the blog article without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the blog article without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to get all the blog article without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"description\": \"\",\r\n    \"attachments\": [],\r\n    \"mediaType\": \"video\",\r\n    \"users\": [],\r\n    \"category\": \"my-media\",\r\n    \"_id\": \"64a3b42d2ab66c0019adebda\",\r\n    \"title\": \"Test1234\",\r\n    \"url\": \"https://youtu.be/TWsDvvoGD7I?t=420\",\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"comments\": [],\r\n    \"createdAt\": \"2023-07-04T05:54:53.864Z\",\r\n    \"updatedAt\": \"2023-07-04T06:03:31.330Z\",\r\n    \"__v\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/media/single-media/{{media_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"media",
														"single-media",
														"{{media_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to get all the media without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the media without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the media without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to get all the media without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the media inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to get all the media without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/media/mymedia",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"media",
														"mymedia"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Workshop Videos/Interview Videos/Hands-On Labs & Show N Tell",
					"item": [
						{
							"name": "Add videos",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to upload the workshop video",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"Workshop video_id\", jsonData.workshop._id);\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Test1122\",\r\n    \"isActive\": true,\r\n    \"category\": \"workshop\",\r\n    \"chapters\": [],\r\n    \"slides\": [],\r\n    \"contents\": [],\r\n    \"session\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/workshop/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"add"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to upload the workshop videos without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to upload the workshop videos  without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to upload the workshop videos without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to upload the workshop videos without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to upload the workshop videos  without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to upload the workshop videos without inputting the title\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Test1122\",\r\n    \"isActive\": true,\r\n    \"category\": \"workshop\",\r\n    \"chapters\": [],\r\n    \"slides\": [],\r\n    \"contents\": [],\r\n    \"session\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/workshop/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"add"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "See all videos",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to see all workshop video",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"Workshops_ID\", jsonData.workshops._id);\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/workshop/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"getall"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I want to add the workshop lesson video",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"test\",\r\n    \"url\": \"https://youtu.be/TWsDvvoGD7I?t=1003\",\r\n    \"type\": \"video\",\r\n    \"duration\": \"60\",\r\n    \"index\": \"-1\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/workshop/add/lesson/{{Workshop video_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"add",
														"lesson",
														"{{Workshop video_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should be able to see the all the previous workshop videos",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/workshop/all/workshoptitle",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"all",
														"workshoptitle"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to get all workshop videos without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all workshop video inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all workshop video without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to get all workshop video without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all workshop video without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to get all workshop video without inputting the title\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"limit\": 10\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/workshop/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"getall"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able  to add the workshop lesson videos without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to add the workshop lesson videos inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to add the workshop lesson videos without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to add the workshop lesson videos without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to add the workshop lesson videos without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to add the workshop lesson videos without inputting the title\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"test\",\r\n    \"url\": \"https://youtu.be/TWsDvvoGD7I?t=1003\",\r\n    \"type\": \"video\",\r\n    \"duration\": \"60\",\r\n    \"index\": \"-1\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/workshop/add/lesson/{{Workshop video_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"add",
														"lesson",
														"{{Workshop video_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to get the all the previous workshop videos without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get the all the previous workshop videos inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get the all the previous workshop videos without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to get the all the previous workshop videos without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get the all the previous workshop videos without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to get the all the previous workshop videos without inputting the title\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": [\r\n        \"61113557c4ea52404a295afd\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/workshop/all/workshoptitle",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"all",
														"workshoptitle"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I want to edit the workshop video",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful PATCH request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Test112\",\r\n    \"isActive\": true,\r\n    \"category\": \"workshop\",\r\n    \"chapters\": [],\r\n    \"slides\": [],\r\n    \"contents\": [],\r\n    \"session\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/workshop/edit/{{Workshop video_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"edit",
														"{{Workshop video_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I want to updategroup the workshop video lesson",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful PATCH request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/workshop/updategroup/{{Workshop video_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"updategroup",
														"{{Workshop video_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I want to see toggle sessions the workshop video",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful PATCH request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"session\": \"61113557c4ea52404a295afd\",\r\n    \"type\": \"unlock\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/workshop/bulk/toggle-sessions/{{Workshop video_id}}/interview",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"bulk",
														"toggle-sessions",
														"{{Workshop video_id}}",
														"interview"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I want to edit the workshop lesson video",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful PATCH request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Test11\",\r\n    \"isActive\": true,\r\n    \"category\": \"workshop\",\r\n    \"chapters\": [],\r\n    \"slides\": [],\r\n    \"contents\": [],\r\n    \"session\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/workshop/edit/{{Workshop video_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"edit",
														"{{Workshop video_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I  should not be able to edit the workshop videos without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit the workshop videos without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to edit the workshop videos without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to edit the workshop videos without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to edit the workshop videos without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to edit the workshop videos without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Test112\",\r\n    \"isActive\": true,\r\n    \"category\": \"workshop\",\r\n    \"chapters\": [],\r\n    \"slides\": [],\r\n    \"contents\": [],\r\n    \"session\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/workshop/edit/{{Workshop video_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"edit",
														"{{Workshop video_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to update the group workshop video without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to update group workshop video without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to update group workshop video without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to update group workshop video without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to update group workshop video without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//Validate the response headers\r",
															"\r",
															"pm.test(\"Validate the response header of the request to update group workshop video without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/workshop/updategroup/{{Workshop video_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"updategroup",
														"{{Workshop video_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Admin should not be able to get the toggle sessions the workshop video without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get the toggle sessions workshop video without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get the toggle sessions workshop video without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to get the toggle sessions workshop video without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get the toggle sessions workshop video without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//Validate the response headers\r",
															"\r",
															"pm.test(\"Validate the response header of the request to get the toggle sessions workshop video without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"session\": \"61113557c4ea52404a295afd\",\r\n    \"type\": \"unlock\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/workshop/bulk/toggle-sessions/{{Workshop video_id}}/interview",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"bulk",
														"toggle-sessions",
														"{{Workshop video_id}}",
														"interview"
													]
												}
											},
											"response": []
										},
										{
											"name": "Admin should not be able to edit the workshop lesson video without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit the workshop lesson video without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to edit the workshop lesson video without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to edit the workshop lesson video without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to edit the workshop lesson video without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"//Validate the response headers\r",
															"\r",
															"pm.test(\"Validate the response header of the request to edit the workshop lesson video without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Test11\",\r\n    \"isActive\": true,\r\n    \"category\": \"workshop\",\r\n    \"chapters\": [],\r\n    \"slides\": [],\r\n    \"contents\": [],\r\n    \"session\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/workshop/edit/{{Workshop video_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"edit",
														"{{Workshop video_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Admin should not be able to edit the workshop lesson video to keeping the name field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit the workshop lesson video to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing  to edit the workshop lesson video to keeping the name field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to edit the workshop lesson video to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to edit the workshop lesson video to keeping the name field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Name is required\");\r",
															"\r",
															"});\r",
															"//Validate the response headers\r",
															"\r",
															"pm.test(\"Validate the response header of the request to edit the workshop lesson video to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"\",\r\n    \"isActive\": true,\r\n    \"category\": \"workshop\",\r\n    \"chapters\": [],\r\n    \"slides\": [],\r\n    \"contents\": [],\r\n    \"session\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/workshop/edit/{{Workshop video_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"edit",
														"{{Workshop video_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should be able to delete the workshop video",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"HR can be add  on the bellow 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"HR can be add  on the response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"HR can be see  on the Delete request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/workshop/delete/{{Workshop video_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"delete",
														"{{Workshop video_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin should not be able to delete the workshop video without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to delete the workshop video without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to delete the workshop video without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to delete the workshop video without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to delete the workshop video without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to delete the workshop video without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/workshop/delete/{{Workshop video_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"delete",
														"{{Workshop video_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Admin should not be able to delete the workshop video without the workshop_video_id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to delete the workshop video without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to delete the workshop video without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to delete the workshop video without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to delete the workshop video without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to delete the workshop video without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/workshop/delete/{{}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"delete",
														"{{}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "see all",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to active  on the workshop video",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful DELETE request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/workshop/active/{{Workshop video_id}}",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"workshop",
														"active",
														"{{Workshop video_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(Fail) As an  admin, I want to see users toggle sessions in the workshop video",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Server is runnung\");\r",
															"});\r",
															"pm.test(\"Successful PATCH request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"session\": \"64cb4bf00a7ee70019aa8862\",\r\n    \"type\": \"unlock\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/workshop/toggle-users/{{Workshop video_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"toggle-users",
														"{{Workshop video_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should be able to available-items the Hands-On Labs & Show N Tell",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/workshop/available-items/{{Workshop video_id}}/lab",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"available-items",
														"{{Workshop video_id}}",
														"lab"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to active  on the workshop video without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to active  on the workshop video without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing  to active  on the workshop video without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to active on the workshop video without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to active on the workshop video without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request  to active  on the workshop video without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/workshop/active/{{Workshop video_id}}",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"workshop",
														"active",
														"{{Workshop video_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an  admin, I should not be able to get the users toggle sessions in the workshop video without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get the users toggle sessions in the workshop video without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get the users toggle sessions in the workshop video without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get the users toggle sessions in the workshop video without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get the users toggle sessions in the workshop video without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to get the users toggle sessions in the workshop video without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"session\": \"64cb4bf00a7ee70019aa8862\",\r\n    \"type\": \"unlock\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/workshop/toggle-users/{{Workshop video_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"toggle-users",
														"{{Workshop video_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to available-items the Hands-On Labs & Show N Tell without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to available-items the Hands-On Labs & Show N Tell without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to available-items the Hands-On Labs & Show N Tell without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to available-items the Hands-On Labs & Show N Tell without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to available-items the Hands-On Labs & Show N Tell without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to available-items the Hands-On Labs & Show N Tell without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/workshop/available-items/{{Workshop video_id}}/lab",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"available-items",
														"{{Workshop video_id}}",
														"lab"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to available-items the Hands-On Labs & Show N Tell without the token Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to available-items the Hands-On Labs & Show N Tell without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to available-items the Hands-On Labs & Show N Tell without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to available-items the Hands-On Labs & Show N Tell without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to available-items the Hands-On Labs & Show N Tell without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to available-items the Hands-On Labs & Show N Tell without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/workshop/available-items/{{Workshop video_id}}/lab",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"available-items",
														"{{Workshop video_id}}",
														"lab"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "WorkshopLesson",
							"item": [
								{
									"name": "Delete",
									"item": [
										{
											"name": "As an video macker ,I should be able to delete the workshop lesson videos",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/workshop/delete/lesson/64e23614a7d2bd0019ad2194/64e2381d5acb3900194f4e6a",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"delete",
														"lesson",
														"64e23614a7d2bd0019ad2194",
														"64e2381d5acb3900194f4e6a"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get all workshop lesson videos",
									"item": [
										{
											"name": "As an admin, I should be able to see on the workshop video",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Server is runnung\");\r",
															"});\r",
															"pm.test(\"Successful DELETE request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/workshop/get/lesson/{{All_workshops_ID}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"workshop",
														"get",
														"lesson",
														"{{All_workshops_ID}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Professional Consultant",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to add a student on the session",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"session_id\", jsonData.session._id);\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"test\",\r\n    \"startingDate\": \"2023-07-26T11:45:43+06:00\",\r\n    \"isActive\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/session/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"session",
														"add"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should be able to add a document",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"document_id\", jsonData.document._id);\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"test\",\r\n    \"attachment\": [\r\n        \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/document-sending/1689490861651-generatedBy_react-csv.csv\"\r\n    ],\r\n    \"description\": \"<p>dg</p>\",\r\n    \"priority\": \"low\",\r\n    \"category\": \"e2e\",\r\n    \"program\": \"61113628c4ea52404a295b03\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/document/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"document",
														"add"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to add a student on the session without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to add a student on the session without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to add a student on the session without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to add a student on the session without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to add a student on the session without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to add a student on the session without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"test\",\r\n    \"startingDate\": \"2023-07-26T11:45:43+06:00\",\r\n    \"isActive\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/session/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"session",
														"add"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to add a student on the session to keeping the name field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to add a student on the session to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to add a student on the session  to keeping the name field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to add a student on the session  to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Name is required' message when executing to add a student on the session without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Name is required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to add a student on the session without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"\",\r\n    \"startingDate\": \"2023-07-26T11:45:43+06:00\",\r\n    \"isActive\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/session/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"session",
														"add"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to add a document without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to add document without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to add document without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to add document without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to add document without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to add document without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"test\",\r\n    \"attachment\": [\r\n        \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/document-sending/1689490861651-generatedBy_react-csv.csv\"\r\n    ],\r\n    \"description\": \"<p>dg</p>\",\r\n    \"priority\": \"low\",\r\n    \"category\": \"e2e\",\r\n    \"program\": \"61113628c4ea52404a295b03\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/document/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"document",
														"add"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to add a document to keeping the name field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to add a document to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to add a document to keeping the name field empty\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to add a document to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Something went wrong' message when executing to add a document to keeping the name field empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to add a document to keeping the name field empty\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"\",\r\n    \"attachment\": [\r\n        \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/document-sending/1689490861651-generatedBy_react-csv.csv\"\r\n    ],\r\n    \"description\": \"<p>dg</p>\",\r\n    \"priority\": \"low\",\r\n    \"category\": \"e2e\",\r\n    \"program\": \"61113628c4ea52404a295b03\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/document/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"document",
														"add"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get all consultent",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I want to see  the student's session history",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/consultant/session/history",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"consultant",
														"session",
														"history"
													]
												}
											},
											"response": []
										},
										{
											"name": "Admin should be able to get all the session",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"HR can be see  on the bellow 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"HR can be see  on the response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"HR can be see  on the GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/session/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"session",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to get the student's session history without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get the student's session history without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get the student's session history without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to get the student's session history without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get the student's session history without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to get the student's session history without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/consultant/session/history",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"consultant",
														"session",
														"history"
													]
												}
											},
											"response": []
										},
										{
											"name": "Admin should not be able to get all the session without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get all the session without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the session without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to get all the session without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the session without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to get all the session without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/session/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"session",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "(NEED TO DISCUSS) As an admin, I want to update on the student documents",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful PATCH request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"type\": \"on-demand\",\r\n    \"method\": \"card\",\r\n    \"duration\": 720000,\r\n    \"timeRange\": \"inside\",\r\n    \"status\": \"pending\",\r\n    \"expireDate\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/consultant/transaction/update/{{professional consultent_ID}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"consultant",
														"transaction",
														"update",
														"{{professional consultent_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should be able to edit student documents",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Feb-23\",\r\n    \"startingDate\": \"2022-02-01T00:00:00+06:00\",\r\n    \"isActive\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/session/edit/{{session_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"session",
														"edit",
														"{{session_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should be able to edit the induvidual student document",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"test\",\r\n    \"attachment\": [\r\n        \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/document-sending/1689490861651-generatedBy_react-csv.csv\"\r\n    ],\r\n    \"description\": \"<p>hi</p>\",\r\n    \"priority\": \"low\",\r\n    \"category\": \"e2e\",\r\n    \"program\": \"61113628c4ea52404a295b03\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/document/edit/{{document_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"document",
														"edit",
														"{{document_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "(NEED TO DISCUSS) As an admin, I want to update on the student documents",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful PATCH request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"type\": \"on-demand\",\r\n    \"method\": \"card\",\r\n    \"duration\": 720000,\r\n    \"timeRange\": \"inside\",\r\n    \"status\": \"pending\",\r\n    \"expireDate\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/consultant/transaction/update/{{professional consultent_ID}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"consultant",
														"transaction",
														"update",
														"{{professional consultent_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to edit student documents without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit student documents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to edit student documents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to edit student documents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to edit student documents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to edit student documents without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Feb-23\",\r\n    \"startingDate\": \"2022-02-01T00:00:00+06:00\",\r\n    \"isActive\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/session/edit/{{session_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"session",
														"edit",
														"{{session_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to edit student documents without the session_id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit student sessions  without the session_id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to edit student sessions  without the session_id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to edit student sessions  without the session_id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Something went wrong' message when executing to edit student sessions  without the session_id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to edit student sessions  without the session_id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Feb-23\",\r\n    \"startingDate\": \"2022-02-01T00:00:00+06:00\",\r\n    \"isActive\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/session/edit/{{}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"session",
														"edit",
														"{{}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to edit the induvidual student document without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit student documents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to edit student documents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to edit student documents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to edit student documents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to edit student documents without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"test\",\r\n    \"attachment\": [\r\n        \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/document-sending/1689490861651-generatedBy_react-csv.csv\"\r\n    ],\r\n    \"description\": \"<p>hi</p>\",\r\n    \"priority\": \"low\",\r\n    \"category\": \"e2e\",\r\n    \"program\": \"61113628c4ea52404a295b03\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/document/edit/{{document_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"document",
														"edit",
														"{{document_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to edit the induvidual student document without the document_id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to edit student documents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to edit student documents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to edit student documents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Something went wrong' message when executing to edit student documents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to edit student documents without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"test\",\r\n    \"attachment\": [\r\n        \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/document-sending/1689490861651-generatedBy_react-csv.csv\"\r\n    ],\r\n    \"description\": \"<p>hi</p>\",\r\n    \"priority\": \"low\",\r\n    \"category\": \"e2e\",\r\n    \"program\": \"61113628c4ea52404a295b03\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/document/edit/{{}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"document",
														"edit",
														"{{}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Export",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should be able to export the transaction file",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"program\": \"\",\r\n    \"session\": \"\",\r\n    \"query\": \"\",\r\n    \"status\": \"\",\r\n    \"method\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/transaction/export?",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transaction",
														"export"
													],
													"query": [
														{
															"key": "",
															"value": null
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin should not be able to export the transaction file without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to export the transaction file without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to export the transaction file without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to export the transaction file without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to export the transaction file without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to export the transaction file without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"program\": \"\",\r\n    \"session\": \"\",\r\n    \"query\": \"\",\r\n    \"status\": \"\",\r\n    \"method\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/transaction/export?",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transaction",
														"export"
													],
													"query": [
														{
															"key": "",
															"value": null
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Find_active",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I want to find active on the student consultant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/consultant/session/findactive",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"consultant",
														"session",
														"findactive"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I want to see on the admin history",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/consultant/session/history-admin",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"consultant",
														"session",
														"history-admin"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to find active on the student consultant without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to find active on the student consultant without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to find active on the student consultant without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to find active on the student consultant without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to find active on the student consultant without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to find active on the student consultant without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/consultant/session/findactive",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"consultant",
														"session",
														"findactive"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to see the admin history without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to see the admin history without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to see the admin history without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to see the admin history without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to see the admin history without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to see the admin history without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/consultant/session/history-admin",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"consultant",
														"session",
														"history-admin"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "All-available",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I should be able to all the available session",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/consultant/session/all-available",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"consultant",
														"session",
														"all-available"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should  not be able to get all the available consultant session without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to get  all the available consultant session without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get  all the available consultant session without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to get  all the available consultant session without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to get  all the available consultant session without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate the response header of the request to get  all the available consultant session without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/consultant/session/all-available",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"consultant",
														"session",
														"all-available"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "DELETE",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a admin, I should be able to delete the session",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful DELETE request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Feb-23\",\r\n    \"startingDate\": \"2022-02-01T00:00:00+06:00\",\r\n    \"isActive\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/session/delete/{{professional consultent_ID}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"session",
														"delete",
														"{{professional consultent_ID}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an admin, I should not be able to delete the session without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to delete the session without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to delete the session without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to delete the session without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to delete the session without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to delete the session without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Feb-23\",\r\n    \"startingDate\": \"2022-02-01T00:00:00+06:00\",\r\n    \"isActive\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/session/delete/{{session_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"session",
														"delete",
														"{{session_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should not be able to delete the session without the session_id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to delete the session without the session_id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to delete the session without the session_id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Admin should get the 'Bad Request' status code name when executing to delete the session without the session_id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Admin should get the 'Authorization required' message when executing to delete the session without the session_id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the response header of the request to delete the session without the session_id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Feb-23\",\r\n    \"startingDate\": \"2022-02-01T00:00:00+06:00\",\r\n    \"isActive\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/session/delete/{{}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"session",
														"delete",
														"{{}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "E2E Program Agenda/ Help Center",
					"item": [
						{
							"name": "E2E Program",
							"item": [
								{
									"name": "Create",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to add the document",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody)\r",
																	"pm.environment.set(\"document_program_ID\", jsonData.document._id);\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Created\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"test\",\r\n    \"attachment\": [],\r\n    \"description\": \"<p>dcvsd</p>\",\r\n    \"priority\": \"high\",\r\n    \"category\": \"e2e\",\r\n    \"user\": [\r\n        \"64883e7837a20c00197f0a33\"\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/document/add",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"document",
																"add"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As an admin, I should not be able to add the document without the token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to create a document without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to create a document without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to create a document without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to create a document without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to create a document without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"test\",\r\n    \"attachment\": [],\r\n    \"description\": \"<p>dcvsd</p>\",\r\n    \"priority\": \"high\",\r\n    \"category\": \"e2e\",\r\n    \"user\": [\r\n        \"64883e7837a20c00197f0a33\"\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/document/add",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"document",
																"add"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an admin, I should not be able to add the document to keeping the name field empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to added a document to keeping the name field empty\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to added a document to keeping the name field empty\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to added a document to keeping the name field empty\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Something went wrong' message when executing to added a document to keeping the name field empty\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to added a document to keeping the name field empty\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"\",\r\n    \"attachment\": [],\r\n    \"description\": \"<p>dcvsd</p>\",\r\n    \"priority\": \"high\",\r\n    \"category\": \"e2e\",\r\n    \"user\": [\r\n        \"64883e7837a20c00197f0a33\"\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/document/add",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"document",
																"add"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Get all",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to see all the e2e program",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 10,\r\n    \"sort_by\": \"newest\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/document/getall/e2e",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"document",
																"getall",
																"e2e"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As an admin, I should not be able to get all the e2e program without inputting the token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to get all the e2e program without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to get all the e2e program without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to get all the e2e program without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the e2e program without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Validate the response header of the request to get all the e2e program without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 10,\r\n    \"sort_by\": \"newest\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/document/getall/e2e",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"document",
																"getall",
																"e2e"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Update",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to edit on the document program",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Created\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful PATCH request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"Test Document\",\r\n    \"attachment\": [\r\n        \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/document-sending/1689490861651-generatedBy_react-csv.csv\"\r\n    ],\r\n    \"description\": \"<p>hi</p>\",\r\n    \"priority\": \"low\",\r\n    \"category\": \"e2e\",\r\n    \"program\": \"61113628c4ea52404a295b03\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/document/edit/{{document_program_ID}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"document",
																"edit",
																"{{document_program_ID}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As an admin, I should not be able to edit on the document program without the token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to edit on the document program without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to edit on the document program without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to edit on the document program without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to edit on the document program without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to edit on the document program without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    \r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"Test Document\",\r\n    \"attachment\": [\r\n        \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/document-sending/1689490861651-generatedBy_react-csv.csv\"\r\n    ],\r\n    \"description\": \"<p>hi</p>\",\r\n    \"priority\": \"low\",\r\n    \"category\": \"e2e\",\r\n    \"program\": \"61113628c4ea52404a295b03\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/document/edit/{{document_program_ID}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"document",
																"edit",
																"{{document_program_ID}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Delete",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to delete all the e2e program",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/document/delete/{{document_program_ID}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"document",
																"delete",
																"{{document_program_ID}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As an admin, I should not be able to delete all the e2e program without inputting the token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to delete all the e2e program without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to delete all the e2e program without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to delete all the e2e program without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to delete all the e2e program without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to delete all the e2e program without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    \r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/document/delete/{{document_program_ID}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"document",
																"delete",
																"{{document_program_ID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an admin, I should not be able to delete all the e2e program without the document_program_ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to delete all the e2e program without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to delete all the e2e program without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to delete all the e2e program without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Something went wrong' message when executing to delete all the e2e program without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to delete all the e2e program without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    \r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/document/delete/{{}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"document",
																"delete",
																"{{}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Help Center",
							"item": [
								{
									"name": "Create",
									"item": [
										{
											"name": "As an admin, I should be able to create the help center",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/document/userdocument/get",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"document",
														"userdocument",
														"get"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should be able to add document on the help center",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"Help center id\", jsonData.document._id);\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"test\",\r\n    \"attachment\": [],\r\n    \"description\": \"<p>asxa</p>\",\r\n    \"priority\": \"low\",\r\n    \"category\": \"help\",\r\n    \"user\": [\r\n        \"64883e7837a20c00197f0a33\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/document/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"document",
														"add"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should be able to comment on the help center",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string Server is runnung\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Server is runnung\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"comment\": \"hi\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/document/mydocuments/comment/create/{{Help center id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"document",
														"mydocuments",
														"comment",
														"create",
														"{{Help center id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should be able to create comment on the help center",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"comment\": \"Hlw \"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/document/mydocuments/comment/create/6297ddf99f973aad1635c5f2",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"document",
														"mydocuments",
														"comment",
														"create",
														"6297ddf99f973aad1635c5f2"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Export",
									"item": [
										{
											"name": "As an admin, I should be able to export the help center",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"program\": \"\",\r\n    \"session\": \"\",\r\n    \"query\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/document/export",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"document",
														"export"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a student, I should be able to export the help center",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"\",\r\n    \"query\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/document/export",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"document",
														"export"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "HELP",
									"item": [
										{
											"name": "As an admin, I should be able to help on the help center",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 10,\r\n    \"sort_by\": \"newest\",\r\n    \"program\": \"\",\r\n    \"session\": \"\",\r\n    \"query\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/document/getall/help",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"document",
														"getall",
														"help"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Single document",
									"item": [
										{
											"name": "As an admin, I should be able to comment the content details",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/document/singledocument/{{Help center id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"document",
														"singledocument",
														"{{Help center id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "User document",
									"item": [
										{
											"name": "As an admin, I should be able to see on the user document",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/document/userdocument/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"document",
														"userdocument",
														"users"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Delete",
									"item": [
										{
											"name": "As a admin, I should be able to delete the content details",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful DELETE request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"success\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/document/userdocument/deletebyadmin/{{Help center id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"document",
														"userdocument",
														"deletebyadmin",
														"{{Help center id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Create, Courses, Programs, Mock Interviews, Professional Services, Community Courses",
					"item": [
						{
							"name": "Course",
							"item": [
								{
									"name": "Create",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to create on the course",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody)\r",
																	"pm.environment.set(\"program_couese ID\", jsonData.token);\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"{{$randomJobTitle}}\",\r\n    \"category\": \"611135f5c4ea52404a295b01\",\r\n    \"subCategory\": \"\",\r\n    \"language\": \"English\",\r\n    \"label\": \"Trending\",\r\n    \"tags\": \"tag 1\",\r\n    \"shortDetail\": \"Test course\",\r\n    \"requirements\": \"IT Bacground\",\r\n    \"description\": \"\",\r\n    \"shortDescription\": \"\",\r\n    \"isDemo\": false,\r\n    \"image\": null,\r\n    \"instructor\": \"61113640c4ea52404a295b04\",\r\n    \"content\": null,\r\n    \"type\": \"program\",\r\n    \"price\": {\r\n        \"isFree\": true,\r\n        \"cost\": {\r\n            \"price\": 0,\r\n            \"salePrice\": 0\r\n        }\r\n    },\r\n    \"meta\": {\r\n        \"title\": \"Test1\",\r\n        \"description\": \"Test\"\r\n    },\r\n    \"country\": \"bd\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/course/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "(Need to Discuss)As an admin, I should be able to enroll the course",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"HR can be see all course on the bellow 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"HR can be see all course on the response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"HR can be see all course on the POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"Mitul\",\r\n    \"url\": \"https://www.youtube.com/watch?v=T8FEknMcKnA\",\r\n    \"isFree\": false,\r\n    \"duration\": \"60\",\r\n    \"type\": \"video\",\r\n    \"index\": \"1\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/course/enroll/64a93fca9107670019e92c19",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"enroll",
																"64a93fca9107670019e92c19"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As an admin, I should be able to create a course without inputting the token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to create a course without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to create a course without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to create a course without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to create a course without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to create a course without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"{{$randomJobTitle}}\",\r\n    \"category\": \"611135f5c4ea52404a295b01\",\r\n    \"subCategory\": \"\",\r\n    \"language\": \"English\",\r\n    \"label\": \"Trending\",\r\n    \"tags\": \"tag 1\",\r\n    \"shortDetail\": \"Test course\",\r\n    \"requirements\": \"IT Bacground\",\r\n    \"description\": \"\",\r\n    \"shortDescription\": \"\",\r\n    \"isDemo\": false,\r\n    \"image\": null,\r\n    \"instructor\": \"61113640c4ea52404a295b04\",\r\n    \"content\": null,\r\n    \"type\": \"program\",\r\n    \"price\": {\r\n        \"isFree\": true,\r\n        \"cost\": {\r\n            \"price\": 0,\r\n            \"salePrice\": 0\r\n        }\r\n    },\r\n    \"meta\": {\r\n        \"title\": \"Test1\",\r\n        \"description\": \"Test\"\r\n    },\r\n    \"country\": \"bd\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/course/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "(Need to Discuss)As an admin, I should be able to enroll the course Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"HR can be see all course on the bellow 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"HR can be see all course on the response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"HR can be see all course on the POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"Mitul\",\r\n    \"url\": \"https://www.youtube.com/watch?v=T8FEknMcKnA\",\r\n    \"isFree\": false,\r\n    \"duration\": \"60\",\r\n    \"type\": \"video\",\r\n    \"index\": \"1\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/course/enroll/64a93fca9107670019e92c19",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"enroll",
																"64a93fca9107670019e92c19"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "All course",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "(Need to Discuss)As an admin, I should be able to see on the all course",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/course/allcourse",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"allcourse"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an admin, I want to all click switch of the courses",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/course/allcourse",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"allcourse"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an admin, I should be able to allchapter on the all course",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/course/allchapter/{{program_roadmap ID}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"allchapter",
																"{{program_roadmap ID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an admin, I should be able to content on the all course",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/course/content/{{program_roadmap ID}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"content",
																"{{program_roadmap ID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "As a admin, I want to see course video to the course folder",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"Mitul\",\r\n    \"url\": \"https://www.youtube.com/watch?v=T8FEknMcKnA\",\r\n    \"isFree\": false,\r\n    \"duration\": \"60\",\r\n    \"type\": \"video\",\r\n    \"index\": \"1\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/course/admin-course/{{program_roadmap ID}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"admin-course",
																"{{program_roadmap ID}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "(Need to discuss)Update",
									"item": [
										{
											"name": "As an admin, I want to edit course module to the all chapter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Test123\",\r\n    \"index\": 0,\r\n    \"description\": \"dsa\",\r\n    \"subTitle\": \"\",\r\n    \"subDescription\": \"sda\",\r\n    \"image\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/course/edit-chapter/{{program_roadmap ID}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"course",
														"edit-chapter",
														"{{program_roadmap ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Admin will ce able to(turn on/off) on the switch.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"HR can be switch button on the bellow 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"HR can be switch button on the response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"HR can be switch button on the Patch request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/course/switch/{{program_roadmap ID}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"course",
														"switch",
														"{{program_roadmap ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I want to update course module to the all chapter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"groups\": [\r\n        \"62bfc73b2276e90284245470\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/course/updategroup/{{program_roadmap ID}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"course",
														"updategroup",
														"{{program_roadmap ID}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "(Need to discuss)DELETE",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I  should be able to delete on the course",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful DELETE request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/course/delete/{{program_roadmap ID}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"delete",
																"{{program_roadmap ID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an admin, I should be able to delete course on the chapter program",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"success\": true,\r\n    \"chapter\": {\r\n        \"index\": 0,\r\n        \"groups\": [],\r\n        \"_id\": \"64a93c0b9107670019e92be1\",\r\n        \"name\": \"test123\",\r\n        \"course\": \"64a914d29107670019e92a88\",\r\n        \"description\": \"rf\",\r\n        \"subTitle\": \"reg\",\r\n        \"subDescription\": \"rfg\",\r\n        \"image\": \"\",\r\n        \"lessons\": [],\r\n        \"createdAt\": \"2023-07-08T10:35:55.130Z\",\r\n        \"updatedAt\": \"2023-07-08T10:35:55.130Z\",\r\n        \"__v\": 0\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/course/delete-chapter/{{program_roadmap ID}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"delete-chapter",
																"{{program_roadmap ID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an admin, I should be able to delete the enroll course",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"HR can be delete course on the bellow 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"HR can be delete course on the response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"HR can be delete course on the DELETE request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/course/enroll-course/delete/{{program_roadmap ID}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"enroll-course",
																"delete",
																"{{program_roadmap ID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an admin, I should be able to delete on the courses lesson",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"HR can be delete course on the bellow 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"HR can be delete course on the response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"HR can be delete course on the DELETE request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"success\": true,\r\n    \"chapter\": {\r\n        \"index\": 0,\r\n        \"groups\": [\r\n            \"64ad0a269107670019e93fbf\"\r\n        ],\r\n        \"_id\": \"64b3db4cc2888500197f1333\",\r\n        \"name\": \"Test\",\r\n        \"course\": \"64a93fca9107670019e92c19\",\r\n        \"description\": \"hi\",\r\n        \"subTitle\": \"reg\",\r\n        \"subDescription\": \"hlw\",\r\n        \"image\": \"\",\r\n        \"lessons\": [],\r\n        \"createdAt\": \"2023-07-16T11:58:04.916Z\",\r\n        \"updatedAt\": \"2023-07-17T05:05:44.351Z\",\r\n        \"__v\": 0\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/course/delete-lesson/64b3db4cc2888500197f1333/64b4cadcc2888500197f1ddf",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"delete-lesson",
																"64b3db4cc2888500197f1333",
																"64b4cadcc2888500197f1ddf"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "(Need to discuss)Add-chapter",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I  should be able to add on the course",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"HR can be see all course on the bellow 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"HR can be see all course on the response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"HR can be see all course on the POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"Test\",\r\n    \"index\": 0,\r\n    \"description\": \"dsa\",\r\n    \"subTitle\": \"\",\r\n    \"subDescription\": \"sda\",\r\n    \"image\": \"\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/course/add-chapter/{{program_couese ID}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"add-chapter",
																"{{program_couese ID}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Find chapter",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to find on the all course",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/course/findchapter",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"findchapter"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As an admin, I should not be able to find on the all course chapter without the token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to find all the course chapter without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to find all the course chapter without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to find all the course chapter without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to find all the course chapter without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Validate the response header of the request to find all the course chapter without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/course/findchapter",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"findchapter"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "(Need to discuss)Clone",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to clone on the all course",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"Test123das\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/course/clone/{{program_couese ID}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"clone",
																"{{program_couese ID}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Enroll course",
									"item": [
										{
											"name": "Submit",
											"item": [
												{
													"name": "As an admin, I want to see all submit on the enroll course",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"HR can be Submit course on the bellow 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"HR can be Submit course on the response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"HR can be Submit course on the POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"OSMAN GONI\",\r\n    \"email\": \"mitul.das@ts4u.us\",\r\n    \"phone\": \"15714231624\",\r\n    \"courses\": [\r\n        \"64533e3ba9810000196abd1d\"\r\n    ],\r\n    \"session\": \"July, 2023\",\r\n    \"reminded\": true\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/course/enroll-course/submit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"enroll-course",
																"submit"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "As an admin, I should be able to enroll on the all course",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/course/enroll-course/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"course",
														"enroll-course",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Couese Instructor",
									"item": [
										{
											"name": "As an admin, I want to see all the instructor courses",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/course/all-instructor",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"course",
														"all-instructor"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get course",
									"item": [
										{
											"name": "As an admin, I want to all the created courses",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/course/get",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"course",
														"get"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Homedata",
									"item": [
										{
											"name": "As an admin, I want to see all courses on the homedata",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"HR can be see all course on the bellow 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"HR can be see all course on the response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"HR can be see all course on the GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/course/homedata",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"course",
														"homedata"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Edit",
									"item": [
										{
											"name": "As an admin, I should be able to edit the enroll course",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Test123das\",\r\n    \"category\": \"611135f5c4ea52404a295b01\",\r\n    \"subCategory\": null,\r\n    \"language\": \"English\",\r\n    \"label\": \"\",\r\n    \"tags\": \"\",\r\n    \"shortDetail\": \"\",\r\n    \"requirements\": \"\",\r\n    \"description\": \"<p>test</p>\",\r\n    \"shortDescription\": \"<p>hi</p>\",\r\n    \"isDemo\": true,\r\n    \"image\": null,\r\n    \"price\": {\r\n        \"isFree\": true,\r\n        \"cost\": {\r\n            \"price\": 0,\r\n            \"salePrice\": 0\r\n        }\r\n    },\r\n    \"instructor\": \"611b840ada47cbf5fd9a3bca\",\r\n    \"content\": \"\",\r\n    \"type\": \"course\",\r\n    \"meta\": {\r\n        \"title\": \"Test\",\r\n        \"description\": \"fgsd\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/course/edit/{{program_couese ID}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"course",
														"edit",
														"{{program_couese ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should be able to edit any instructor on the courses",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Mitul Das\",\r\n    \"email\": \"mituldas751@gmail.com\",\r\n    \"image\": \"\",\r\n    \"about\": \"Hi\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/course/enroll/{{program_couese ID}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"course",
														"enroll",
														"{{program_couese ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an admin, I should be able to edit-lesson instructor on the courses",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"HR can be edit course on the bellow 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"HR can be edit course on the response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"HR can be edit course on the PATCH request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"lesson\": {\r\n        \"title\": \"Something 11\",\r\n        \"url\": \"https://www.youtube.com/watch?v=T8FEknMcKnA\",\r\n        \"isFree\": false,\r\n        \"duration\": 10,\r\n        \"type\": \"video\",\r\n        \"index\": 0\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/course/edit-lesson/64b3db4cc2888500197f1333/64b4cadcc2888500197f1ddf",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"course",
														"edit-lesson",
														"64b3db4cc2888500197f1333",
														"64b4cadcc2888500197f1ddf"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Bulkupload",
									"item": [
										{
											"name": "As an admin, I should be able to upload document on the bulkupload",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "/C:/Users/TS4U/Desktop/generatedBy_react.csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/api/assignment/bulkupload",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"assignment",
														"bulkupload"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add instructor",
									"item": [
										{
											"name": "As a admin, I can be able to add instructor on the courses",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Mitul Das_Test\",\r\n    \"email\": \"mitul.das@ts4u.us\",\r\n    \"image\": \"\",\r\n    \"about\": \"hi\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/course/add-instructor",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"course",
														"add-instructor"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Roadmap",
							"item": [
								{
									"name": "Create",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to create on the roadmap",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody)\r",
																	"pm.environment.set(\"program_roadmap ID\", jsonData.roadmap._id);\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([201, 200]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"programId\": \"619e3399921729545f7590c9\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/course/roadmap/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"roadmap",
																"create"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As an admin, I should not be able to create on the roadmap without the token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to create on the roadmap without the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to create on the roadmap without the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Admin should get the 'Bad Request' status code name when executing to create on the roadmap without the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to create on the roadmap without the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"//validate the response body\r",
																	"pm.test(\"Validate the response header of the request to create on the roadmap without the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"programId\": \"619e3399921729545f7590c9\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/course/roadmap/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"roadmap",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an admin, I should not be able to create on the roadmap to keeping the ProgramId field empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to create on the roadmap to keeping the ProgramId field empty\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to create on the roadmap to keeping the ProgramId field empty\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Admin should get the 'Bad Request' status code name when executing to create on the roadmap to keeping the ProgramId field empty\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Program id is required' message when executing to create on the roadmap to keeping the ProgramId field empty\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Program id is required\");\r",
																	"\r",
																	"});\r",
																	"//validate the response body\r",
																	"pm.test(\"Validate the response header of the request to create on the roadmap to keeping the ProgramId field empty\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"programId\": \"\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/course/roadmap/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"roadmap",
																"create"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Update",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to update on the roadmap",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful PATCH request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"quarters\": [\r\n        {\r\n            \"weeks\": [\r\n                {\r\n                    \"title\": \"Test\",\r\n                    \"description\": \"Mitul\",\r\n                    \"image\": \"\",\r\n                    \"color\": \"\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/course/roadmap/update/{{program_roadmap ID}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"roadmap",
																"update",
																"{{program_roadmap ID}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As an admin, I should not be able to update on the roadmap without the token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing executing to update on the roadmap without the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to update on the roadmap without the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Admin should get the 'Bad Request' status code name when executing to update on the roadmap without the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to update on the roadmap without the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"//validate the response body\r",
																	"pm.test(\"Validate the response header of the request executing to update on the roadmap without the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"quarters\": [\r\n        {\r\n            \"weeks\": [\r\n                {\r\n                    \"title\": \"Test\",\r\n                    \"description\": \"Mitul\",\r\n                    \"image\": \"\",\r\n                    \"color\": \"\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/course/roadmap/update/{{program_roadmap ID}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"roadmap",
																"update",
																"{{program_roadmap ID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an admin, I should not be able to update on the roadmap without the roadmap id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing executing to update on the roadmap without the roadmap id\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to update on the roadmap without the roadmap id\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Admin should get the 'Bad Request' status code name when executing to update on the roadmapwithout the roadmap id\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to update on the roadmap without the roadmap id\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"//validate the response body\r",
																	"pm.test(\"Validate the response header of the request executing to update on the roadmap without the roadmap id\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"quarters\": [\r\n        {\r\n            \"weeks\": [\r\n                {\r\n                    \"title\": \"Test\",\r\n                    \"description\": \"Mitul\",\r\n                    \"image\": \"\",\r\n                    \"color\": \"\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/course/roadmap/update/{{}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"roadmap",
																"update",
																"{{}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "DELETE",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to delete on the roadmap",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful DELETE request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/course/roadmap/delete/{{program_roadmap ID}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"roadmap",
																"delete",
																"{{program_roadmap ID}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As an admin, I should not  be able to delete the roadmap without the token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing executing to delete the roadmap without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to delete the roadmap without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Admin should get the 'Bad Request' status code name when executing to delete the roadmap without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to delete the roadmap without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"//validate the response body\r",
																	"pm.test(\"Validate the response header of the request executing to delete the roadmap without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/course/roadmap/delete/{{program_roadmap ID}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"roadmap",
																"delete",
																"{{program_roadmap ID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an admin, I should not  be able to delete the roadmap without the roadmap_id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing executing to delete the roadmap without the roadmap_id\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to delete the roadmap without the roadmap_id\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Admin should get the 'Bad Request' status code name when executing to delete the roadmap without the roadmap_id\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Something went wrong' message when executing to delete the roadmap without the roadmap_id\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
																	"\r",
																	"});\r",
																	"//validate the response body\r",
																	"pm.test(\"Validate the response header of the request executing to delete the roadmap without the roadmap_id\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/course/roadmap/delete/{{}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"roadmap",
																"delete",
																"{{}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "(Need to Discuss) What learns",
							"item": [
								{
									"name": "Edit",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to edit on the whatlearns",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"key\": 12,\r\n            \"title\": \"Test\"\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/course/edit-whatlearns/619e3399921729545f7590c9",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"edit-whatlearns",
																"619e3399921729545f7590c9"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "(Couldn't find the Link) Course Benefit",
							"item": [
								{
									"name": "Add",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As a admin, I want to add the benefit Program",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"benefit\": {\r\n        \"title\": \"Test_Mitul\",\r\n        \"description\": \"Hi TS4U\",\r\n        \"icon\": \"FaCanadianMapleLeaf\"\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/course/add-benefit/619e3399921729545f7590c9",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"add-benefit",
																"619e3399921729545f7590c9"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Update",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to find on the all course",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful PATCH request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"benefit\": {\r\n        \"title\": \"Test\",\r\n        \"description\": \"Hi TS4U. \",\r\n        \"icon\": \"FaCanadianMapleLeaf\"\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/course/update-benefit/619e3399921729545f7590c9/64a92d029107670019e92b2e",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"update-benefit",
																"619e3399921729545f7590c9",
																"64a92d029107670019e92b2e"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Delete",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As a admin, I want to delete the benefit  course program",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful DELETE request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    {\r\n        \"_id\": \"64a92d029107670019e92b2e\",\r\n        \"title\": \"Test_Mitul\",\r\n        \"description\": \"Hi TS4U\",\r\n        \"icon\": \"FaCanadianMapleLeaf\"\r\n    }\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/course/delete-benefit/619e3399921729545f7590c9/64a92c5a9107670019e92b2c",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"course",
																"delete-benefit",
																"619e3399921729545f7590c9",
																"64a92c5a9107670019e92b2c"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Questions, Categories, Tools, TS4U Interview Dictionary",
					"item": [
						{
							"name": "Categories",
							"item": [
								{
									"name": "Create",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to create on the categories",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody)\r",
																	"pm.environment.set(\"interview_category_id\", jsonData.category._id);\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Created\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"Test\",\r\n    \"image\": \"\",\r\n    \"index\": \"10\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/category/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"category",
																"create"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As an admin, I should be able to create the categories without the token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to create the categories without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing  to create the categories without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Admin should get the 'Bad Request' status code name when executing to create the categories without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to create the categories without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"//validate the response body\r",
																	"pm.test(\"Validate the response header of the request to create the categories without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"Test\",\r\n    \"image\": \"\",\r\n    \"index\": \"10\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/category/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"category",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an admin, I should be able to create the categories to keeping the name field empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to create the categories to keeping the name field empty\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing  to create the categories to keeping the name field empty\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Admin should get the 'Bad Request' status code name when executing to create the categories to keeping the name field empty\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Name is required' message when executing to create the categories to keeping the name field empty\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Name is required\");\r",
																	"\r",
																	"});\r",
																	"//validate the response body\r",
																	"pm.test(\"Validate the response header of the request to create the categories to keeping the name field empty\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"\",\r\n    \"image\": \"\",\r\n    \"index\": \"10\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/category/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"category",
																"create"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Get all",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to get all the interview category",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful DELETE request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/category/getall",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"category",
																"getall"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an admin, I should be able to get all the interview questions",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"HR can be see all catagory on the bellow 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"HR can be see all catagory on the response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"HR can be see all catagory on the GET request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/question/getall",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"question",
																"getall"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As an admin, I should not be able to get all the interview category without inputting the token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to get all the interview category without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing  to get all the interview category without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the interview category without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the interview category without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"//validate the response body\r",
																	"pm.test(\"Validate the response header of the request to get all the interview category without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/category/getall",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"category",
																"getall"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an admin, I should not be able to get all the interview questions without inputting the token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to get all the interview questions without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing  to get all the interview questions without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Admin should get the 'Bad Request' status code name when executing to get all the interview questions without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the interview questions without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"//validate the response body\r",
																	"pm.test(\"Validate the response header of the request to get all the interview questions without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/question/getall",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"question",
																"getall"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Update",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As a admin, I want to update the user category",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful PATCH request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"Test12\",\r\n    \"image\": \"\",\r\n    \"index\": 10\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/category/update/{{interview_category_id}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"category",
																"update",
																"{{interview_category_id}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As a admin, I should not be able to update the interview category without inputting the token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to update the interview category without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to update the interview category without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Admin should get the 'Bad Request' status code name when executing to update the interview category without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to update the interview category without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"//validate the response body\r",
																	"pm.test(\"Validate the response header of the request to update the interview category without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"Test12\",\r\n    \"image\": \"\",\r\n    \"index\": 10\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/category/update/{{interview_category_id}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"category",
																"update",
																"{{interview_category_id}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an admin, I should not be able to update the interview category to keeping the name field empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to update the interview category without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to update the interview category without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Admin should get the 'Bad Request' status code name when executing to update the interview category without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Name is required' message when executing to update the interview category without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Name is required\");\r",
																	"\r",
																	"});\r",
																	"//validate the response body\r",
																	"pm.test(\"Validate the response header of the request to update the interview category without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"\",\r\n    \"image\": \"\",\r\n    \"index\": 10\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/category/update/{{interview_category_id}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"category",
																"update",
																"{{interview_category_id}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Delete",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "Admin should be able to delete the interview category",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful DELETE request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/category/delete/{{interview_category_id}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"category",
																"delete",
																"{{interview_category_id}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "Admin should not be able to delete the interview category without inputting the token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to delete the interview category without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to delete the interview category without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Admin should get the 'Bad Request' status code name when executing to delete the interview category without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to delete the interview category without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"//validate the response body\r",
																	"pm.test(\"Validate the response header of the request to delete the interview category without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/category/delete/{{interview_category_id}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"category",
																"delete",
																"{{interview_category_id}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Admin should not be able to delete the interview category without the interview_category_id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to delete the interview category without the interview category id\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to delete the interview category without the interview category id\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Admin should get the 'Bad Request' status code name when executing to delete the interview category without the interview category id\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Something went wrong' message when executing to delete the interview category without the interview category id\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
																	"\r",
																	"});\r",
																	"//validate the response body\r",
																	"pm.test(\"Validate the response header of the request to delete the interview category without the interview category id\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/category/delete/{}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"category",
																"delete",
																"{}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Tools",
							"item": [
								{
									"name": "Create",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to create the user tools",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody)\r",
																	"pm.environment.set(\"Program Tools create ID\", jsonData.tool._id);\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"test\",\r\n    \"image\": \"\",\r\n    \"index\": 0\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/tool/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"tool",
																"create"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As an admin, I should not be able to create the user tools without inputting the token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to create the user tools without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to create the user tools without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to create the user tools without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to create the user tools without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Validate the response header of the request to create the user tools without inputting the title\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"test\",\r\n    \"image\": \"\",\r\n    \"index\": 0\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/tool/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"tool",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an admin, I should not be able to create the user tools to keeping the name field empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to create the user tools to keeping the name field empty\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to create the user tools to keeping the name field empty\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to create the user tools to keeping the name field empty\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Something went wrong' message when executing to create the user tools to keeping the name field empty\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Something went wrong\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Validate the response header of the request to create the user tools to keeping the name field empty\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"\",\r\n    \"image\": \"\",\r\n    \"index\": 0\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/tool/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"tool",
																"create"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Get all",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As a admin, I should be able to get  all the tool",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful GET request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/tool/getall",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"tool",
																"getall"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As a admin, I should not be able to get  all the tools without the token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to get all the tools without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to get all the tools without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to get all the tools without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to get all the tools without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Validate the response header of the request to get all the tools without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/tool/getall",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"tool",
																"getall"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Delete",
									"item": [
										{
											"name": "As a admin, I can be able to delete the interview tools",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful DELETE request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/ts4u-interview/tool/delete/{{Program Tools create ID}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"ts4u-interview",
														"tool",
														"delete",
														"{{Program Tools create ID}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Questions",
							"item": [
								{
									"name": "Create",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able create the interview question",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody)\r",
																	"pm.environment.set(\"interview_question_id\", jsonData.question._id);\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Created\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful GET request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"test\",\r\n    \"answer\": \"\",\r\n    \"categories\": [\r\n        \"6330af7c3745a55d8c96af07\"\r\n    ],\r\n    \"tools\": [\r\n        \"64a284332ab66c0019ade93b\"\r\n    ],\r\n    \"tags\": [\r\n        \"question\"\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/question/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"question",
																"create"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As an admin, I should not be able to create the interview question without the token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to create the interview question without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to create the interview question without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to create the interview question without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to create the interview question without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Validate the response header of the request to create the interview question without inputting the title\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"test\",\r\n    \"answer\": \"\",\r\n    \"categories\": [\r\n        \"6330af7c3745a55d8c96af07\"\r\n    ],\r\n    \"tools\": [\r\n        \"64a284332ab66c0019ade93b\"\r\n    ],\r\n    \"tags\": [\r\n        \"question\"\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/question/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"question",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an admin, I should be not be able to create the interview question to keeping the name field empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to create the interview question to keeping the name field empty\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to create the interview question to keeping the name field empty\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to create the interview question to keeping the name field empty\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Title is required' message when executing to create the interview question to keeping the name field empty\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Title is required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Validate the response header of the request to create the interview question to keeping the name field empty\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"\",\r\n    \"answer\": \"\",\r\n    \"categories\": [\r\n        \"6330af7c3745a55d8c96af07\"\r\n    ],\r\n    \"tools\": [\r\n        \"64a284332ab66c0019ade93b\"\r\n    ],\r\n    \"tags\": [\r\n        \"question\"\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/question/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"question",
																"create"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Update",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to update the interview questions",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful PATCH request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"Test123\",\r\n    \"answer\": \"\",\r\n    \"categories\": [\r\n        \"6330af7c3745a55d8c96af07\"\r\n    ],\r\n    \"tools\": [\r\n        \"64a284332ab66c0019ade93b\"\r\n    ],\r\n    \"tags\": [\r\n        \"question\"\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/question/update/{{interview_question_id}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"question",
																"update",
																"{{interview_question_id}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As an admin, I should not be able to update the interview questions without inputting the token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to update the interview questions without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to update the interview questions without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to update the interview questions without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to update the interview questions without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to update the interview questions without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"Test123\",\r\n    \"answer\": \"\",\r\n    \"categories\": [\r\n        \"6330af7c3745a55d8c96af07\"\r\n    ],\r\n    \"tools\": [\r\n        \"64a284332ab66c0019ade93b\"\r\n    ],\r\n    \"tags\": [\r\n        \"question\"\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/question/update/{{interview_question_id}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"question",
																"update",
																"{{interview_question_id}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an admin, I should not be able to update the interview questions to keeping the title field empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing  to update the interview questions to keeping the title field empty\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to update the interview questions to keeping the title field empty\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to update the interview questions to keeping the title field empty\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Title is required' message when executing  to update the interview questions to keeping the title field empty\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Title is required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request  to update the interview questions to keeping the title field empty\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"\",\r\n    \"answer\": \"\",\r\n    \"categories\": [\r\n        \"6330af7c3745a55d8c96af07\"\r\n    ],\r\n    \"tools\": [\r\n        \"64a284332ab66c0019ade93b\"\r\n    ],\r\n    \"tags\": [\r\n        \"question\"\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/question/update/{{interview_question_id}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"question",
																"update",
																"{{interview_question_id}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Delete",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to delete the interview question",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful DELETE request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/question/delete/{{interview_question_id}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"question",
																"delete",
																"{{interview_question_id}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As an admin, I should be able to delete the interview question without the token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing  to delete the interview question without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to delete the interview question without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to delete the interview question without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to delete the interview question without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\") ;\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to delete the interview question without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/question/delete/{{interview_question_id}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"question",
																"delete",
																"{{interview_question_id}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an admin, I should be able to delete the interview question without the id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to delete the interview question without the interview_id\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to delete the interview question without the interview_id\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to delete the interview question without the interview_id\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to delete the interview question without the interview_id\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\") ;\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to delete the interview question without the interview_id\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/question/delete/{{}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"question",
																"delete",
																"{{}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Sync Technical Quetion",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I should be able to create sync-technical interview questions",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful GET request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"success\": true,\r\n    \"count\": 0\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/question/sync-technical",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"question",
																"sync-technical"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As an admin, I should not be able to create sync-technical interview questions without the token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Admin should get the '400' status code when executing to create sync-technical interview questions without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Admin should get the response below 2000 ms when executing to create sync-technical interview questions without inputting the token without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Content writer should get the 'Bad Request' status code name when executing to create sync-technical interview questions without inputting the token without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"Admin should get the 'Authorization required' message when executing to create sync-technical interview questions without inputting the token without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Validate the response header of the request to create sync-technical interview questions without inputting the token without inputting the title\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"success\": true,\r\n    \"count\": 0\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/question/sync-technical",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"question",
																"sync-technical"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Complete quetion",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As a student, I want to auto complete of the previous interview question",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful GET request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl_user}}/api/ts4u-interview/question/autocomplete?query=something",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"question",
																"autocomplete"
															],
															"query": [
																{
																	"key": "query",
																	"value": "something"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As a student, I won't  be able to complete of the previous interview question",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful GET request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl_user}}/api/ts4u-interview/question/autocomplete?query=something",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"question",
																"autocomplete"
															],
															"query": [
																{
																	"key": "query",
																	"value": "something"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Initial data",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As an admin, I want to find the students interview question",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful GET request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/ts4u-interview/initialdata",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"ts4u-interview",
																"initialdata"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "All Assignments",
					"item": [
						{
							"name": "See all assignment",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an admin, I want to view the all submitted assignment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/assignment/all",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"assignment",
														"all"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Submission answer",
							"item": [
								{
									"name": "As an admin, I want to review on the interview answer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/assignment/answer/submissionusers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"assignment",
												"answer",
												"submissionusers"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Byuser answer",
							"item": [
								{
									"name": "As an admin, I want to submit the all byuser answer.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/assignment/answer/byuser/{{Program all assingment create ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"assignment",
												"answer",
												"byuser",
												"{{Program all assingment create ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Reply",
							"item": [
								{
									"name": "As an admin, I want to reply the students assingment.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"text\": \"abca\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/assignment/reply/{{Program all assingment create ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"assignment",
												"reply",
												"{{Program all assingment create ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "As an admin, I want to update on the submitted answer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful PATCH request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/assignment/update/submission/{{Program all assingment create ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"assignment",
												"update",
												"submission",
												"{{Program all assingment create ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, I want to edit the  student's assignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"question\": \"test 411\",\r\n    \"mark\": 100,\r\n    \"category\": \"task\",\r\n    \"isActive\": true,\r\n    \"attachments\": [],\r\n    \"answer\": \"\",\r\n    \"groups\": [\r\n        \"62c052e7e040fb2303525006\"\r\n    ],\r\n    \"description\": \"description for test\",\r\n    \"workshop\": \"2023-03-20T20:07:04.000Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/assignment/edit/{{Program all assingment create ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"assignment",
												"edit",
												"{{Program all assingment create ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bulkupdate",
							"item": [
								{
									"name": "As an admin,I should be able submitted the bulk update.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/TS4U/Desktop/assignment_bulk.csv"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/assignment/bulkupdate",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"assignment",
												"bulkupdate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Assignment answers",
							"item": [
								{
									"name": "As an admin, I want to see the assignment answers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/assignment/asnwers/{{Program all assingment create ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"assignment",
												"asnwers",
												"{{Program all assingment create ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "As a admin, I should be to able delete the assignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful DELETE request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/assignment/delete/{{Program all assingment create ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"assignment",
												"delete",
												"{{Program all assingment create ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Feedback, Job SUpport, Shout Out, Issues, Day 2 Day Activities",
					"item": [
						{
							"name": "filter-user",
							"item": [
								{
									"name": "As an admin, I can be able to filter on the user day to day activities",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"program\": \"\",\r\n    \"session\": \"\",\r\n    \"query\": \"mitul\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/calender/filter-user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"calender",
												"filter-user"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Post-admin",
							"item": [
								{
									"name": "As an admin, I want to add new post on feed details",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"test\",\r\n    \"description\": \"\",\r\n    \"attachments\": [],\r\n    \"category\": \"issues\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/communication/post-admin/{{Program connection create}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"communication",
												"post-admin",
												"{{Program connection create}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Reply",
							"item": [
								{
									"name": "As an admin, I want to reply the post on the student uploaded documents",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"text\": \"hi\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/communication/reply/{{Program connection create}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"communication",
												"reply",
												"{{Program connection create}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get all",
							"item": [
								{
									"name": "As an admin, I should be able to see all the day 2 day activities",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 10\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/communication/day2day/getall",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"communication",
												"day2day",
												"getall"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Feedback",
							"item": [
								{
									"name": "Admin",
									"item": [
										{
											"name": "As a admin, I can be able to feedback on the student's day 2 day activities",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"success\": true,\r\n    \"posts\": [\r\n        {\r\n            \"description\": \"<p>Enter Description</p>\",\r\n            \"attachments\": [],\r\n            \"_id\": \"624b3432ec662560b66dbb4e\",\r\n            \"owner\": \"62436829ec662560b66dbb10\",\r\n            \"title\": \"Enter Title\",\r\n            \"sender\": {\r\n                \"profilePicture\": \"https://lh3.googleusercontent.com/a-/AOh14GgwdhE_2ukQ7Ecrbb4-dmzsQlYJRCcCjh0VtEPxRg=s96-c\",\r\n                \"lastName\": \"Ridoy\",\r\n                \"_id\": \"61df3eb9ff3ca9204cb4a7f4\",\r\n                \"email\": \"murshalin98@gmail.com\",\r\n                \"firstName\": \"Murshalin\",\r\n                \"fullName\": \"Murshalin Ridoy\"\r\n            },\r\n            \"category\": \"feedback\",\r\n            \"replies\": [\r\n                {\r\n                    \"_id\": \"624b3438ec662560b66dbb50\",\r\n                    \"text\": \"ddf\",\r\n                    \"user\": {\r\n                        \"profilePicture\": \"https://lh3.googleusercontent.com/a-/AOh14GgwdhE_2ukQ7Ecrbb4-dmzsQlYJRCcCjh0VtEPxRg=s96-c\",\r\n                        \"lastName\": \"Ridoy\",\r\n                        \"_id\": \"61df3eb9ff3ca9204cb4a7f4\",\r\n                        \"email\": \"murshalin98@gmail.com\",\r\n                        \"firstName\": \"Murshalin\",\r\n                        \"fullName\": \"Murshalin Ridoy\"\r\n                    },\r\n                    \"date\": \"2022-04-04T18:08:56.727Z\"\r\n                },\r\n                {\r\n                    \"_id\": \"64b01f4c9107670019e955a7\",\r\n                    \"text\": \"test\",\r\n                    \"user\": {\r\n                        \"profilePicture\": \"\",\r\n                        \"lastName\": \"Awal\",\r\n                        \"_id\": \"64ae1604c126280019941bd3\",\r\n                        \"email\": \"ayman.awal36@gmail.com\",\r\n                        \"firstName\": \"Ayman\",\r\n                        \"fullName\": \"Ayman Awal\"\r\n                    },\r\n                    \"date\": \"2023-07-13T15:59:08.865Z\"\r\n                },\r\n                {\r\n                    \"_id\": \"64b3b842c2888500197f0fa6\",\r\n                    \"text\": \"test\",\r\n                    \"user\": {\r\n                        \"profilePicture\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/1686652368085-WhatsApp-Image-\",\r\n                        \"lastName\": \"Das\",\r\n                        \"_id\": \"64883e7837a20c00197f0a33\",\r\n                        \"email\": \"mitul.das@ts4u.us\",\r\n                        \"firstName\": \"Mitul\",\r\n                        \"fullName\": \"Mitul Das\"\r\n                    },\r\n                    \"date\": \"2023-07-16T09:28:34.944Z\"\r\n                }\r\n            ],\r\n            \"createdAt\": \"2022-04-04T18:08:50.783Z\",\r\n            \"updatedAt\": \"2023-07-16T09:28:34.938Z\",\r\n            \"__v\": 0\r\n        }\r\n    ],\r\n    \"count\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/communication/allposts/feedback/{{Program connection create}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"communication",
														"allposts",
														"feedback",
														"{{Program connection create}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Track",
					"item": [
						{
							"name": "Update track",
							"item": [
								{
									"name": "As an admin, I want to update the chapter of course reivew",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful PATCH request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"chapter\": {\r\n        \"status\": \"approved\",\r\n        \"rejectReason\": \"\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/track/update/6453d052ce7ccd0019e47225",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"track",
												"update",
												"6453d052ce7ccd0019e47225"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Submit agreement",
							"item": [
								{
									"name": "As an admin, I want to submit agreement on the course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"personalInformation\": {\r\n        \"firstName\": \"Mitul\",\r\n        \"lastName\": \"Das\",\r\n        \"middleName\": \"\",\r\n        \"otherName\": \"\",\r\n        \"dob\": \"'2003-01-01T08:51:10Z'\",\r\n        \"gender\": \"male\",\r\n        \"ssn\": \"\"\r\n    },\r\n    \"instantContact\": {\r\n        \"phone\": \"\",\r\n        \"whatsApp\": \"\",\r\n        \"outlook\": \"\",\r\n        \"address1\": \"\",\r\n        \"address2\": \"\",\r\n        \"city\": \"\",\r\n        \"state\": \"\",\r\n        \"zip\": \"\"\r\n    },\r\n    \"secondaryContact\": {\r\n        \"fullName\": \"\",\r\n        \"address1\": \"\",\r\n        \"address2\": \"\",\r\n        \"city\": \"\",\r\n        \"state\": \"\",\r\n        \"zip\": \"\",\r\n        \"phone\": \"\"\r\n    },\r\n    \"education\": {\r\n        \"education\": \"\",\r\n        \"majorProgram\": \"\",\r\n        \"occupation\": \"\",\r\n        \"companyName\": \"\",\r\n        \"experience\": \"\",\r\n        \"languageProficiency\": \"\"\r\n    },\r\n    \"payment\": {\r\n        \"method\": \"\",\r\n        \"bankName\": \"\",\r\n        \"acountType\": \"\",\r\n        \"acountNumber\": \"\",\r\n        \"routingNumber\": \"\"\r\n    },\r\n    \"additionalInfo\": {\r\n        \"isVeteran\": false,\r\n        \"isFelenoy\": false,\r\n        \"hasDrivingLicense\": false,\r\n        \"hasCreditCard\": false,\r\n        \"hasDegree\": false,\r\n        \"hasAssociateDegree\": false,\r\n        \"isAuthorizeUSA\": false,\r\n        \"hasCompunerKnowledge\": false,\r\n        \"hasBasicInternetSkill\": false,\r\n        \"hasEnglishWritingSkill\": false,\r\n        \"hasSlack\": false,\r\n        \"isJoinedSlack\": false,\r\n        \"hasZoom\": false,\r\n        \"isAvailableWorkshop\": false,\r\n        \"isRefer\": true,\r\n        \"referName\": \"dfgbdf\"\r\n    },\r\n    \"document\": {\r\n        \"remark\": \"\",\r\n        \"idCard\": \"\",\r\n        \"signature\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1689574789001-blob\",\r\n        \"check\": \"\",\r\n        \"otherDocument\": \"\"\r\n    },\r\n    \"enrolledProgram\": {\r\n        \"program\": \"61113628c4ea52404a295b03\",\r\n        \"session\": \"61113589c4ea52404a295afe\"\r\n    },\r\n    \"totalAmount\": null,\r\n    \"termsAcepted\": true,\r\n    \"jobSupport\": \"2 month\",\r\n    \"amountToPay\": \"2nd month = 3000$\",\r\n    \"email\": \"mitul.das@ts4u.us\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/track/submitagreement/6453d052ce7ccd0019e47225",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"track",
												"submitagreement",
												"6453d052ce7ccd0019e47225"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Job market",
							"item": [
								{
									"name": "As an admin, I want to submit the post on job market side",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"personalInformation\": {\r\n        \"firstName\": \"Mitul\",\r\n        \"lastName\": \"Das\",\r\n        \"middleName\": \"\",\r\n        \"otherName\": \"\",\r\n        \"dob\": \"'2003-01-01T08:51:10Z'\",\r\n        \"gender\": \"male\",\r\n        \"ssn\": \"\"\r\n    },\r\n    \"instantContact\": {\r\n        \"phone\": \"\",\r\n        \"whatsApp\": \"\",\r\n        \"outlook\": \"\",\r\n        \"address1\": \"\",\r\n        \"address2\": \"\",\r\n        \"city\": \"\",\r\n        \"state\": \"\",\r\n        \"zip\": \"\"\r\n    },\r\n    \"secondaryContact\": {\r\n        \"fullName\": \"\",\r\n        \"address1\": \"\",\r\n        \"address2\": \"\",\r\n        \"city\": \"\",\r\n        \"state\": \"\",\r\n        \"zip\": \"\",\r\n        \"phone\": \"\"\r\n    },\r\n    \"education\": {\r\n        \"education\": \"\",\r\n        \"majorProgram\": \"\",\r\n        \"occupation\": \"\",\r\n        \"companyName\": \"\",\r\n        \"experience\": \"\",\r\n        \"languageProficiency\": \"\"\r\n    },\r\n    \"payment\": {\r\n        \"method\": \"\",\r\n        \"bankName\": \"\",\r\n        \"acountType\": \"\",\r\n        \"acountNumber\": \"\",\r\n        \"routingNumber\": \"\"\r\n    },\r\n    \"additionalInfo\": {\r\n        \"isVeteran\": false,\r\n        \"isFelenoy\": false,\r\n        \"hasDrivingLicense\": false,\r\n        \"hasCreditCard\": false,\r\n        \"hasDegree\": false,\r\n        \"hasAssociateDegree\": false,\r\n        \"isAuthorizeUSA\": false,\r\n        \"hasCompunerKnowledge\": false,\r\n        \"hasBasicInternetSkill\": false,\r\n        \"hasEnglishWritingSkill\": false,\r\n        \"hasSlack\": false,\r\n        \"isJoinedSlack\": false,\r\n        \"hasZoom\": false,\r\n        \"isAvailableWorkshop\": false,\r\n        \"isRefer\": true,\r\n        \"referName\": \"dfgbdf\"\r\n    },\r\n    \"document\": {\r\n        \"remark\": \"\",\r\n        \"idCard\": \"\",\r\n        \"signature\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1689574789001-blob\",\r\n        \"check\": \"\",\r\n        \"otherDocument\": \"\"\r\n    },\r\n    \"enrolledProgram\": {\r\n        \"program\": \"61113628c4ea52404a295b03\",\r\n        \"session\": \"61113589c4ea52404a295afe\"\r\n    },\r\n    \"totalAmount\": null,\r\n    \"termsAcepted\": true,\r\n    \"jobSupport\": \"2 month\",\r\n    \"amountToPay\": \"2nd month = 3000$\",\r\n    \"email\": \"mitul.das@ts4u.us\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/track/submitjobmarket/6453d052ce7ccd0019e47225",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"track",
												"submitjobmarket",
												"6453d052ce7ccd0019e47225"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Interview",
							"item": [
								{
									"name": "As an admin, I want to call  interview on the job market place",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"personalInformation\": {\r\n        \"firstName\": \"Mitul\",\r\n        \"lastName\": \"Das\",\r\n        \"middleName\": \"\",\r\n        \"otherName\": \"\",\r\n        \"dob\": \"'2003-01-01T08:51:10Z'\",\r\n        \"gender\": \"male\",\r\n        \"ssn\": \"\"\r\n    },\r\n    \"instantContact\": {\r\n        \"phone\": \"\",\r\n        \"whatsApp\": \"\",\r\n        \"outlook\": \"\",\r\n        \"address1\": \"\",\r\n        \"address2\": \"\",\r\n        \"city\": \"\",\r\n        \"state\": \"\",\r\n        \"zip\": \"\"\r\n    },\r\n    \"secondaryContact\": {\r\n        \"fullName\": \"\",\r\n        \"address1\": \"\",\r\n        \"address2\": \"\",\r\n        \"city\": \"\",\r\n        \"state\": \"\",\r\n        \"zip\": \"\",\r\n        \"phone\": \"\"\r\n    },\r\n    \"education\": {\r\n        \"education\": \"\",\r\n        \"majorProgram\": \"\",\r\n        \"occupation\": \"\",\r\n        \"companyName\": \"\",\r\n        \"experience\": \"\",\r\n        \"languageProficiency\": \"\"\r\n    },\r\n    \"payment\": {\r\n        \"method\": \"\",\r\n        \"bankName\": \"\",\r\n        \"acountType\": \"\",\r\n        \"acountNumber\": \"\",\r\n        \"routingNumber\": \"\"\r\n    },\r\n    \"additionalInfo\": {\r\n        \"isVeteran\": false,\r\n        \"isFelenoy\": false,\r\n        \"hasDrivingLicense\": false,\r\n        \"hasCreditCard\": false,\r\n        \"hasDegree\": false,\r\n        \"hasAssociateDegree\": false,\r\n        \"isAuthorizeUSA\": false,\r\n        \"hasCompunerKnowledge\": false,\r\n        \"hasBasicInternetSkill\": false,\r\n        \"hasEnglishWritingSkill\": false,\r\n        \"hasSlack\": false,\r\n        \"isJoinedSlack\": false,\r\n        \"hasZoom\": false,\r\n        \"isAvailableWorkshop\": false,\r\n        \"isRefer\": true,\r\n        \"referName\": \"dfgbdf\"\r\n    },\r\n    \"document\": {\r\n        \"remark\": \"\",\r\n        \"idCard\": \"\",\r\n        \"signature\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1689574789001-blob\",\r\n        \"check\": \"\",\r\n        \"otherDocument\": \"\"\r\n    },\r\n    \"enrolledProgram\": {\r\n        \"program\": \"61113628c4ea52404a295b03\",\r\n        \"session\": \"61113589c4ea52404a295afe\"\r\n    },\r\n    \"totalAmount\": null,\r\n    \"termsAcepted\": true,\r\n    \"jobSupport\": \"2 month\",\r\n    \"amountToPay\": \"2nd month = 3000$\",\r\n    \"email\": \"mitul.das@ts4u.us\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/track/submitinterview/6453d052ce7ccd0019e47225",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"track",
												"submitinterview",
												"6453d052ce7ccd0019e47225"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Videos (TV Interviews Videos)",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "As an admin, I want to add on the course video",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"Program videos create ID\", jsonData.video._id);\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"Test11\",\r\n    \"url\": \"https://www.youtube.com/watch?v=T8FEknMcKnA\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/tv/add",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"tv",
												"add"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "See all",
							"item": [
								{
									"name": "As an admin, I want to see on the all course video",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/tv/getall",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"tv",
												"getall"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "As an admin, I want to edit on the course video",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"Test_121\",\r\n    \"url\": \"https://www.youtube.com/watch?v=T8FEknMcKnA\"\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/tv/edit/64cb735b0a7ee70019aa8f95",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"tv",
												"edit",
												"64cb735b0a7ee70019aa8f95"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "As an admin, I want to delete the course video",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"HR can be delete on the bellow 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"HR can be delete on the response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"HR can be delete on the Post request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/tv/delete/{{Program videos create ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"tv",
												"delete",
												"{{Program videos create ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Group",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "As an admin, I want to create group  on the program",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"Program group create ID\", jsonData.group._id);\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"Test\",\r\n    \"users\": [\r\n        \"64883e7837a20c00197f0a33\"\r\n    ],\r\n    \"activeStatus\": {\r\n        \"isActive\": true,\r\n        \"activeUntill\": \"2023-07-12T13:48:31+06:00\"\r\n    },\r\n    \"programs\": [\r\n        \"61113628c4ea52404a295b03\"\r\n    ],\r\n    \"sessions\": [\r\n        \"61113557c4ea52404a295afd\"\r\n    ],\r\n    \"plans\": [\r\n        \"629a689380c4ff665817af73\"\r\n    ],\r\n    \"category\": \"technicalTest\",\r\n    \"description\": \"cas\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/group/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"group",
												"create"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "See all group",
							"item": [
								{
									"name": "As an admin, I want to see all the group program",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/group/getall",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"group",
												"getall"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "As an admin, I want to edit on the group program",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful PATCH request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"Test1122\",\r\n    \"users\": [\r\n        \"64883e7837a20c00197f0a33\"\r\n    ],\r\n    \"activeStatus\": {\r\n        \"isActive\": true,\r\n        \"activeUntill\": \"2023-07-12T07:48:31.000Z\"\r\n    },\r\n    \"programs\": [\r\n        \"61113628c4ea52404a295b03\"\r\n    ],\r\n    \"sessions\": [\r\n        \"61113557c4ea52404a295afd\"\r\n    ],\r\n    \"plans\": [\r\n        \"629a689380c4ff665817af73\"\r\n    ],\r\n    \"category\": \"technicalTest\",\r\n    \"description\": \"cas\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/group/edit/{{Program group create ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"group",
												"edit",
												"{{Program group create ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "As an admin, I want to delete on the group program",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"HR can be delete on the bellow 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"HR can be delete on the response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"HR can be delete on the DELETE request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/group/delete/{{Program group create ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"group",
												"delete",
												"{{Program group create ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Terms",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "As an admin, I want to create on the terms and conditions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"Program terms create ID\", jsonData.term._id);\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"Test\",\r\n    \"isActive\": true,\r\n    \"programs\": [\r\n        \"61113628c4ea52404a295b03\"\r\n    ],\r\n    \"sessions\": [\r\n        \"61113557c4ea52404a295afd\"\r\n    ],\r\n    \"description\": \"<p>fgg</p>\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/terms-conditions/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"terms-conditions",
												"create"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "See all tearms",
							"item": [
								{
									"name": "As an admin, I want to see on the all terms and conditions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 10,\r\n    \"sort_by\": \"newest\",\r\n    \"program\": \"\",\r\n    \"session\": \"\",\r\n    \"query\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/terms-conditions/all",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"terms-conditions",
												"all"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "As an admin, I want to edit on the individual terms and conditions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful PATCH request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"Test1122\",\r\n    \"isActive\": true,\r\n    \"programs\": [\r\n        \"61113628c4ea52404a295b03\"\r\n    ],\r\n    \"sessions\": [\r\n        \"61113557c4ea52404a295afd\"\r\n    ],\r\n    \"description\": \"<p>fgg</p>\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/terms-conditions/edit/{{Program terms create ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"terms-conditions",
												"edit",
												"{{Program terms create ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Promo Codes",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "As a admin, I want to create the all promo codes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"Program terms promocode ID\", jsonData.promo._id);\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"Test_MItul\",\r\n    \"description\": \"hi\",\r\n    \"quantity\": \"-2\",\r\n    \"expireDate\": \"2023-07-31T00:00:07+06:00\",\r\n    \"code\": \"ABC123\",\r\n    \"amount\": \"1000\",\r\n    \"type\": \"fixed\",\r\n    \"isActive\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://staging-api.ts4u.us/api/promo/create",
											"protocol": "https",
											"host": [
												"staging-api",
												"ts4u",
												"us"
											],
											"path": [
												"api",
												"promo",
												"create"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "See all",
							"item": [
								{
									"name": "As a admin, I want to see the all promo codes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/promo/getall",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"promo",
												"getall"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "As a admin, I want to edit the all promo codes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful PATCH request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"test1122\",\r\n    \"description\": \"\",\r\n    \"quantity\": \"3\",\r\n    \"expireDate\": \"2022-12-23T18:00:00.000Z\",\r\n    \"code\": \"\",\r\n    \"amount\": 100,\r\n    \"type\": \"fixed\",\r\n    \"isActive\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/promo/edit/{{Program terms promocode ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"promo",
												"edit",
												"{{Program terms promocode ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Promo details",
							"item": [
								{
									"name": "As a admin, I want to see details on the all promo codes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://staging-api.ts4u.us/api/promo/details/{{Program terms promocode ID}}",
											"protocol": "https",
											"host": [
												"staging-api",
												"ts4u",
												"us"
											],
											"path": [
												"api",
												"promo",
												"details",
												"{{Program terms promocode ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Gift Cards",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "As a admin, I want to create the all gift cards",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"Program terms giftcard create ID\", jsonData.gift._id);\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"test\",\r\n    \"description\": \"sdas\",\r\n    \"code\": \"gwe\",\r\n    \"amount\": \"3000\",\r\n    \"user\": \"649429e537a20c00197f1a8e\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/gift/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"gift",
												"create"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "See all",
							"item": [
								{
									"name": "As a admin, I want to see the all gift cards",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/gift/getall",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"gift",
												"getall"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "As a admin, I want to edit the all gift cards",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful PATCH request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"amazon123\",\r\n    \"description\": \"amzon gift card\",\r\n    \"code\": \"\",\r\n    \"amount\": 100,\r\n    \"user\": \"61114c9fc550e69e8cbc2d38\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/gift/edit/{{Program terms giftcard create ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"gift",
												"edit",
												"{{Program terms giftcard create ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Details",
							"item": [
								{
									"name": "As a admin, I want to see  the details of all gift cards",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/gift/details/{{Program terms giftcard create ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"gift",
												"details",
												"{{Program terms giftcard create ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "As a admin, I want to see  the delete on the gift cards",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful DELETE request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/gift/delete/{{Program terms giftcard create ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"gift",
												"delete",
												"{{Program terms giftcard create ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}