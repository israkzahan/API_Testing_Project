{
	"info": {
		"_postman_id": "a99c7cd1-a62f-46de-9961-351e4912555c",
		"name": "User Panel",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28411780",
		"_collection_link": "https://universal-meadow-6789.postman.co/workspace/TS4U-API-Collections~f56101d1-df6e-4818-8604-3687e61deb90/collection/20098857-a99c7cd1-a62f-46de-9961-351e4912555c?action=share&source=collection_link&creator=28411780"
	},
	"item": [
		{
			"name": "Common service",
			"item": [
				{
					"name": "Desktop App",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an user, I want to create the desktop app",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"common_service desktop_create_id\", jsonData.app._id);\r",
															"\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
															"});\r",
															"pm.test(\"Response time is less than 200ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"version\": \"1.02\",\r\n    \"platform\": \"win\",\r\n    \"releaseInfo\": \"\",\r\n    \"url\": \"https://portal-staging.ts4u.us/user/profile?tab=course\",\r\n    \"isMandatory\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/app/desktop/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"app",
														"desktop",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an user, I shouldn't be able to create the desktop app to give without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"As a user should get the '400' status code when executing to create desktop app without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"As a user should get the response below 2000 ms when executing to create desktop app without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"As a user should get the 'Bad Request' status code name when executing to create desktop app without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"As a user should get the 'Authorization required' message when executing to create desktop app without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create desktop app without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"version\": \"1.02\",\r\n    \"platform\": \"win\",\r\n    \"releaseInfo\": \"\",\r\n    \"url\": \"https://portal-staging.ts4u.us/user/profile?tab=course\",\r\n    \"isMandatory\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging-api.ts4u.us/api/app/desktop/create",
													"protocol": "https",
													"host": [
														"staging-api",
														"ts4u",
														"us"
													],
													"path": [
														"api",
														"app",
														"desktop",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an user, I shouldn't be able to create the desktop app to give without version",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"As a user should get the '400' status code when executing to create desktop app without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"As a user should get the response below 2000 ms when executing to create desktop app without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"As a user should get the 'Bad Request' status code name when executing to create desktop app without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"As a user should get the 'Version is required' message when executing to create desktop app without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Version is required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create desktop app without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"version\": \"1.02\",\r\n    \"platform\": \"win\",\r\n    \"releaseInfo\": \"\",\r\n    \"url\": \"https://portal-staging.ts4u.us/user/profile?tab=course\",\r\n    \"isMandatory\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging-api.ts4u.us/api/app/desktop/create",
													"protocol": "https",
													"host": [
														"staging-api",
														"ts4u",
														"us"
													],
													"path": [
														"api",
														"app",
														"desktop",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an user, I shouldn't be able to create the desktop app to give without url",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"As a user should get the '400' status code when executing to create desktop app without inputting the url\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"As a user should get the response below 2000 ms when executing to create desktop app without inputting the url\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"As a user should get the 'Bad Request' status code name when executing to create desktop app without inputting the url\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"As a user should get the 'Version is required' message when executing to create desktop app without inputting the url\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"url is required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create desktop app without inputting the url\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"version\": \"1.02\",\r\n    \"platform\": \"win\",\r\n    \"releaseInfo\": \"\",\r\n    \"url\": \"\",\r\n    \"isMandatory\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging-api.ts4u.us/api/app/desktop/create",
													"protocol": "https",
													"host": [
														"staging-api",
														"ts4u",
														"us"
													],
													"path": [
														"api",
														"app",
														"desktop",
														"create"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an user, I want to update the desktop app",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Successful PATCH request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"version\": \"1.021\",\r\n    \"platform\": \"win\",\r\n    \"releaseInfo\": \"\",\r\n    \"url\": \"https://portal-staging.ts4u.us/user/profile?tab=course\",\r\n    \"isMandatory\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/app/desktop/update/{{common_service desktop_create_id}}",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"app",
														"desktop",
														"update",
														"{{common_service desktop_create_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an user, I shouldn't be able to update the desktop app to give without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"As a user should get the '400' status code when executing to create desktop app without inputting the url\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"As a user should get the response below 2000 ms when executing to create desktop app without inputting the url\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"As a user should get the 'Bad Request' status code name when executing to create desktop app without inputting the url\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"As a user should get the 'Authorization required' message when executing to create desktop app without inputting the url\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create desktop app without inputting the url\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"version\": \"1.021\",\r\n    \"platform\": \"win\",\r\n    \"releaseInfo\": \"\",\r\n    \"url\": \"https://portal-staging.ts4u.us/user/profile?tab=course\",\r\n    \"isMandatory\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/app/desktop/update/{{common_service desktop_create_id}}",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"app",
														"desktop",
														"update",
														"{{common_service desktop_create_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an user, I shouldn't be able to update the desktop app to give without platform",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"As a user should get the '400' status code when executing to create desktop app without inputting the url\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"As a user should get the response below 2000 ms when executing to create desktop app without inputting the url\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"As a user should get the 'Bad Request' status code name when executing to create desktop app without inputting the url\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"As a user should get the 'platform is required' message when executing to create desktop app without inputting the url\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"platform is required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create desktop app without inputting the url\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"version\": \"1.021\",\r\n    \"platform\": \"\",\r\n    \"releaseInfo\": \"\",\r\n    \"url\": \"https://portal-staging.ts4u.us/user/profile?tab=course\",\r\n    \"isMandatory\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/app/desktop/update/{{common_service desktop_create_id}}",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"app",
														"desktop",
														"update",
														"{{common_service desktop_create_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an user, I shouldn't be able to update the desktop app to give without url",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"As a user should get the '400' status code when executing to create desktop app without inputting the url\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"As a user should get the response below 2000 ms when executing to create desktop app without inputting the url\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"As a user should get the 'Bad Request' status code name when executing to create desktop app without inputting the url\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"As a user should get the 'url is required' message when executing to create desktop app without inputting the url\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"url is required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create desktop app without inputting the url\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"version\": \"1.021\",\r\n    \"platform\": \"win\",\r\n    \"releaseInfo\": \"\",\r\n    \"url\": \"\",\r\n    \"isMandatory\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/app/desktop/update/{{common_service desktop_create_id}}",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"app",
														"desktop",
														"update",
														"{{common_service desktop_create_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an user, I shouldn't be able to update the desktop app to give without version",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"As a user should get the '400' status code when executing to create desktop app without inputting the url\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"As a user should get the response below 2000 ms when executing to create desktop app without inputting the url\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"As a user should get the 'Bad Request' status code name when executing to create desktop app without inputting the url\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"As a user should get the 'Version is required' message when executing to create desktop app without inputting the url\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Version is required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create desktop app without inputting the url\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"version\": \"\",\r\n    \"platform\": \"win\",\r\n    \"releaseInfo\": \"\",\r\n    \"url\": \"https://portal-staging.ts4u.us/user/profile?tab=course\",\r\n    \"isMandatory\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/app/desktop/update/{{common_service desktop_create_id}}",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"app",
														"desktop",
														"update",
														"{{common_service desktop_create_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an user, I want to Delete the desktop app",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response time is less than 200ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/app/desktop/delete/{{common_service desktop_create_id}}",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"app",
														"desktop",
														"delete",
														"{{common_service desktop_create_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an user, I shouldn't be able to Delete the desktop app given without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"As a user should get the '400' status code when executing to create desktop app without inputting the url\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"As a user should get the response below 2000 ms when executing to create desktop app without inputting the url\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"As a user should get the 'Bad Request' status code name when executing to create desktop app without inputting the url\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"As a user should get the 'Authorization required' message when executing to create desktop app without inputting the url\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create desktop app without inputting the url\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/app/desktop/delete/{{common_service desktop_create_id}}",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"app",
														"desktop",
														"delete",
														"{{common_service desktop_create_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Affiliate",
					"item": [
						{
							"name": "Get all",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an user, I want to getall the affiliate program",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"Affiliate_id\", jsonData.accounts[0]?._id);\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/affiliate/admin/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"affiliate",
														"admin",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an user, I shouldn't be able to getall the affiliate program given without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to delete all H-1b contents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to delete all H-1b contents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to delete all H-1b contents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Imegration spacilist should get the 'Authorization required' message when executing to delete all H-1b contents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to edit all H-1b contents without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/affiliate/admin/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"affiliate",
														"admin",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "See individual member by id",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an user, I want to get id the affiliate program",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/affiliate/admin/get/6375483ad4595666d455567d",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"affiliate",
														"admin",
														"get",
														"6375483ad4595666d455567d"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negetive",
									"item": [
										{
											"name": "As an user, I want to get id the affiliate program",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"As an user should get the '400' status code when executing to see individual member without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"As an user should get the response below 2000 ms when executing to see individual member without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"As an user should get the 'Bad Request' status code name when executing to see individual member without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"As an user  should get the 'Authorization required' message when executing to see individual member without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to see individual member without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/affiliate/admin/get/6375483ad4595666d455567d",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"affiliate",
														"admin",
														"get",
														"6375483ad4595666d455567d"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an user, I want to update the affiliate program",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"test_Mituls\",\r\n    \"accountType\": \"personal\",\r\n    \"address\": \"sdf\",\r\n    \"dob\": \"2022-11-24T20:29:31.000Z\",\r\n    \"personalExperience\": \"\",\r\n    \"photoId\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1668630579952-noti.png\",\r\n    \"company\": {\r\n        \"name\": \"\",\r\n        \"establishedYear\": null,\r\n        \"officeAddress\": \"\",\r\n        \"businessFormDocument\": \"\",\r\n        \"govtBusinessTaxId\": \"\"\r\n    },\r\n    \"questionnaire\": {\r\n        \"businessDuration\": \"5 to above year\",\r\n        \"anyBadCredit\": true,\r\n        \"anyProfessionalWebsite\": true,\r\n        \"website\": \"\",\r\n        \"anyAffiliateMarketingBefore\": false,\r\n        \"hoursPeerWeek\": \"0 to 5 hours\",\r\n        \"employeeNumber\": \"0 to 5\",\r\n        \"anyBankRuptcy\": true,\r\n        \"anyCriminalBackground\": true,\r\n        \"isAggreeToPullCredit\": true,\r\n        \"marketingMethod\": \"All\",\r\n        \"anyResearchOnTs4u\": true,\r\n        \"anyCourseFromTs4u\": true,\r\n        \"endGoal\": \"Referral bonus\",\r\n        \"isAppDownloaded\": true,\r\n        \"isLearnedOurPlatform\": true,\r\n        \"isSubscribed\": true,\r\n        \"isFbVisited\": true,\r\n        \"isExploredAlm\": false\r\n    },\r\n    \"personal\": {\r\n        \"ssn\": \"\"\r\n    },\r\n    \"status\": \"approved\",\r\n    \"rejectReason\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/affiliate/admin/update/6375483ad4595666d455567d",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"affiliate",
														"admin",
														"update",
														"6375483ad4595666d455567d"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an user, I want to update the affiliate program given without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"As an user should get the '400' status code when executing to update without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"As an user should get the response below 2000 ms when executing to update without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"As an user should get the 'Bad Request' status code name when executing to update without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"As an user  should get the 'Authorization required' message when executing to update without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to update without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"test_Mituls\",\r\n    \"accountType\": \"personal\",\r\n    \"address\": \"sdf\",\r\n    \"dob\": \"2022-11-24T20:29:31.000Z\",\r\n    \"personalExperience\": \"\",\r\n    \"photoId\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1668630579952-noti.png\",\r\n    \"company\": {\r\n        \"name\": \"\",\r\n        \"establishedYear\": null,\r\n        \"officeAddress\": \"\",\r\n        \"businessFormDocument\": \"\",\r\n        \"govtBusinessTaxId\": \"\"\r\n    },\r\n    \"questionnaire\": {\r\n        \"businessDuration\": \"5 to above year\",\r\n        \"anyBadCredit\": true,\r\n        \"anyProfessionalWebsite\": true,\r\n        \"website\": \"\",\r\n        \"anyAffiliateMarketingBefore\": false,\r\n        \"hoursPeerWeek\": \"0 to 5 hours\",\r\n        \"employeeNumber\": \"0 to 5\",\r\n        \"anyBankRuptcy\": true,\r\n        \"anyCriminalBackground\": true,\r\n        \"isAggreeToPullCredit\": true,\r\n        \"marketingMethod\": \"All\",\r\n        \"anyResearchOnTs4u\": true,\r\n        \"anyCourseFromTs4u\": true,\r\n        \"endGoal\": \"Referral bonus\",\r\n        \"isAppDownloaded\": true,\r\n        \"isLearnedOurPlatform\": true,\r\n        \"isSubscribed\": true,\r\n        \"isFbVisited\": true,\r\n        \"isExploredAlm\": false\r\n    },\r\n    \"personal\": {\r\n        \"ssn\": \"\"\r\n    },\r\n    \"status\": \"approved\",\r\n    \"rejectReason\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/affiliate/admin/update/6375483ad4595666d455567d",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"affiliate",
														"admin",
														"update",
														"6375483ad4595666d455567d"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an user, I want to update the affiliate program given without photoId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"As an user should get the '400' status code when executing to update without inputting the photoId\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"As an user should get the response below 2000 ms when executing to update without inputting the photoId\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"As an user should get the 'Bad Request' status code name when executing to update without inputting the photoId\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"As an user  should get the 'Please provide your photo Id' message when executing to update without inputting the photoId\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Please provide your photo Id\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to update without inputting the photoId\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"test_Mituls\",\r\n    \"accountType\": \"personal\",\r\n    \"address\": \"sdf\",\r\n    \"dob\": \"2022-11-24T20:29:31.000Z\",\r\n    \"personalExperience\": \"\",\r\n    \"photoId\": \"\",\r\n    \"company\": {\r\n        \"name\": \"\",\r\n        \"establishedYear\": null,\r\n        \"officeAddress\": \"\",\r\n        \"businessFormDocument\": \"\",\r\n        \"govtBusinessTaxId\": \"\"\r\n    },\r\n    \"questionnaire\": {\r\n        \"businessDuration\": \"5 to above year\",\r\n        \"anyBadCredit\": true,\r\n        \"anyProfessionalWebsite\": true,\r\n        \"website\": \"\",\r\n        \"anyAffiliateMarketingBefore\": false,\r\n        \"hoursPeerWeek\": \"0 to 5 hours\",\r\n        \"employeeNumber\": \"0 to 5\",\r\n        \"anyBankRuptcy\": true,\r\n        \"anyCriminalBackground\": true,\r\n        \"isAggreeToPullCredit\": true,\r\n        \"marketingMethod\": \"All\",\r\n        \"anyResearchOnTs4u\": true,\r\n        \"anyCourseFromTs4u\": true,\r\n        \"endGoal\": \"Referral bonus\",\r\n        \"isAppDownloaded\": true,\r\n        \"isLearnedOurPlatform\": true,\r\n        \"isSubscribed\": true,\r\n        \"isFbVisited\": true,\r\n        \"isExploredAlm\": false\r\n    },\r\n    \"personal\": {\r\n        \"ssn\": \"\"\r\n    },\r\n    \"status\": \"approved\",\r\n    \"rejectReason\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/affiliate/admin/update/6375483ad4595666d455567d",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"affiliate",
														"admin",
														"update",
														"6375483ad4595666d455567d"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an user, I want to update the affiliate program given without accountType",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"As an user should get the '400' status code when executing to update without inputting the accountType\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"As an user should get the response below 2000 ms when executing to update without inputting the accountType\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"As an user should get the 'Bad Request' status code name when executing to update without inputting the accountType\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"As an user  should get the 'Please provide your account type' message when executing to update without inputting the accountType\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Please provide your account type\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to update without inputting the accountType\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"test_Mituls\",\r\n    \"accountType\": \"\",\r\n    \"address\": \"sdf\",\r\n    \"dob\": \"2022-11-24T20:29:31.000Z\",\r\n    \"personalExperience\": \"\",\r\n    \"photoId\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1668630579952-noti.png\",\r\n    \"company\": {\r\n        \"name\": \"\",\r\n        \"establishedYear\": null,\r\n        \"officeAddress\": \"\",\r\n        \"businessFormDocument\": \"\",\r\n        \"govtBusinessTaxId\": \"\"\r\n    },\r\n    \"questionnaire\": {\r\n        \"businessDuration\": \"5 to above year\",\r\n        \"anyBadCredit\": true,\r\n        \"anyProfessionalWebsite\": true,\r\n        \"website\": \"\",\r\n        \"anyAffiliateMarketingBefore\": false,\r\n        \"hoursPeerWeek\": \"0 to 5 hours\",\r\n        \"employeeNumber\": \"0 to 5\",\r\n        \"anyBankRuptcy\": true,\r\n        \"anyCriminalBackground\": true,\r\n        \"isAggreeToPullCredit\": true,\r\n        \"marketingMethod\": \"All\",\r\n        \"anyResearchOnTs4u\": true,\r\n        \"anyCourseFromTs4u\": true,\r\n        \"endGoal\": \"Referral bonus\",\r\n        \"isAppDownloaded\": true,\r\n        \"isLearnedOurPlatform\": true,\r\n        \"isSubscribed\": true,\r\n        \"isFbVisited\": true,\r\n        \"isExploredAlm\": false\r\n    },\r\n    \"personal\": {\r\n        \"ssn\": \"\"\r\n    },\r\n    \"status\": \"approved\",\r\n    \"rejectReason\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/affiliate/admin/update/6375483ad4595666d455567d",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"affiliate",
														"admin",
														"update",
														"6375483ad4595666d455567d"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an user, I want to update the affiliate program given without date of birth",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"As an user should get the '400' status code when executing to update without inputting the date of birth\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"As an user should get the response below 2000 ms when executing to update without inputting the date of birth\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"As an user should get the 'Bad Request' status code name when executing to update without inputting the date of birth\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"As an user  should get the 'Please provide your date of birth' message when executing to update without inputting the date of birth\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Please provide your date of birth\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to update without inputting the date of birth\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"test_Mituls\",\r\n    \"accountType\": \"personal\",\r\n    \"address\": \"sdf\",\r\n    \"dob\": \"\",\r\n    \"personalExperience\": \"\",\r\n    \"photoId\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1668630579952-noti.png\",\r\n    \"company\": {\r\n        \"name\": \"\",\r\n        \"establishedYear\": null,\r\n        \"officeAddress\": \"\",\r\n        \"businessFormDocument\": \"\",\r\n        \"govtBusinessTaxId\": \"\"\r\n    },\r\n    \"questionnaire\": {\r\n        \"businessDuration\": \"5 to above year\",\r\n        \"anyBadCredit\": true,\r\n        \"anyProfessionalWebsite\": true,\r\n        \"website\": \"\",\r\n        \"anyAffiliateMarketingBefore\": false,\r\n        \"hoursPeerWeek\": \"0 to 5 hours\",\r\n        \"employeeNumber\": \"0 to 5\",\r\n        \"anyBankRuptcy\": true,\r\n        \"anyCriminalBackground\": true,\r\n        \"isAggreeToPullCredit\": true,\r\n        \"marketingMethod\": \"All\",\r\n        \"anyResearchOnTs4u\": true,\r\n        \"anyCourseFromTs4u\": true,\r\n        \"endGoal\": \"Referral bonus\",\r\n        \"isAppDownloaded\": true,\r\n        \"isLearnedOurPlatform\": true,\r\n        \"isSubscribed\": true,\r\n        \"isFbVisited\": true,\r\n        \"isExploredAlm\": false\r\n    },\r\n    \"personal\": {\r\n        \"ssn\": \"\"\r\n    },\r\n    \"status\": \"approved\",\r\n    \"rejectReason\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/affiliate/admin/update/6375483ad4595666d455567d",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"affiliate",
														"admin",
														"update",
														"6375483ad4595666d455567d"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an user, I want to update the affiliate program given without update id name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"As an user should get the '400' status code when executing to update without inputting the Name\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"As an user should get the response below 2000 ms when executing to update without inputting the name\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"As an user should get the 'Bad Request' status code name when executing to update without inputting the name\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"As an user  should get the 'Please provide your name' message when executing to update without inputting the name\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Please provide your name\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to update without inputting the name\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"\",\r\n    \"accountType\": \"personal\",\r\n    \"address\": \"sdf\",\r\n    \"dob\": \"2022-11-24T20:29:31.000Z\",\r\n    \"personalExperience\": \"\",\r\n    \"photoId\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1668630579952-noti.png\",\r\n    \"company\": {\r\n        \"name\": \"\",\r\n        \"establishedYear\": null,\r\n        \"officeAddress\": \"\",\r\n        \"businessFormDocument\": \"\",\r\n        \"govtBusinessTaxId\": \"\"\r\n    },\r\n    \"questionnaire\": {\r\n        \"businessDuration\": \"5 to above year\",\r\n        \"anyBadCredit\": true,\r\n        \"anyProfessionalWebsite\": true,\r\n        \"website\": \"\",\r\n        \"anyAffiliateMarketingBefore\": false,\r\n        \"hoursPeerWeek\": \"0 to 5 hours\",\r\n        \"employeeNumber\": \"0 to 5\",\r\n        \"anyBankRuptcy\": true,\r\n        \"anyCriminalBackground\": true,\r\n        \"isAggreeToPullCredit\": true,\r\n        \"marketingMethod\": \"All\",\r\n        \"anyResearchOnTs4u\": true,\r\n        \"anyCourseFromTs4u\": true,\r\n        \"endGoal\": \"Referral bonus\",\r\n        \"isAppDownloaded\": true,\r\n        \"isLearnedOurPlatform\": true,\r\n        \"isSubscribed\": true,\r\n        \"isFbVisited\": true,\r\n        \"isExploredAlm\": false\r\n    },\r\n    \"personal\": {\r\n        \"ssn\": \"\"\r\n    },\r\n    \"status\": \"approved\",\r\n    \"rejectReason\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/affiliate/admin/update/6375483ad4595666d455567d",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"affiliate",
														"admin",
														"update",
														"6375483ad4595666d455567d"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Withdraw",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an user, I want to withdraw history the affiliate program",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/affiliate/admin/withdraw/history",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"affiliate",
														"admin",
														"withdraw",
														"history"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an user, I shouldn't be able  to withdraw history the affiliate program without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"As an user should get the '400' status code when executing to withdraw without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"As an user should get the response below 2000 ms when executing to withdraw without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"As an user should get the 'Bad Request' status code name when executing to withdraw without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"As an user  should get the 'Authorization required' message when executing to withdraw without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to withdraw member without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/affiliate/admin/withdraw/history",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"affiliate",
														"admin",
														"withdraw",
														"history"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an user, I want to withdraw update the affiliate program",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful PATCH request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"SQA Engineer\",\r\n    \"accountType\": \"personal\",\r\n    \"address\": \"Dhaka\",\r\n    \"dob\": \"2022-11-24T20:29:31.000Z\",\r\n    \"personalExperience\": \"\",\r\n    \"photoId\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1668630579952-noti.png\",\r\n    \"company\": {\r\n        \"name\": \"\",\r\n        \"establishedYear\": null,\r\n        \"officeAddress\": \"\",\r\n        \"businessFormDocument\": \"\",\r\n        \"govtBusinessTaxId\": \"\"\r\n    },\r\n    \"questionnaire\": {\r\n        \"businessDuration\": \"0 to 1 year\",\r\n        \"anyBadCredit\": true,\r\n        \"anyProfessionalWebsite\": true,\r\n        \"website\": \"\",\r\n        \"anyAffiliateMarketingBefore\": false,\r\n        \"hoursPeerWeek\": \"0 to 5 hours\",\r\n        \"employeeNumber\": \"0 to 5\",\r\n        \"anyBankRuptcy\": true,\r\n        \"anyCriminalBackground\": true,\r\n        \"isAggreeToPullCredit\": true,\r\n        \"marketingMethod\": \"All\",\r\n        \"anyResearchOnTs4u\": true,\r\n        \"anyCourseFromTs4u\": true,\r\n        \"endGoal\": \"Referral bonus\",\r\n        \"isAppDownloaded\": true,\r\n        \"isLearnedOurPlatform\": true,\r\n        \"isSubscribed\": true,\r\n        \"isFbVisited\": true,\r\n        \"isExploredAlm\": false\r\n    },\r\n    \"personal\": {\r\n        \"ssn\": \"\"\r\n    },\r\n    \"status\": \"approved\",\r\n    \"rejectReason\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/affiliate/admin/update/6375483ad4595666d455567d",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"affiliate",
														"admin",
														"update",
														"6375483ad4595666d455567d"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an user, I shouldn't be able to update the affiliate program given without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to update the affiliate program without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to update the affiliate program without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to update the affiliate program without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"Imegration spacilist should get the 'Authorization required' message when update the affiliate program without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to update the affiliate program without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"SQA Engineer\",\r\n    \"accountType\": \"personal\",\r\n    \"address\": \"Dhaka\",\r\n    \"dob\": \"2022-11-24T20:29:31.000Z\",\r\n    \"personalExperience\": \"\",\r\n    \"photoId\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1668630579952-noti.png\",\r\n    \"company\": {\r\n        \"name\": \"\",\r\n        \"establishedYear\": null,\r\n        \"officeAddress\": \"\",\r\n        \"businessFormDocument\": \"\",\r\n        \"govtBusinessTaxId\": \"\"\r\n    },\r\n    \"questionnaire\": {\r\n        \"businessDuration\": \"0 to 1 year\",\r\n        \"anyBadCredit\": true,\r\n        \"anyProfessionalWebsite\": true,\r\n        \"website\": \"\",\r\n        \"anyAffiliateMarketingBefore\": false,\r\n        \"hoursPeerWeek\": \"0 to 5 hours\",\r\n        \"employeeNumber\": \"0 to 5\",\r\n        \"anyBankRuptcy\": true,\r\n        \"anyCriminalBackground\": true,\r\n        \"isAggreeToPullCredit\": true,\r\n        \"marketingMethod\": \"All\",\r\n        \"anyResearchOnTs4u\": true,\r\n        \"anyCourseFromTs4u\": true,\r\n        \"endGoal\": \"Referral bonus\",\r\n        \"isAppDownloaded\": true,\r\n        \"isLearnedOurPlatform\": true,\r\n        \"isSubscribed\": true,\r\n        \"isFbVisited\": true,\r\n        \"isExploredAlm\": false\r\n    },\r\n    \"personal\": {\r\n        \"ssn\": \"\"\r\n    },\r\n    \"status\": \"approved\",\r\n    \"rejectReason\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/affiliate/admin/update/6375483ad4595666d455567d",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"affiliate",
														"admin",
														"update",
														"6375483ad4595666d455567d"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an user, I shouldn't be able to update the affiliate program given without Address",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to update the affiliate program without inputting the Address\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to update the affiliate program without inputting the Address\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to update the affiliate program without inputting the Address\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to update the affiliate program without inputting the Address\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"SQA Engineer\",\r\n    \"accountType\": \"personal\",\r\n    \"address\": \"\",\r\n    \"dob\": \"2022-11-24T20:29:31.000Z\",\r\n    \"personalExperience\": \"\",\r\n    \"photoId\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1668630579952-noti.png\",\r\n    \"company\": {\r\n        \"name\": \"\",\r\n        \"establishedYear\": null,\r\n        \"officeAddress\": \"\",\r\n        \"businessFormDocument\": \"\",\r\n        \"govtBusinessTaxId\": \"\"\r\n    },\r\n    \"questionnaire\": {\r\n        \"businessDuration\": \"0 to 1 year\",\r\n        \"anyBadCredit\": true,\r\n        \"anyProfessionalWebsite\": true,\r\n        \"website\": \"\",\r\n        \"anyAffiliateMarketingBefore\": false,\r\n        \"hoursPeerWeek\": \"0 to 5 hours\",\r\n        \"employeeNumber\": \"0 to 5\",\r\n        \"anyBankRuptcy\": true,\r\n        \"anyCriminalBackground\": true,\r\n        \"isAggreeToPullCredit\": true,\r\n        \"marketingMethod\": \"All\",\r\n        \"anyResearchOnTs4u\": true,\r\n        \"anyCourseFromTs4u\": true,\r\n        \"endGoal\": \"Referral bonus\",\r\n        \"isAppDownloaded\": true,\r\n        \"isLearnedOurPlatform\": true,\r\n        \"isSubscribed\": true,\r\n        \"isFbVisited\": true,\r\n        \"isExploredAlm\": false\r\n    },\r\n    \"personal\": {\r\n        \"ssn\": \"\"\r\n    },\r\n    \"status\": \"approved\",\r\n    \"rejectReason\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/affiliate/admin/update/6375483ad4595666d455567d",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"affiliate",
														"admin",
														"update",
														"6375483ad4595666d455567d"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an user, I shouldn't be able to update the affiliate program given Invalid accountType",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to update the affiliate program without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to update the affiliate program without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to update the affiliate program without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to update the affiliate program without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"SQA Engineer\",\r\n    \"accountType\": \"NEW\",\r\n    \"address\": \"Dhaka\",\r\n    \"dob\": \"2022-11-24T20:29:31.000Z\",\r\n    \"personalExperience\": \"\",\r\n    \"photoId\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1668630579952-noti.png\",\r\n    \"company\": {\r\n        \"name\": \"\",\r\n        \"establishedYear\": null,\r\n        \"officeAddress\": \"\",\r\n        \"businessFormDocument\": \"\",\r\n        \"govtBusinessTaxId\": \"\"\r\n    },\r\n    \"questionnaire\": {\r\n        \"businessDuration\": \"0 to 1 year\",\r\n        \"anyBadCredit\": true,\r\n        \"anyProfessionalWebsite\": true,\r\n        \"website\": \"\",\r\n        \"anyAffiliateMarketingBefore\": false,\r\n        \"hoursPeerWeek\": \"0 to 5 hours\",\r\n        \"employeeNumber\": \"0 to 5\",\r\n        \"anyBankRuptcy\": true,\r\n        \"anyCriminalBackground\": true,\r\n        \"isAggreeToPullCredit\": true,\r\n        \"marketingMethod\": \"All\",\r\n        \"anyResearchOnTs4u\": true,\r\n        \"anyCourseFromTs4u\": true,\r\n        \"endGoal\": \"Referral bonus\",\r\n        \"isAppDownloaded\": true,\r\n        \"isLearnedOurPlatform\": true,\r\n        \"isSubscribed\": true,\r\n        \"isFbVisited\": true,\r\n        \"isExploredAlm\": false\r\n    },\r\n    \"personal\": {\r\n        \"ssn\": \"\"\r\n    },\r\n    \"status\": \"approved\",\r\n    \"rejectReason\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/affiliate/admin/update/6375483ad4595666d455567d",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"affiliate",
														"admin",
														"update",
														"6375483ad4595666d455567d"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an user, I shouldn't be able to update the affiliate program given without Name field",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to update the affiliate program without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to update the affiliate program without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to update the affiliate program without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to update the affiliate program without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \r\n    \"accountType\": \"personal\",\r\n    \"address\": \"Dhaka\",\r\n    \"dob\": \"2022-11-24T20:29:31.000Z\",\r\n    \"personalExperience\": \"\",\r\n    \"photoId\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1668630579952-noti.png\",\r\n    \"company\": {\r\n        \"name\": \"\",\r\n        \"establishedYear\": null,\r\n        \"officeAddress\": \"\",\r\n        \"businessFormDocument\": \"\",\r\n        \"govtBusinessTaxId\": \"\"\r\n    },\r\n    \"questionnaire\": {\r\n        \"businessDuration\": \"0 to 1 year\",\r\n        \"anyBadCredit\": true,\r\n        \"anyProfessionalWebsite\": true,\r\n        \"website\": \"\",\r\n        \"anyAffiliateMarketingBefore\": false,\r\n        \"hoursPeerWeek\": \"0 to 5 hours\",\r\n        \"employeeNumber\": \"0 to 5\",\r\n        \"anyBankRuptcy\": true,\r\n        \"anyCriminalBackground\": true,\r\n        \"isAggreeToPullCredit\": true,\r\n        \"marketingMethod\": \"All\",\r\n        \"anyResearchOnTs4u\": true,\r\n        \"anyCourseFromTs4u\": true,\r\n        \"endGoal\": \"Referral bonus\",\r\n        \"isAppDownloaded\": true,\r\n        \"isLearnedOurPlatform\": true,\r\n        \"isSubscribed\": true,\r\n        \"isFbVisited\": true,\r\n        \"isExploredAlm\": false\r\n    },\r\n    \"personal\": {\r\n        \"ssn\": \"\"\r\n    },\r\n    \"status\": \"approved\",\r\n    \"rejectReason\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/affiliate/admin/update/6375483ad4595666d455567d",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"affiliate",
														"admin",
														"update",
														"6375483ad4595666d455567d"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Program service",
			"item": [
				{
					"name": "Show and Tell",
					"item": [
						{
							"name": "Upload Document",
							"item": [
								{
									"name": "Add Document",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As a student, I should be able to create a show and tell",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody)\r",
																	"pm.environment.set(\"Upload_ID\", jsonData.item._id);\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful GET request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"Test\",\r\n    \"date\": \"2023-07-03T20:00:00.772Z\",\r\n    \"attachments\": [],\r\n    \"agenda\": \"das\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/show-tell/add",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"show-tell",
																"add"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As an user, I shouldn't be able to add on the upload show and tell given without token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Imegration spacilist should get the '400' status code when executing to add on the upload show and tell without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to add on the upload show and tell  without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to add on the upload show and tell without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to add on the upload show and tell  without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"Test\",\r\n    \"date\": \"2023-07-03T20:00:00.772Z\",\r\n    \"attachments\": [],\r\n    \"agenda\": \"das\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/show-tell/add",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"show-tell",
																"add"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an user, I shouldn't be able to add on the upload show and tell given without date",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Imegration spacilist should get the '400' status code when executing to add on the upload show and tell without inputting the date\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to add on the upload show and tell  without inputting the date\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to add on the upload show and tell without inputting the date\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to add on the upload show and tell  without inputting the date\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"Test\",\r\n    \"date\": \"\",\r\n    \"attachments\": [],\r\n    \"agenda\": \"das\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/show-tell/add",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"show-tell",
																"add"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an user, I shouldn't be able to add on the upload show and tell given without title",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Imegration spacilist should get the '400' status code when executing to add on the upload show and tell without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to add on the upload show and tell  without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to add on the upload show and tell without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to add on the upload show and tell  without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"\",\r\n    \"date\": \"2023-07-03T20:00:00.772Z\",\r\n    \"attachments\": [],\r\n    \"agenda\": \"das\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/show-tell/add",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"show-tell",
																"add"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "My uploaded document",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a student, I want to see my uploaded document's",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/show-tell/myshows",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"show-tell",
														"myshows"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an user, I shouldn't be able to see all the uploaded documents to give without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to see all the uploaded documents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to see all the uploaded documents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to see all the uploaded documents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to see all the uploaded documents without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/show-tell/myshows",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"show-tell",
														"myshows"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a student, I want to update my uploaded document's",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"test1\",\r\n    \"date\": \"2023-07-04T01:00:00.485Z\",\r\n    \"attachments\": [],\r\n    \"agenda\": \"gv\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/show-tell/update/64cb472c0a7ee70019aa87e2",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"show-tell",
														"update",
														"64cb472c0a7ee70019aa87e2"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an Student, I shouldn't be able to see all the uploaded show and tell video given without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to see all the uploaded show and tell video without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to see all the uploaded show and tell video without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to see all the uploaded show and tell video without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to see all the uploaded show and tell video without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"test1\",\r\n    \"date\": \"2023-07-04T01:00:00.485Z\",\r\n    \"attachments\": [],\r\n    \"agenda\": \"gv\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/show-tell/update/64cb472c0a7ee70019aa87e2",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"show-tell",
														"update",
														"64cb472c0a7ee70019aa87e2"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an Student, I shouldn't be able to see all the uploaded show and tell video given without title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to see all the uploaded show and tell video without inputting the title\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to see all the uploaded show and tell video without inputting the title\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to see all the uploaded show and tell video without inputting the title\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to see all the uploaded show and tell video without inputting the title\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \",\r\n    \"date\": \"2023-07-04T01:00:00.485Z\",\r\n    \"attachments\": [],\r\n    \"agenda\": \"gv\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/show-tell/update/64cb472c0a7ee70019aa87e2",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"show-tell",
														"update",
														"64cb472c0a7ee70019aa87e2"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an Student, I shouldn't be able to see all the uploaded show and tell video given without date and time",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to see all the uploaded show and tell video without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to see all the uploaded show and tell video without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to see all the uploaded show and tell video without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to see all the uploaded show and tell video without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"test1\",\r\n    \"date\": \"\",\r\n    \"attachments\": [],\r\n    \"agenda\": \"gv\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/show-tell/update/64cb472c0a7ee70019aa87e2",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"show-tell",
														"update",
														"64cb472c0a7ee70019aa87e2"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an Student, I shouldn't be able to see all the uploaded show and tell video given without ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to see all the uploaded show and tell video without inputting ID\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to see all the uploaded show and tell video without inputting ID\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to see all the uploaded show and tell video without inputting ID\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to see all the uploaded show and tell video without inputting ID\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"test1\",\r\n    \"date\": \"2023-07-04T01:00:00.485Z\",\r\n    \"attachments\": [],\r\n    \"agenda\": \"gv\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/show-tell/update/{}",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"show-tell",
														"update",
														"{}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a student, I should be able to delete on the  uploaded document's",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful DELETE request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/show-tell/delete/{{Upload_ID}}",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"show-tell",
														"delete",
														"{{Upload_ID}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an Student, I shouldn't be able to delete on the my uploaded documents given without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to delete on the my uploaded documents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to delete on the my uploaded documents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to delete on the my uploaded documents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to delete on the my uploaded documents without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/show-tell/delete/{{Upload_ID}}",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"show-tell",
														"delete",
														"{{Upload_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an Student, I shouldn't be able to delete on the my uploaded documents given without ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to delete on the my uploaded documents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to delete on the my uploaded documents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to delete on the my uploaded documents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to delete on the my uploaded documents without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/show-tell/delete/{{}}",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"show-tell",
														"delete",
														"{{}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "See all user",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a student, I want to see my all previous uploaded document's",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/show-tell/getusers",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"show-tell",
														"getusers"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an Student, I shouldn't be able to get users on the show and tell video given without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to get users on the show and tell video without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to get users on the show and tell video without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to get users on the show and tell video without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to get users on the show and tell video without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/show-tell/getusers",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"show-tell",
														"getusers"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Uploaded user list",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a student, I want to see my all uploaded listed document's",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/show-tell/getlist",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"show-tell",
														"getlist"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an Student, I shouldn't be able to see all my uploaded show and tell given without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to  see all my uploaded show and tell  without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to  see all my uploaded show and tell without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to  see all my uploaded show and tell without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to  see all my uploaded show and tell without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/show-tell/getlist",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"show-tell",
														"getlist"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Professional Consultant",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a  student, I want to create the Professional Consultant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"professional consultent_ID\", jsonData.transaction._id); \r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"type\": \"monthly\",\r\n    \"method\": \"card\",\r\n    \"attachment\": \"\",\r\n    \"duration\": 720000,\r\n    \"timeRange\": \"inside\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/consultant/transaction/create",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"consultant",
														"transaction",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an Student, I shouldn't be able to create on the user list given without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to create on the user list without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to create on the user list without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to create on the user list without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to  see all create on the user list without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"type\": \"monthly\",\r\n    \"method\": \"card\",\r\n    \"attachment\": \"\",\r\n    \"duration\": 720000,\r\n    \"timeRange\": \"inside\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/consultant/transaction/create",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"consultant",
														"transaction",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an Student, I shouldn't be able to create on the user list given without time range",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to create on the user list without inputting the time range\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to create on the user list without inputting the time range\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to create on the user list without inputting the time range\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to  see all create on the user list without inputting the time range\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"type\": \"monthly\",\r\n    \"method\": \"card\",\r\n    \"attachment\": \"\",\r\n    \"duration\": 720000,\r\n    \"timeRange\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/consultant/transaction/create",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"consultant",
														"transaction",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an Student, I shouldn't be able to create on the user list given without duration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to create on the user list without inputting the duration\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to create on the user list without inputting the duration\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to create on the user list without inputting the duration\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to  see all create on the user list without inputting the duration\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"type\": \"monthly\",\r\n    \"method\": \"card\",\r\n    \"attachment\": \"\",\r\n    \"duration\": ,\r\n    \"timeRange\": \"inside\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/consultant/transaction/create",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"consultant",
														"transaction",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an Student, I shouldn't be able to create on the user list given without payment type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to create on the user list without inputting the payment type\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to create on the user list without inputting the payment type\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to create on the user list without inputting the payment type\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to  see all create on the user list without inputting the payment type\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"type\": \"\",\r\n    \"method\": \"card\",\r\n    \"attachment\": \"\",\r\n    \"duration\": 720000,\r\n    \"timeRange\": \"inside\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/consultant/transaction/create",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"consultant",
														"transaction",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As an Student, I shouldn't be able to create on the user list given without payment method",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to create on the user list without inputting the payment method\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to create on the user list without inputting the payment method\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to create on the user list without inputting the payment method\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to  see all create on the user list without inputting the payment method\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"type\": \"monthly\",\r\n    \"method\": \"\",\r\n    \"attachment\": \"\",\r\n    \"duration\": 720000,\r\n    \"timeRange\": \"inside\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/consultant/transaction/create",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"consultant",
														"transaction",
														"create"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "See all consultent",
							"item": [
								{
									"name": "See all Transaction",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As a user, I want to user transaction the Professional Consultant",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/consultant/transaction/getall",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"consultant",
																"transaction",
																"getall"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As a user, I shouldn't be able to see all  the transaction history given without token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Imegration spacilist should get the '400' status code when executing to see all the transaction history without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to see all the transaction history without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing tosee see all the transaction history without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to see all the transaction history without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.have.header(\"Date\");\r",
																	"    pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/consultant/transaction/getall",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"consultant",
																"transaction",
																"getall"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Get Transaction",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As a student, I want to see on  the Professional Consultant",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful GET request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl_user}}/api/consultant/transaction/get",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"consultant",
																"transaction",
																"get"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As a student, I shouldn't be able to see the transaction history given without token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Imegration spacilist should get the '400' status code when executing to see on the transaction history without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to see on the transaction history without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing tosee see on the transaction history without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to see on the transaction history without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.have.header(\"Date\");\r",
																	"    pm.response.to.have.header(\"Connection\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl_user}}/api/consultant/transaction/get",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"consultant",
																"transaction",
																"get"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "E2E Program Agenda/ Help Center",
					"item": [
						{
							"name": "Help Center",
							"item": [
								{
									"name": "See all documents",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As a student, I should be able to see all the uploaded documents",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl_user}}/api/document/mydocuments",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"document",
																"mydocuments"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As a student, I shouldn't be able to see my all uploaded documents with help center given without token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Imegration spacilist should get the '400' status code when executing to see my all uploaded documents with help center without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to see my all uploaded documents with help center without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing tosee see my all uploaded documents with help center without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to see my all uploaded documents with help center without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.have.header(\"Date\");\r",
																	"    pm.response.to.have.header(\"Connection\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl_user}}/api/document/mydocuments",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"document",
																"mydocuments"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "User Document",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As a student, I should be able to see on the user document",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/document/userdocument/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"document",
																"userdocument",
																"users"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As a student, I shouldn't be able to see all user documents with help center given without token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Imegration spacilist should get the '400' status code when executing to see my all uploaded documents with help center without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to see all user documents with help center without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing tosee  see all user documents with help center without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to see all user documents with help center without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.have.header(\"Date\");\r",
																	"    pm.response.to.have.header(\"Connection\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/document/userdocument/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"document",
																"userdocument",
																"users"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Create, Courses, Programs, Mock Interviews, Professional Services, Community Courses",
					"item": [
						{
							"name": "Course",
							"item": [
								{
									"name": "(FAIL)Edit",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As a student, I should be able to find on the any courses",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl_user}}/api/course/enroll/64a93fca9107670019e92c19",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"course",
																"enroll",
																"64a93fca9107670019e92c19"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Content",
									"item": [
										{
											"name": "Single course",
											"item": [
												{
													"name": "Positive",
													"item": [
														{
															"name": "As a student , I should be able to select the enroll any courses",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});\r",
																			"pm.test(\"Response time is less than 2000ms\", function () {\r",
																			"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																			"});\r",
																			"pm.test(\"Body matches string response successfully\", function () {\r",
																			"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																			"});\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																			"});\r",
																			"pm.test(\"Content-Length is present\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Length\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl_user}}/api/course/single/software-quality-automation-engineer",
																	"host": [
																		"{{baseUrl_user}}"
																	],
																	"path": [
																		"api",
																		"course",
																		"single",
																		"software-quality-automation-engineer"
																	]
																}
															},
															"response": []
														}
													]
												}
											]
										},
										{
											"name": "All Course",
											"item": [
												{
													"name": "Positive",
													"item": [
														{
															"name": "As a student, I should be able to select on  the individual course content",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});\r",
																			"pm.test(\"HR can be edit course on the bellow 3000ms\", function () {\r",
																			"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
																			"});\r",
																			"pm.test(\"HR can be edit course on the response successfully\", function () {\r",
																			"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																			"});\r",
																			"pm.test(\"Content-Type is present\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"});\r",
																			"pm.test(\"HR can be edit course on the POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{user_token}}",
																			"type": "string"
																		}
																	]
																},
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl_user}}/api/course/content/software-quality-automation-engineer",
																	"host": [
																		"{{baseUrl_user}}"
																	],
																	"path": [
																		"api",
																		"course",
																		"content",
																		"software-quality-automation-engineer"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Negative",
													"item": [
														{
															"name": "As a student, I shouldn't be able to see all the course content using without token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"\r",
																			"//Validate the status code\r",
																			"pm.test(\"Imegration spacilist should get the '400' status code when executing to see all course without inputting the token\", function () {\r",
																			"    pm.response.to.have.status(400);\r",
																			"});\r",
																			"//validate the response time\r",
																			"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to see all course with help center without inputting the token\", function () {\r",
																			"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																			"});\r",
																			"//Validate the status code name\r",
																			"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing tosee  see all course with help center without inputting the token\", function () {\r",
																			"    pm.response.to.have.status(\"Bad Request\");\r",
																			"});\r",
																			"\r",
																			"//Validate the response headers\r",
																			"pm.test(\"Validate the response header of the request to see all course with help center without inputting the token\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.have.header(\"Date\");\r",
																			"    pm.response.to.have.header(\"Connection\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl_user}}/api/course/content/software-quality-automation-engineer",
																	"host": [
																		"{{baseUrl_user}}"
																	],
																	"path": [
																		"api",
																		"course",
																		"content",
																		"software-quality-automation-engineer"
																	]
																}
															},
															"response": []
														}
													]
												}
											]
										}
									]
								},
								{
									"name": "joined student",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As a  student, I should be able to join on the any courses",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl_user}}/api/course/isjoined/software-quality-automation-engineer",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"course",
																"isjoined",
																"software-quality-automation-engineer"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Interview list",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As a student, I should be able to see all interview in the any courses",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl_user}}/api/course/getlist/interview",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"course",
																"getlist",
																"interview"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Questions, Categories, Tools, TS4U Interview Dictionary",
					"item": [
						{
							"name": "Interview question",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As an user, I want to auto complete all the user category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"HR can be auto complete catagory on the bellow 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"HR can be auto complete catagory on the response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"HR can be auto complete catagory on the GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/ts4u-interview/question/autocomplete/?query=something",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"ts4u-interview",
														"question",
														"autocomplete",
														""
													],
													"query": [
														{
															"key": "query",
															"value": "something"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a student, I shouldn't be able to  auto complete all the user category using without params",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to auto complete all the user category without inputting the params\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to auto complete all the user category without inputting the params\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing tosee auto complete all the user category without inputting the params\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to auto complete all the user category without inputting the params\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/ts4u-interview/question/autocomplete/",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"ts4u-interview",
														"question",
														"autocomplete",
														""
													],
													"query": [
														{
															"key": "query",
															"value": "something",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "All Assignments",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a student,I want to create on the  assignment quetion",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"Program all assingment create ID\", jsonData.assignment._id);\r",
															" \r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"question\": \"{{$randomFileName}}\",\r\n    \"mark\": 100,\r\n    \"category\": \"task\",\r\n    \"isActive\": true,\r\n    \"attachments\": [],\r\n    \"answer\": \"\",\r\n    \"groups\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/assignment/create",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"assignment",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a student, I shouldn't be able to  create on the  assignment question  using without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to create on the  assignment question without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to create on the  assignment question without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing tosee create on the  assignment question without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create on the  assignment question without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"question\": \"{{$randomFileName}}\",\r\n    \"mark\": 100,\r\n    \"category\": \"task\",\r\n    \"isActive\": true,\r\n    \"attachments\": [],\r\n    \"answer\": \"\",\r\n    \"groups\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/assignment/create",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"assignment",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a student, I shouldn't be able to  create on the  assignment question  using without Active status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to create on the  assignment question without inputting the Active status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to create on the  assignment question without inputting the Active status\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing tosee create on the  assignment question without inputting the Active status\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create on the  assignment question without inputting the Active status\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"question\": \"{{$randomFileName}}\",\r\n    \"mark\": 100,\r\n    \"category\": \"task\",\r\n    \"isActive\": ,\r\n    \"attachments\": [],\r\n    \"answer\": \"\",\r\n    \"groups\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/assignment/create",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"assignment",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a student, I shouldn't be able to  create on the  assignment question  using without Category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to create on the  assignment question without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to create on the  assignment question without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing tosee create on the  assignment question without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create on the  assignment question without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"question\": \"{{$randomFileName}}\",\r\n    \"mark\": 100,\r\n    \"category\": \"\",\r\n    \"isActive\": true,\r\n    \"attachments\": [],\r\n    \"answer\": \"\",\r\n    \"groups\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/assignment/create",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"assignment",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a student, I shouldn't be able to  create on the  assignment question  using without Quetion name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to create on the  assignment question without inputting the Quetion name\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to create on the  assignment question without inputting the Quetion name\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing tosee create on the  assignment question without inputting the Quetion name\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create on the  assignment question without inputting the Quetion name\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"question\": \"\",\r\n    \"mark\": 100,\r\n    \"category\": \"task\",\r\n    \"isActive\": true,\r\n    \"attachments\": [],\r\n    \"answer\": \"\",\r\n    \"groups\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/assignment/create",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"assignment",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a student, I shouldn't be able to  create on the  assignment question  using without mark.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to create on the  assignment question without inputting the mark\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to create on the  assignment question without inputting the mark\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing tosee create on the  assignment question without inputting the mark\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create on the  assignment question without inputting the mark\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"question\": \"{{$randomFileName}}\",\r\n    \"mark\": ,\r\n    \"category\": \"task\",\r\n    \"isActive\": true,\r\n    \"attachments\": [],\r\n    \"answer\": \"\",\r\n    \"groups\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/assignment/create",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"assignment",
														"create"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Upload",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a student, I should be able to upload on the  assignment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/assignment/myassignments",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"assignment",
														"myassignments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a student, I shouldn't be able to upload the  assignment  using without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to see all course without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to see all course with help center without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing tosee  see all course with help center without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to see all course with help center without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/assignment/myassignments",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"assignment",
														"myassignments"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "(Fail)Submit answer",
							"item": [
								{
									"name": "As an student, I should be able to submit answer on the interview quetion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"answer\": \"<p>Hlw</p>\",\r\n    \"attachments\": [htfh],\r\n    \"assignment\": \"64afc3129107670019e950f5\"\r\n}"
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/assignment/submitanswer",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"assignment",
												"submitanswer"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Feedback, Job SUpport, Shout Out, Issues, Day 2 Day Activities",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a student, I can be able to see on the created account information",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"Program connection create\", jsonData.post._id);\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Test\",\r\n    \"description\": \"<p>hi</p>\",\r\n    \"attachments\": [\r\n        \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/userdocument/1689506014203-%28350-350-px%29.jpg\"\r\n    ],\r\n    \"category\": \"jobSupport\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/communication/create",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"communication",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a student, I can be able to see on the created account information given without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to  see on the created account information without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to see on the created account information without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to see on the created account information without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to  see on the created account information without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"Test\",\r\n    \"description\": \"<p>hi</p>\",\r\n    \"attachments\": [\r\n        \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/userdocument/1689506014203-%28350-350-px%29.jpg\"\r\n    ],\r\n    \"category\": \"jobSupport\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/communication/create",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"communication",
														"create"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Feedback",
							"item": [
								{
									"name": "All posts",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As a student, I should be able to see on the all previous user feedback",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful GET request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl_user}}/api/communication/allposts/feedback",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"communication",
																"allposts",
																"feedback"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As a student, I should be able to see on the all previous user feedback given without token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Imegration spacilist should get the '400' status code when executing to see on the all previous user feedback without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to see on the all previous user feedback without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing tosee see on the all previous user feedback without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to see on the all previous user feedback without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.have.header(\"Date\");\r",
																	"    pm.response.to.have.header(\"Connection\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl_user}}/api/communication/allposts/feedback",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"communication",
																"allposts",
																"feedback"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "User List",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As a student, I should be able to sea all the previous all user information",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"success\": true,\r\n    \"users\": [\r\n        {\r\n            \"_id\": \"62436829ec662560b66dbb10\",\r\n            \"count\": 1,\r\n            \"creator\": {\r\n                \"profilePicture\": \"\",\r\n                \"lastName\": \"zgnbqb\",\r\n                \"_id\": \"62436829ec662560b66dbb10\",\r\n                \"email\": \"xyhvyjzgnbqb@cutradition.com\",\r\n                \"firstName\": \"Xyhvyj\",\r\n                \"fullName\": \"Xyhvyj zgnbqb\"\r\n            }\r\n        },\r\n        {\r\n            \"_id\": \"613f6b79c5af452db89feb7b\",\r\n            \"count\": 14,\r\n            \"creator\": {\r\n                \"profilePicture\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/1631642364085-demo.jpg\",\r\n                \"lastName\": \"Zahan\",\r\n                \"_id\": \"613f6b79c5af452db89feb7b\",\r\n                \"email\": \"israkzahan2121@gmail.com\",\r\n                \"firstName\": \"Israk\",\r\n                \"fullName\": \"Israk Zahan\"\r\n            }\r\n        },\r\n        {\r\n            \"_id\": \"619e6822921729545f7590cc\",\r\n            \"count\": 3,\r\n            \"creator\": {\r\n                \"profilePicture\": \"https://lh3.googleusercontent.com/a-/AOh14GifVRcM5I9YVW6Q7VoqC8FQngieoq7LN57MRCIn=s96-c\",\r\n                \"lastName\": \"Hossain\",\r\n                \"_id\": \"619e6822921729545f7590cc\",\r\n                \"email\": \"musabbirhossain120@gmail.com\",\r\n                \"firstName\": \"Musabbir\",\r\n                \"fullName\": \"Musabbir Hossain\"\r\n            }\r\n        },\r\n        {\r\n            \"_id\": \"61d11ea557b38d496b2c1f1b\",\r\n            \"count\": 11,\r\n            \"creator\": {\r\n                \"profilePicture\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/1644948829771-Younus-Ali-Akas\",\r\n                \"lastName\": \"AKASH\",\r\n                \"_id\": \"61d11ea557b38d496b2c1f1b\",\r\n                \"email\": \"younusaliakash8@gmail.com\",\r\n                \"firstName\": \"MD YOUNUS\",\r\n                \"fullName\": \"MD YOUNUS AKASH\"\r\n            }\r\n        },\r\n        {\r\n            \"_id\": \"610c4f4ab000a890e91f5d7e\",\r\n            \"count\": 2,\r\n            \"creator\": {\r\n                \"profilePicture\": \"https://lh3.googleusercontent.com/a-/AOh14GjLdcSd5XjA28tm7AxH5DsMvnwydYNrxZxddPSiDA=s96-c\",\r\n                \"lastName\": \"Ahmad\",\r\n                \"_id\": \"610c4f4ab000a890e91f5d7e\",\r\n                \"email\": \"shiblufahmad@gmail.com\",\r\n                \"firstName\": \"Shiblu\",\r\n                \"fullName\": \"Shiblu Ahmad\"\r\n            }\r\n        },\r\n        {\r\n            \"_id\": \"622d162c062f27f60cc51707\",\r\n            \"count\": 3,\r\n            \"creator\": {\r\n                \"profilePicture\": \"\",\r\n                \"lastName\": \"Galib\",\r\n                \"_id\": \"622d162c062f27f60cc51707\",\r\n                \"email\": \"codergalib@gmail.com\",\r\n                \"firstName\": \"Asadullah Hil\",\r\n                \"fullName\": \"Asadullah Hil Galib\"\r\n            }\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/communication/userlist/feedback",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"communication",
																"userlist",
																"feedback"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As a student, I should be able to sea all the previous all user information without given token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Imegration spacilist should post the '400' status code when executing to see all the previous all user information without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Imegration spacilist should post the response below 2000 ms when executing to see all the previous all user information without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Imegration spacilist should post the 'Bad Request' status code name when executing to see all the previous all user information without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to  see all the previous all user information without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.have.header(\"Date\");\r",
																	"    pm.response.to.have.header(\"Connection\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"success\": true,\r\n    \"users\": [\r\n        {\r\n            \"_id\": \"62436829ec662560b66dbb10\",\r\n            \"count\": 1,\r\n            \"creator\": {\r\n                \"profilePicture\": \"\",\r\n                \"lastName\": \"zgnbqb\",\r\n                \"_id\": \"62436829ec662560b66dbb10\",\r\n                \"email\": \"xyhvyjzgnbqb@cutradition.com\",\r\n                \"firstName\": \"Xyhvyj\",\r\n                \"fullName\": \"Xyhvyj zgnbqb\"\r\n            }\r\n        },\r\n        {\r\n            \"_id\": \"613f6b79c5af452db89feb7b\",\r\n            \"count\": 14,\r\n            \"creator\": {\r\n                \"profilePicture\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/1631642364085-demo.jpg\",\r\n                \"lastName\": \"Zahan\",\r\n                \"_id\": \"613f6b79c5af452db89feb7b\",\r\n                \"email\": \"israkzahan2121@gmail.com\",\r\n                \"firstName\": \"Israk\",\r\n                \"fullName\": \"Israk Zahan\"\r\n            }\r\n        },\r\n        {\r\n            \"_id\": \"619e6822921729545f7590cc\",\r\n            \"count\": 3,\r\n            \"creator\": {\r\n                \"profilePicture\": \"https://lh3.googleusercontent.com/a-/AOh14GifVRcM5I9YVW6Q7VoqC8FQngieoq7LN57MRCIn=s96-c\",\r\n                \"lastName\": \"Hossain\",\r\n                \"_id\": \"619e6822921729545f7590cc\",\r\n                \"email\": \"musabbirhossain120@gmail.com\",\r\n                \"firstName\": \"Musabbir\",\r\n                \"fullName\": \"Musabbir Hossain\"\r\n            }\r\n        },\r\n        {\r\n            \"_id\": \"61d11ea557b38d496b2c1f1b\",\r\n            \"count\": 11,\r\n            \"creator\": {\r\n                \"profilePicture\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/1644948829771-Younus-Ali-Akas\",\r\n                \"lastName\": \"AKASH\",\r\n                \"_id\": \"61d11ea557b38d496b2c1f1b\",\r\n                \"email\": \"younusaliakash8@gmail.com\",\r\n                \"firstName\": \"MD YOUNUS\",\r\n                \"fullName\": \"MD YOUNUS AKASH\"\r\n            }\r\n        },\r\n        {\r\n            \"_id\": \"610c4f4ab000a890e91f5d7e\",\r\n            \"count\": 2,\r\n            \"creator\": {\r\n                \"profilePicture\": \"https://lh3.googleusercontent.com/a-/AOh14GjLdcSd5XjA28tm7AxH5DsMvnwydYNrxZxddPSiDA=s96-c\",\r\n                \"lastName\": \"Ahmad\",\r\n                \"_id\": \"610c4f4ab000a890e91f5d7e\",\r\n                \"email\": \"shiblufahmad@gmail.com\",\r\n                \"firstName\": \"Shiblu\",\r\n                \"fullName\": \"Shiblu Ahmad\"\r\n            }\r\n        },\r\n        {\r\n            \"_id\": \"622d162c062f27f60cc51707\",\r\n            \"count\": 3,\r\n            \"creator\": {\r\n                \"profilePicture\": \"\",\r\n                \"lastName\": \"Galib\",\r\n                \"_id\": \"622d162c062f27f60cc51707\",\r\n                \"email\": \"codergalib@gmail.com\",\r\n                \"firstName\": \"Asadullah Hil\",\r\n                \"fullName\": \"Asadullah Hil Galib\"\r\n            }\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/communication/userlist/feedback",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"communication",
																"userlist",
																"feedback"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Shout Out",
							"item": [
								{
									"name": "Create",
									"item": [
										{
											"name": "positive",
											"item": [
												{
													"name": "As a student, I should be able to create on the short out page",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody)\r",
																	"pm.environment.set(\"program short_out create ID\", jsonData.post._id);\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Created\");\r",
																	"});\r",
																	"pm.test(\"HR can be short course on the bellow 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"HR can be short course on the response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"HR can be short course on the POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"Test\",\r\n    \"description\": \"<p>hi</p>\",\r\n    \"attachments\": [\r\n        \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/userdocument/1689501526389-Mituldas.png\"\r\n    ],\r\n    \"category\": \"day2day\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/communication/shout",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"communication",
																"shout"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As a student, I should be able to create on the short out page given without token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Imegration spacilist should post the '400' status code when executing to create on the short out page without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Imegration spacilist should post the response below 2000 ms when executing to create on the short out page without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Imegration spacilist should post the 'Bad Request' status code name when executing to create on the short out page without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to create on the short out page without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.have.header(\"Date\");\r",
																	"    pm.response.to.have.header(\"Connection\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"Test\",\r\n    \"description\": \"<p>hi</p>\",\r\n    \"attachments\": [\r\n        \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/userdocument/1689501526389-Mituldas.png\"\r\n    ],\r\n    \"category\": \"day2day\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/communication/shout",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"communication",
																"shout"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Feedback",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As a student, I should be able to day 2 day activities on  myshout",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"HR can be feedback course on the bellow 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"HR can be feedback course on the response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"HR can be feedback course on the GET request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl_user}}/api/communication/myshout/feedback",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"communication",
																"myshout",
																"feedback"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As a student, I shouldn't be able to feedback on the user given without token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Imegration spacilist should get the '400' status code when executing to user feedback given without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to user feedback given without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to user feedback given without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to user feedback given without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.have.header(\"Date\");\r",
																	"    pm.response.to.have.header(\"Connection\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl_user}}/api/communication/myshout/feedback",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"communication",
																"myshout",
																"feedback"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Update",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As a student, I should be able to update on the all student's day 2 day activities",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Imegration spacilist should Patch the '400' status code when executing to create on the short out page without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Imegration spacilist should Patch the response below 2000 ms when executing to create on the short out page without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Imegration spacilist should Patch the 'Bad Request' status code name when executing to create on the short out page without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to create on the short out page without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.have.header(\"Date\");\r",
																	"    pm.response.to.have.header(\"Connection\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"Test12\",\r\n    \"description\": \"<p>hi</p>\",\r\n    \"attachments\": [\r\n        \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/userdocument/1689501526389-Mituldas.png\"\r\n    ],\r\n    \"category\": \"day2day\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/communication/update/shout/{{program short_out create ID}}",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"communication",
																"update",
																"shout",
																"{{program short_out create ID}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As a student, I shouldn't  be able to update on the all student's day 2 day activities without given token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"Imegration spacilist should Patch the '400' status code when executing to update on the all student's day 2 day activities without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Imegration spacilist should Patch the response below 2000 ms when executing to update on the all student's day 2 day activities without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Imegration spacilist should Patch the 'Bad Request' status code name when executing to update on the all student's day 2 day activities without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to update on the all student's day 2 day activities without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.have.header(\"Date\");\r",
																	"    pm.response.to.have.header(\"Connection\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"Test12\",\r\n    \"description\": \"<p>hi</p>\",\r\n    \"attachments\": [\r\n        \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/userdocument/1689501526389-Mituldas.png\"\r\n    ],\r\n    \"category\": \"day2day\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/communication/update/shout/{{program short_out create ID}}",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"communication",
																"update",
																"shout",
																"{{program short_out create ID}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "My post",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As a user, I can be able to post on my day 2 day activities",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"HR can be mypost course on the bellow 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"HR can be mypost course on the response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"HR can be mypost course on the GET request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl_user}}/api/communication/mypost/{{program short_out create ID}}",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"communication",
																"mypost",
																"{{program short_out create ID}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As a user, I shouldn't be able to see on my day 2 day activities post without given token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Imegration spacilist should get the '400' status code when executing to see on my day 2 day activities post without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to see on my day 2 day activities post without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to see on my day 2 day activities post without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to see on my day 2 day activities post without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.have.header(\"Date\");\r",
																	"    pm.response.to.have.header(\"Connection\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl_user}}/api/communication/mypost/{{program short_out create ID}}",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"communication",
																"mypost",
																"{{program short_out create ID}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Track",
					"item": [
						{
							"name": "Single course",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a student, I want to truck on the  my uploaded documents",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/track/singlebycourse",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"track",
														"singlebycourse"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a student, I shouldn't be able to truck on the  my uploaded documents without given token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to see on my day 2 day activities post without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to see on my day 2 day activities post without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to see on my day 2 day activities post without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to see on my day 2 day activities post without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"    \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/track/singlebycourse",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"track",
														"singlebycourse"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Comments",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a student, I want to comments on the  my uploaded documents",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/content/comment/get/614cca35c7a7d47853b6d06d",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"content",
														"comment",
														"get",
														"614cca35c7a7d47853b6d06d"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a student, I shouldn't be able to comments on the  my uploaded documents given without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to see comments on the my uploaded documents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to comments on the my uploaded documents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to comments on the my uploaded documents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to see on comments on the my uploaded documents without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"    \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/content/comment/get/614cca35c7a7d47853b6d06d",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"content",
														"comment",
														"get",
														"614cca35c7a7d47853b6d06d"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "See all",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a student, I want to comments on the  all submition",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/track/all/6453d052ce7ccd0019e47225",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"track",
														"all",
														"6453d052ce7ccd0019e47225"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a student, I shouldn't be able to comments on the  all submission given without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to comments on the  all submission without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to comments on the  all submission without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to comments on the  all submission without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to see on comments on the  all submission without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"    \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/track/all/6453d052ce7ccd0019e47225",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"track",
														"all",
														"6453d052ce7ccd0019e47225"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Single track",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a user, I want to track on the all Submissions",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/track/single/6453d052ce7ccd0019e47225",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"track",
														"single",
														"6453d052ce7ccd0019e47225"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a user, I should be able to see on the all submissions given without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to see comments on the my uploaded documents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to comments on the my uploaded documents without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to comments on the my uploaded documents without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to see on comments on the my uploaded documents without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"    \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/track/single/6453d052ce7ccd0019e47225",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"track",
														"single",
														"6453d052ce7ccd0019e47225"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Submit summery",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a student, I want to submit summery on the  all submition",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"summary\": \"<p>rgdrg</p>\\n\",\r\n    \"chapter\": \"611febea56777023d3476787\",\r\n    \"attachments\": [\r\n        \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/userdocument/1689235171263-360_F_563046281_30w6BmRLzrSNkiYKEqMknfWci7y6bWlG.jpg\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/track/submitsummery",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"track",
														"submitsummery"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a student, I shouldn't be able to submit summery on the  all submission without given token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should get the '400' status code when executing to submit summery on the  all submission without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to submit summery on the  all submission without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should get the 'Bad Request' status code name when executing to submit summery on the  all submission without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to submit summery on the all submission without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"summary\": \"<p>rgdrg</p>\\n\",\r\n    \"chapter\": \"611febea56777023d3476787\",\r\n    \"attachments\": [\r\n        \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/userdocument/1689235171263-360_F_563046281_30w6BmRLzrSNkiYKEqMknfWci7y6bWlG.jpg\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/track/submitsummery",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"track",
														"submitsummery"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Submit chapter",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a student, I want to submit chapter on the  all upload document",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 3000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"success\": true,\r\n    \"toFix\": [\r\n        {\r\n            \"chapter\": \"Project Management Tools (JIRA)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Swagger (API Specification)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Communication Documents\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Eclipse IDE (Code Develop and Debugging)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Core Java & Maven (Programming & Dependencies)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Web Elements Automation\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"RESTAssured Framework (API Automation)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Office Email Communication\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Motivation (Watch Everyday)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Internet Search\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Cloud- Google Drive\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Miscellaneous\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Cloud & Linux OS\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Jenkins (CICD)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Selenium WebDriver & TestNG\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Web Automation Framework\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Hands On Windows OS\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"English Agile Scrum\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Bengali Postman\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"DB Queries (Test Validation)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Windows Command Prompt\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Part 1 Various Q&As\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Project Management Tools - Azure DevOps\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"GitHub (Code Repository)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Project\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Q&As For All\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Phone\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Salary Negotiation\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Behavioral Q&As For All\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Bengali Agile Scrum\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- QA Manual Testing\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Orientation Q&A\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Agile Scrum, User Story, API & Swagger.\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- BDD Question\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Intro of TS4U (Transform into Technology)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Jenkins Question\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- SQL Question\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interviews\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/track/submitchapter/61113628c4ea52404a295b03",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"track",
														"submitchapter",
														"61113628c4ea52404a295b03"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a student, I should be able to submit chapter on the  all upload document given without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should Post the '400' status code when executing to submit chapter on the  all upload document without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should Post the response below 2000 ms when executing to submit chapter on the  all upload document without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should Post the 'Bad Request' status code name when executing to submit chapter on the  all upload document without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to submit chapter on the  all upload document without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"success\": true,\r\n    \"toFix\": [\r\n        {\r\n            \"chapter\": \"Project Management Tools (JIRA)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Swagger (API Specification)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Communication Documents\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Eclipse IDE (Code Develop and Debugging)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Core Java & Maven (Programming & Dependencies)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Web Elements Automation\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"RESTAssured Framework (API Automation)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Office Email Communication\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Motivation (Watch Everyday)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Internet Search\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Cloud- Google Drive\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Miscellaneous\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Cloud & Linux OS\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Jenkins (CICD)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Selenium WebDriver & TestNG\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Web Automation Framework\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Hands On Windows OS\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"English Agile Scrum\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Bengali Postman\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"DB Queries (Test Validation)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Windows Command Prompt\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Part 1 Various Q&As\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Project Management Tools - Azure DevOps\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"GitHub (Code Repository)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Project\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Q&As For All\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Phone\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Salary Negotiation\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Behavioral Q&As For All\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Bengali Agile Scrum\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- QA Manual Testing\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Orientation Q&A\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Agile Scrum, User Story, API & Swagger.\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- BDD Question\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Intro of TS4U (Transform into Technology)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Jenkins Question\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- SQL Question\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interviews\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/track/submitchapter/61113628c4ea52404a295b03",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"track",
														"submitchapter",
														"61113628c4ea52404a295b03"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Job profile",
							"item": [
								{
									"name": "positive",
									"item": [
										{
											"name": "As a student, I want to submit interview on my job profile",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"success\": false,\r\n    \"error\": \"Something went wrong\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/track/submitjobprofile/647f15e245b2b400197e4ab8",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"track",
														"submitjobprofile",
														"647f15e245b2b400197e4ab8"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a student, I shouldn't be able to submit interview on my job profile given without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should Post the '400' status code when executing to submit interview on my job profile without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should Post the response below 2000 ms when executing to submit interview on my job profile without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should Post the 'Bad Request' status code name when executing to  submit interview on my job profile without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to submit interview on my job profile without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"success\": false,\r\n    \"error\": \"Something went wrong\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/track/submitjobprofile/647f15e245b2b400197e4ab8",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"track",
														"submitjobprofile",
														"647f15e245b2b400197e4ab8"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Job offer",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a student, I want to submit on the job offer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"success\": false,\r\n    \"error\": \"Something went wrong\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/track/submitjoboffer/647f15e245b2b400197e4ab8",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"track",
														"submitjoboffer",
														"647f15e245b2b400197e4ab8"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a student, I should be able to submit on the job offer without given token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should Post the '400' status code when executing to submit on the job offer without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should Post the response below 2000 ms when executing to submit on the job offer without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should Post the 'Bad Request' status code name when executing to submit on the job offer without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to submit on the job offer without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"success\": false,\r\n    \"error\": \"Something went wrong\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/track/submitjoboffer/647f15e245b2b400197e4ab8",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"track",
														"submitjoboffer",
														"647f15e245b2b400197e4ab8"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "First week",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a student, I want to submit on the first week offer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"success\": false,\r\n    \"error\": \"Something went wrong\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/track/submitfirstweek/647f15e245b2b400197e4ab8",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"track",
														"submitfirstweek",
														"647f15e245b2b400197e4ab8"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a student, I shouldn't be able to submit on the first week offer without given token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should Post the '400' status code when executing to submit submit on the first week offer without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should Post the response below 2000 ms when executing to submit on the first week offer without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should Post the 'Bad Request' status code name when executing to submit on the first week offer without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to submit on the first week offer without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/track/submitfirstweek/647f15e245b2b400197e4ab8",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"track",
														"submitfirstweek",
														"647f15e245b2b400197e4ab8"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Second week",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a student, I want to submit on the second week",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"success\": false,\r\n    \"error\": \"Something went wrong\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/track/submitsecondweek/647f15e245b2b400197e4ab8",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"track",
														"submitsecondweek",
														"647f15e245b2b400197e4ab8"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a student, I shouldn't be able to submit on the second week offer without given token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should Post the '400' status code when executing to submit submit on the secound week offer without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should Post the response below 2000 ms when executing to submit on the secound week offer without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should Post the 'Bad Request' status code name when executing to submit on the secound week offer without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to submit on the secound week offer without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"success\": false,\r\n    \"error\": \"Something went wrong\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/track/submitsecondweek/647f15e245b2b400197e4ab8",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"track",
														"submitsecondweek",
														"647f15e245b2b400197e4ab8"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Submit other",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a student, I want to submit other on the week job offer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"success\": false,\r\n    \"error\": \"Something went wrong\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/track/submitother/647f15e245b2b400197e4ab8",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"track",
														"submitother",
														"647f15e245b2b400197e4ab8"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a student, I shouldn't be able to submit other on the week job offer given without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should Post the '400' status code when executing to submit submit on the secound week offer without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should Post the response below 2000 ms when executing to submit on the secound week offer without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should Post the 'Bad Request' status code name when executing to submit on the secound week offer without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to submit on the secound week offer without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"success\": false,\r\n    \"error\": \"Something went wrong\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/track/submitother/647f15e245b2b400197e4ab8",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"track",
														"submitother",
														"647f15e245b2b400197e4ab8"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Force submit",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a student, I want to force on the submit chapter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"success\": true,\r\n    \"toFix\": [\r\n        {\r\n            \"chapter\": \"Project Management Tools (JIRA)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Swagger (API Specification)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Communication Documents\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Eclipse IDE (Code Develop and Debugging)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Core Java & Maven (Programming & Dependencies)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Web Elements Automation\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"RESTAssured Framework (API Automation)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Office Email Communication\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Motivation (Watch Everyday)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Internet Search\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Cloud- Google Drive\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Miscellaneous\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Cloud & Linux OS\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Jenkins (CICD)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Selenium WebDriver & TestNG\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Web Automation Framework\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Hands On Windows OS\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"English Agile Scrum\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Bengali Postman\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"DB Queries (Test Validation)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Windows Command Prompt\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Part 1 Various Q&As\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Project Management Tools - Azure DevOps\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"GitHub (Code Repository)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Project\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Q&As For All\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Phone\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Salary Negotiation\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Behavioral Q&As For All\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Bengali Agile Scrum\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- QA Manual Testing\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Orientation Q&A\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Agile Scrum, User Story, API & Swagger.\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- BDD Question\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Intro of TS4U (Transform into Technology)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Jenkins Question\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- SQL Question\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interviews\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/track/forcesubmitchapter/61113628c4ea52404a295b03",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"track",
														"forcesubmitchapter",
														"61113628c4ea52404a295b03"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a student, I shouldn't be able to force on the submit chapter given without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should Post the '400' status code when executing to force on the submit chapter without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should Post the response below 2000 ms when executing to force on the submit chapter without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should Post the 'Bad Request' status code name when executing to force on the submit chapter without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to force on the submit chapter without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"success\": true,\r\n    \"toFix\": [\r\n        {\r\n            \"chapter\": \"Project Management Tools (JIRA)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Swagger (API Specification)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Communication Documents\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Eclipse IDE (Code Develop and Debugging)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Core Java & Maven (Programming & Dependencies)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Web Elements Automation\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"RESTAssured Framework (API Automation)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Office Email Communication\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Motivation (Watch Everyday)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Internet Search\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Cloud- Google Drive\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Miscellaneous\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Cloud & Linux OS\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Jenkins (CICD)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Selenium WebDriver & TestNG\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Web Automation Framework\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Hands On Windows OS\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"English Agile Scrum\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Bengali Postman\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"DB Queries (Test Validation)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Windows Command Prompt\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Part 1 Various Q&As\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Project Management Tools - Azure DevOps\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"GitHub (Code Repository)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Project\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Q&As For All\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Phone\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Salary Negotiation\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Behavioral Q&As For All\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Bengali Agile Scrum\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- QA Manual Testing\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Orientation Q&A\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Agile Scrum, User Story, API & Swagger.\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- BDD Question\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Intro of TS4U (Transform into Technology)\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- Jenkins Question\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interview- SQL Question\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\",\r\n                \"Interview Q & A not completed yet\"\r\n            ]\r\n        },\r\n        {\r\n            \"chapter\": \"Interviews\",\r\n            \"reasons\": [\r\n                \"Summary not submitted yet\"\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/track/forcesubmitchapter/61113628c4ea52404a295b03",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"track",
														"forcesubmitchapter",
														"61113628c4ea52404a295b03"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Enrollment service",
			"item": [
				{
					"name": "Invoice Ts4u",
					"item": [
						{
							"name": "Invoice form create",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "User should able to create the payment form",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"Invoice Create ID\", jsonData.invoice._id);\r",
															"\r",
															"//Validate the status code\r",
															"pm.test(\"User created the payment form successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"User created the payment form within 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"pm.test(\"invoice key matched\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"approved\");\r",
															"     pm.expect(pm.response.text()).to.include(\"address\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Israk Monisha\",\r\n    \"address\": \"Mi, , MI, Indiana, 49971\",\r\n    \"phone\": \"12025550120\",\r\n    \"tax\": 6,\r\n    \"user\": \"648fbeba37a20c00197f0f01\",\r\n    \"courses\": [\r\n        {\r\n            \"title\": \"CloudOps Engineer\",\r\n            \"price\": 5000,\r\n            \"session\": \"Winter 2021- DevOps Engineer\"\r\n        }\r\n    ],\r\n    \"payments\": [],\r\n    \"loan\": {\r\n        \"approved\": 0,\r\n        \"received\": 0\r\n    },\r\n    \"account\": \"TS4U\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/invoice/create",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"invoice",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a student, I shouldn't be able to create on the invoice given without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should Post the '400' status code when executing to create on the invoice without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should Post the response below 2000 ms when executing to create on the invoice without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should Post the 'Bad Request' status code name when executing to create on the invoice without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create on the invoice without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Israk Monisha\",\r\n    \"address\": \"Mi, , MI, Indiana, 49971\",\r\n    \"phone\": \"12025550120\",\r\n    \"tax\": 6,\r\n    \"user\": \"648fbeba37a20c00197f0f01\",\r\n    \"courses\": [\r\n        {\r\n            \"title\": \"CloudOps Engineer\",\r\n            \"price\": 5000,\r\n            \"session\": \"Winter 2021- DevOps Engineer\"\r\n        }\r\n    ],\r\n    \"payments\": [],\r\n    \"loan\": {\r\n        \"approved\": 0,\r\n        \"received\": 0\r\n    },\r\n    \"account\": \"TS4U\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/invoice/create",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"invoice",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a student, I shouldn't be able to create on the invoice given without tax number",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should Post the '400' status code when executing to create on the invoice without inputting the tax number\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should Post the response below 2000 ms when executing to create on the invoice without inputting the tax number\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should Post the 'Bad Request' status code name when executing to create on the invoice without inputting the tax number\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create on the invoice without inputting the tax number\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Israk Monisha\",\r\n    \"address\": \"Mi, , MI, Indiana, 49971\",\r\n    \"phone\": \"12025550120\",\r\n    \"tax\": ,\r\n    \"user\": \"648fbeba37a20c00197f0f01\",\r\n    \"courses\": [\r\n        {\r\n            \"title\": \"CloudOps Engineer\",\r\n            \"price\": 5000,\r\n            \"session\": \"Winter 2021- DevOps Engineer\"\r\n        }\r\n    ],\r\n    \"payments\": [],\r\n    \"loan\": {\r\n        \"approved\": 0,\r\n        \"received\": 0\r\n    },\r\n    \"account\": \"TS4U\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/invoice/create",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"invoice",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a student, I shouldn't be able to create on the invoice given without account name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should Post the '400' status code when executing to create on the invoice without inputting the account name\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should Post the response below 2000 ms when executing to create on the invoice without inputting the account name\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should Post the 'Bad Request' status code name when executing to create on the invoice without inputting the account name\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create on the invoice without inputting the account name\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Israk Monisha\",\r\n    \"address\": \"Mi, , MI, Indiana, 49971\",\r\n    \"phone\": \"12025550120\",\r\n    \"tax\": 6,\r\n    \"user\": \"648fbeba37a20c00197f0f01\",\r\n    \"courses\": [\r\n        {\r\n            \"title\": \"CloudOps Engineer\",\r\n            \"price\": 5000,\r\n            \"session\": \"Winter 2021- DevOps Engineer\"\r\n        }\r\n    ],\r\n    \"payments\": [],\r\n    \"loan\": {\r\n        \"approved\": 0,\r\n        \"received\": 0\r\n    },\r\n    \"account\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/invoice/create",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"invoice",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a student, I shouldn't be able to create on the invoice given without course price",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should Post the response below 2000 ms when executing to create on the invoice without inputting the course price\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should Post the 'Bad Request' status code name when executing to create on the invoice without inputting the course price\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create on the invoice without inputting the course price\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Israk Monisha\",\r\n    \"address\": \"Mi, , MI, Indiana, 49971\",\r\n    \"phone\": \"12025550120\",\r\n    \"tax\": 6,\r\n    \"user\": \"648fbeba37a20c00197f0f01\",\r\n    \"courses\": [\r\n        {\r\n            \"title\": \"CloudOps Engineer\",\r\n            \"price\": ,\r\n            \"session\": \"Winter 2021- DevOps Engineer\"\r\n        }\r\n    ],\r\n    \"payments\": [],\r\n    \"loan\": {\r\n        \"approved\": 0,\r\n        \"received\": 0\r\n    },\r\n    \"account\": \"TS4U\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/invoice/create",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"invoice",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a student, I shouldn't be able to create on the invoice given without user id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should Post the '400' status code when executing to create on the invoice without inputting the user id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should Post the response below 2000 ms when executing to create on the invoice without inputting the user id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should Post the 'Bad Request' status code name when executing to create on the invoice without inputting the user id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create on the invoice without inputting the user id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Israk Monisha\",\r\n    \"address\": \"Mi, , MI, Indiana, 49971\",\r\n    \"phone\": \"12025550120\",\r\n    \"tax\": 6,\r\n    \"user\": \"\",\r\n    \"courses\": [\r\n        {\r\n            \"title\": \"CloudOps Engineer\",\r\n            \"price\": 5000,\r\n            \"session\": \"Winter 2021- DevOps Engineer\"\r\n        }\r\n    ],\r\n    \"payments\": [],\r\n    \"loan\": {\r\n        \"approved\": 0,\r\n        \"received\": 0\r\n    },\r\n    \"account\": \"TS4U\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/invoice/create",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"invoice",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a student, I shouldn't be able to create on the invoice given without Name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should Post the '400' status code when executing to create on the invoice without inputting the name\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should Post the response below 2000 ms when executing to create on the invoice without inputting the name\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should Post the 'Bad Request' status code name when executing to create on the invoice without inputting the name\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create on the invoice without inputting the name\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"\",\r\n    \"address\": \"Mi, , MI, Indiana, 49971\",\r\n    \"phone\": \"12025550120\",\r\n    \"tax\": 6,\r\n    \"user\": \"648fbeba37a20c00197f0f01\",\r\n    \"courses\": [\r\n        {\r\n            \"title\": \"CloudOps Engineer\",\r\n            \"price\": 5000,\r\n            \"session\": \"Winter 2021- DevOps Engineer\"\r\n        }\r\n    ],\r\n    \"payments\": [],\r\n    \"loan\": {\r\n        \"approved\": 0,\r\n        \"received\": 0\r\n    },\r\n    \"account\": \"TS4U\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/invoice/create",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"invoice",
														"create"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Edit invoice form",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "User can able to edit the form information",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Israk Zahan Monisha1122\",\r\n    \"address\": [\r\n        \"Mi, , MI, Indiana, 49971\"\r\n    ],\r\n    \"phone\": \"12025550120\",\r\n    \"tax\": 6,\r\n    \"user\": \"648fbeba37a20c00197f0f01\",\r\n    \"courses\": [\r\n        {\r\n            \"price\": 5000,\r\n            \"_id\": \"64a506d2a2b16b0021015e0d\",\r\n            \"title\": \"CloudOps Engineer\",\r\n            \"session\": \"Winter 2021- DevOps Engineer\"\r\n        }\r\n    ],\r\n    \"payments\": [\r\n        {\r\n            \"date\": 1688537267484,\r\n            \"description\": \"\",\r\n            \"method\": \"\",\r\n            \"amount\": \"19\"\r\n        }\r\n    ],\r\n    \"loan\": {\r\n        \"received\": 0,\r\n        \"approved\": \"-1\"\r\n    },\r\n    \"account\": \"TS4U\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/invoice/edit/{{Invoice Create ID}}",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"invoice",
														"edit",
														"{{Invoice Create ID}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a student, I shouldn't be able to edit the form information given without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should Post the '400' status code when executing to edit the form information without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should Post the response below 2000 ms when executing to edit the form information without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should Post the 'Bad Request' status code name when executing to edit the form information without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to edit the form information without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Israk Zahan Monisha1122\",\r\n    \"address\": [\r\n        \"Mi, , MI, Indiana, 49971\"\r\n    ],\r\n    \"phone\": \"12025550120\",\r\n    \"tax\": 6,\r\n    \"user\": \"648fbeba37a20c00197f0f01\",\r\n    \"courses\": [\r\n        {\r\n            \"price\": 5000,\r\n            \"_id\": \"64a506d2a2b16b0021015e0d\",\r\n            \"title\": \"CloudOps Engineer\",\r\n            \"session\": \"Winter 2021- DevOps Engineer\"\r\n        }\r\n    ],\r\n    \"payments\": [\r\n        {\r\n            \"date\": 1688537267484,\r\n            \"description\": \"\",\r\n            \"method\": \"\",\r\n            \"amount\": \"19\"\r\n        }\r\n    ],\r\n    \"loan\": {\r\n        \"received\": 0,\r\n        \"approved\": \"-1\"\r\n    },\r\n    \"account\": \"TS4U\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/invoice/edit/{{Invoice Create ID}}",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"invoice",
														"edit",
														"{{Invoice Create ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a student, I shouldn't be able to edit the form information given without course price",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should Post the '400' status code when executing to edit the form information without inputting the course price\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should Post the response below 2000 ms when executing to edit the form information without inputting the course price\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should Post the 'Bad Request' status code name when executing to edit the form information without inputting the course price\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to edit the form information without inputting the course price\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Israk Zahan Monisha1122\",\r\n    \"address\": [\r\n        \"Mi, , MI, Indiana, 49971\"\r\n    ],\r\n    \"phone\": \"12025550120\",\r\n    \"tax\": 6,\r\n    \"user\": \"648fbeba37a20c00197f0f01\",\r\n    \"courses\": [\r\n        {\r\n            \"price\": ,\r\n            \"_id\": \"64a506d2a2b16b0021015e0d\",\r\n            \"title\": \"CloudOps Engineer\",\r\n            \"session\": \"Winter 2021- DevOps Engineer\"\r\n        }\r\n    ],\r\n    \"payments\": [\r\n        {\r\n            \"date\": 1688537267484,\r\n            \"description\": \"\",\r\n            \"method\": \"\",\r\n            \"amount\": \"19\"\r\n        }\r\n    ],\r\n    \"loan\": {\r\n        \"received\": 0,\r\n        \"approved\": \"-1\"\r\n    },\r\n    \"account\": \"TS4U\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/invoice/edit/{{Invoice Create ID}}",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"invoice",
														"edit",
														"{{Invoice Create ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a student, I shouldn't be able to edit the form information given without payment date",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should Post the '400' status code when executing to edit the form information without inputting the payment date\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should Post the response below 2000 ms when executing to edit the form information without inputting the payment date\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should Post the 'Bad Request' status code name when executing to edit the form information without inputting the payment date\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to edit the form information without inputting the payment date\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Israk Zahan Monisha1122\",\r\n    \"address\": [\r\n        \"Mi, , MI, Indiana, 49971\"\r\n    ],\r\n    \"phone\": \"12025550120\",\r\n    \"tax\": 6,\r\n    \"user\": \"648fbeba37a20c00197f0f01\",\r\n    \"courses\": [\r\n        {\r\n            \"price\": 5000,\r\n            \"_id\": \"64a506d2a2b16b0021015e0d\",\r\n            \"title\": \"CloudOps Engineer\",\r\n            \"session\": \"Winter 2021- DevOps Engineer\"\r\n        }\r\n    ],\r\n    \"payments\": [\r\n        {\r\n            \"date\": ,\r\n            \"description\": \"\",\r\n            \"method\": \"\",\r\n            \"amount\": \"19\"\r\n        }\r\n    ],\r\n    \"loan\": {\r\n        \"received\": 0,\r\n        \"approved\": \"-1\"\r\n    },\r\n    \"account\": \"TS4U\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/invoice/edit/{{Invoice Create ID}}",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"invoice",
														"edit",
														"{{Invoice Create ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a student, I shouldn't be able to edit the form information given without course id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should Post the '400' status code when executing to edit the form information without inputting the course id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should Post the response below 2000 ms when executing to edit the form information without inputting the course id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should Post the 'Bad Request' status code name when executing to edit the form information without inputting the course id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to edit the form information without inputting the course id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Israk Zahan Monisha1122\",\r\n    \"address\": [\r\n        \"Mi, , MI, Indiana, 49971\"\r\n    ],\r\n    \"phone\": \"12025550120\",\r\n    \"tax\": 6,\r\n    \"user\": \"648fbeba37a20c00197f0f01\",\r\n    \"courses\": [\r\n        {\r\n            \"price\": 5000,\r\n            \"_id\": \"\",\r\n            \"title\": \"CloudOps Engineer\",\r\n            \"session\": \"Winter 2021- DevOps Engineer\"\r\n        }\r\n    ],\r\n    \"payments\": [\r\n        {\r\n            \"date\": 1688537267484,\r\n            \"description\": \"\",\r\n            \"method\": \"\",\r\n            \"amount\": \"19\"\r\n        }\r\n    ],\r\n    \"loan\": {\r\n        \"received\": 0,\r\n        \"approved\": \"-1\"\r\n    },\r\n    \"account\": \"TS4U\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/invoice/edit/{{Invoice Create ID}}",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"invoice",
														"edit",
														"{{Invoice Create ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a student, I shouldn't be able to edit the form information given without tax id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should Post the '400' status code when executing to edit the form information without inputting the tax id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should Post the response below 2000 ms when executing to edit the form information without inputting the tax id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should Post the 'Bad Request' status code name when executing to edit the form information without inputting the tax id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to edit the form information without inputting the tax id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Israk Zahan Monisha1122\",\r\n    \"address\": [\r\n        \"Mi, , MI, Indiana, 49971\"\r\n    ],\r\n    \"phone\": \"12025550120\",\r\n    \"tax\": ,\r\n    \"user\": \"648fbeba37a20c00197f0f01\",\r\n    \"courses\": [\r\n        {\r\n            \"price\": 5000,\r\n            \"_id\": \"64a506d2a2b16b0021015e0d\",\r\n            \"title\": \"CloudOps Engineer\",\r\n            \"session\": \"Winter 2021- DevOps Engineer\"\r\n        }\r\n    ],\r\n    \"payments\": [\r\n        {\r\n            \"date\": 1688537267484,\r\n            \"description\": \"\",\r\n            \"method\": \"\",\r\n            \"amount\": \"19\"\r\n        }\r\n    ],\r\n    \"loan\": {\r\n        \"received\": 0,\r\n        \"approved\": \"-1\"\r\n    },\r\n    \"account\": \"TS4U\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/invoice/edit/{{Invoice Create ID}}",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"invoice",
														"edit",
														"{{Invoice Create ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "As a student, I shouldn't be able to edit the form information given without name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should Post the '400' status code when executing to edit the form information without inputting the name\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should Post the response below 2000 ms when executing to edit the form information without inputting the name\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should Post the 'Bad Request' status code name when executing to edit the form information without inputting the name\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to edit the form information without inputting the name\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"\",\r\n    \"address\": [\r\n        \"Mi, , MI, Indiana, 49971\"\r\n    ],\r\n    \"phone\": \"12025550120\",\r\n    \"tax\": 6,\r\n    \"user\": \"648fbeba37a20c00197f0f01\",\r\n    \"courses\": [\r\n        {\r\n            \"price\": 5000,\r\n            \"_id\": \"64a506d2a2b16b0021015e0d\",\r\n            \"title\": \"CloudOps Engineer\",\r\n            \"session\": \"Winter 2021- DevOps Engineer\"\r\n        }\r\n    ],\r\n    \"payments\": [\r\n        {\r\n            \"date\": 1688537267484,\r\n            \"description\": \"\",\r\n            \"method\": \"\",\r\n            \"amount\": \"19\"\r\n        }\r\n    ],\r\n    \"loan\": {\r\n        \"received\": 0,\r\n        \"approved\": \"-1\"\r\n    },\r\n    \"account\": \"TS4U\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/invoice/edit/{{Invoice Create ID}}",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"invoice",
														"edit",
														"{{Invoice Create ID}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Leaderboard",
					"item": [
						{
							"name": "Summary",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a student.I should be able to see on the progress",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Stuednt get the leaderboard List successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Stuednt get the leaderboard List  within 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/progress/myprogress/summary",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"progress",
														"myprogress",
														"summary"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a student, I shouldn't be able to see on the progress report given without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should Post the '400' status code when executing to see on the progress report without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should Post the response below 2000 ms when executing to see on the progress report without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should Post the 'Bad Request' status code name when executing to see on the progress report without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to see on the progress report without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/progress/myprogress/summary",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"progress",
														"myprogress",
														"summary"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Interview",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a student.I should be able to interview on the progress",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Stuednt get the leaderboard List successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Stuednt get the leaderboard List  within 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/progress/myprogress/interview",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"progress",
														"myprogress",
														"interview"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a student, I shouldn't be able to interview on the progress report given without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should Post the '400' status code when executing to interview on the progress report without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should Post the response below 2000 ms when executing to interview on the progress report without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should Post the 'Bad Request' status code name when executing to interview on the progress report without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to interview on the progress report without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/progress/myprogress/interview",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"progress",
														"myprogress",
														"interview"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Others Interview",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "As a student.I should be able to other on the  my progress",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/progress/myprogress/other",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"progress",
														"myprogress",
														"other"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As a student, I shouldn't be able to others interview on the progress report given without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should Post the '400' status code when executing to others interview on the progress report without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should Post the response below 2000 ms when executing to others interview on the progress report without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should Post the 'Bad Request' status code name when executing to others interview on the progress report without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to others interview on the progress report without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/progress/myprogress/other",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"progress",
														"myprogress",
														"other"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Leaderboard progress",
							"item": [
								{
									"name": "Member List",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As a user, I should be able to see program&session the leaderboard List",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful GET request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl_user}}/api/progress/leaderboard?program=611136a8c4ea52404a295b06&session=61113557c4ea52404a295afd",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"progress",
																"leaderboard"
															],
															"query": [
																{
																	"key": "program",
																	"value": "611136a8c4ea52404a295b06"
																},
																{
																	"key": "session",
																	"value": "61113557c4ea52404a295afd"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As a student, I shouldn't be able to see program&session the leaderboard List given without token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Imegration spacilist should Post the '400' status code when executing to see program&session the leaderboard List without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Imegration spacilist should Post the response below 2000 ms when executing to see program&session the leaderboard List without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Imegration spacilist should Post the 'Bad Request' status code name when executing to see program&session the leaderboard List without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to see program&session the leaderboard List without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.have.header(\"Date\");\r",
																	"    pm.response.to.have.header(\"Connection\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl_user}}/api/progress/leaderboard?program=611136a8c4ea52404a295b06&session=61113557c4ea52404a295afd",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"progress",
																"leaderboard"
															],
															"query": [
																{
																	"key": "program",
																	"value": "611136a8c4ea52404a295b06"
																},
																{
																	"key": "session",
																	"value": "61113557c4ea52404a295afd"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Individual Member",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "As a user, I should be able to get the leaderboard List",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Stuednt get the leaderboard List successfully\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Stuednt get the leaderboard List  within 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	"pm.test(\"results key matched\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"profilePicture\");\r",
																	"     pm.expect(pm.response.text()).to.include(\"lastName\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl_user}}/api/progress/leaderboard",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"progress",
																"leaderboard"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "As a student, I shouldn't be able to get the leaderboard list given without token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Imegration spacilist should Post the '400' status code when executing to get the leaderboard list without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Imegration spacilist should Post the response below 2000 ms when executing to get the leaderboard list without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Imegration spacilist should Post the 'Bad Request' status code name when executing to get the leaderboard list without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to get the leaderboard list without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.have.header(\"Date\");\r",
																	"    pm.response.to.have.header(\"Connection\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl_user}}/api/progress/leaderboard",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"progress",
																"leaderboard"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Enrollment inquires/All inquires",
					"item": [
						{
							"name": "View logs",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "User can able to view the logs Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/enrollment/inquiry/logs/64307d71ac7833827cf8cc31",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"enrollment",
														"inquiry",
														"logs",
														"64307d71ac7833827cf8cc31"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an user, I shouldn't be able to view the logs list given without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should GET the '400' status code when executing to view the logs list without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should GET the response below 2000 ms when executing to view the logs list without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should GET the 'Bad Request' status code name when executing toview the logs list without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to view the logs list without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/enrollment/inquiry/logs/64307d71ac7833827cf8cc31",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"enrollment",
														"inquiry",
														"logs",
														"64307d71ac7833827cf8cc31"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Checklist get",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "User can able to get the checklist",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/enrollment/inquiry/checklist/get/64898e65a07a620019a6748a",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"enrollment",
														"inquiry",
														"checklist",
														"get",
														"64898e65a07a620019a6748a"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "As an user, I shouldn't be able to can able to get the checklist given without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Imegration spacilist should GET the '400' status code when executing to can able to get the checklist without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Imegration spacilist should GET the response below 2000 ms when executing to can able to get the checklist without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"Imegration spacilist should GET the 'Bad Request' status code name when executing to can able to get the checklist without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to can able to GET the checklist without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.have.header(\"Date\");\r",
															"    pm.response.to.have.header(\"Connection\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/enrollment/inquiry/checklist/get/64898e65a07a620019a6748a",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"enrollment",
														"inquiry",
														"checklist",
														"get",
														"64898e65a07a620019a6748a"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Checklist Edit/update",
							"item": [
								{
									"name": "Update individual id",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "User can able to update the checklist",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful PATCH request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"Israk-Test\",\r\n    \"phone\": \"1\",\r\n    \"email\": \"fsdfgd@ghsdv.dg\",\r\n    \"gender\": \"male\",\r\n    \"hearAbout\": \"instagram\",\r\n    \"hearAboutInput\": \"\",\r\n    \"eligibleToWork\": true,\r\n    \"eligibleToWorkInput\": \"\",\r\n    \"joinedTrial\": true,\r\n    \"hoursWeekly\": true,\r\n    \"currentCredit\": true,\r\n    \"defaulted\": false,\r\n    \"trialSupport\": false,\r\n    \"currentEducation\": \"college\",\r\n    \"howSoonToJoin\": \"afterSixMonths\",\r\n    \"planToOverSeas\": false,\r\n    \"watchedWebinar\": true,\r\n    \"doneITCourse\": false,\r\n    \"completedITCourse\": \"\",\r\n    \"currentITSkill\": \"understandBasicWeb\",\r\n    \"currentITSkillInput\": \"\",\r\n    \"enrollDirectly\": true,\r\n    \"whereToGoGrant\": \"localMichinganWorks\",\r\n    \"workingSchedule\": \"secondShift\",\r\n    \"currentOccupation\": \"cashier\",\r\n    \"currentOccupationInput\": \"\",\r\n    \"veteran\": false,\r\n    \"felenoy\": true,\r\n    \"driverLicense\": true,\r\n    \"basicComputer\": true,\r\n    \"availableOnWorkshop\": true,\r\n    \"ts4uApp\": true,\r\n    \"preferCommunication\": \"phoneCall\",\r\n    \"followUpDate\": \"2023-06-14T00:00:00.000Z\",\r\n    \"time\": \"2023-07-05T15:00:00.000Z\",\r\n    \"discussion\": \"\",\r\n    \"followUp\": \"\",\r\n    \"actionItems\": \"\",\r\n    \"inquiry\": \"64307d71ac7833827cf8cc31\",\r\n    \"state\": \"\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/enrollment/inquiry/checklist/edit/64898e65a07a620019a6748a",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"enrollment",
																"inquiry",
																"checklist",
																"edit",
																"64898e65a07a620019a6748a"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Nagative",
											"item": [
												{
													"name": "As an user, I shouldn't be able to can able to update the any user information given without token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Imegration spacilist should PATCH the '400' status code when executing to can able to get the checklist without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Imegration spacilist should PATCH the response below 2000 ms when executing to can able to get the checklist without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Imegration spacilist should PATCH the 'Bad Request' status code name when executing to can able to get the checklist without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to can able to PATCH the checklist without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.have.header(\"Date\");\r",
																	"    pm.response.to.have.header(\"Connection\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"Israk-Test\",\r\n    \"phone\": \"1\",\r\n    \"email\": \"fsdfgd@ghsdv.dg\",\r\n    \"gender\": \"male\",\r\n    \"hearAbout\": \"instagram\",\r\n    \"hearAboutInput\": \"\",\r\n    \"eligibleToWork\": true,\r\n    \"eligibleToWorkInput\": \"\",\r\n    \"joinedTrial\": true,\r\n    \"hoursWeekly\": true,\r\n    \"currentCredit\": true,\r\n    \"defaulted\": false,\r\n    \"trialSupport\": false,\r\n    \"currentEducation\": \"college\",\r\n    \"howSoonToJoin\": \"afterSixMonths\",\r\n    \"planToOverSeas\": false,\r\n    \"watchedWebinar\": true,\r\n    \"doneITCourse\": false,\r\n    \"completedITCourse\": \"\",\r\n    \"currentITSkill\": \"understandBasicWeb\",\r\n    \"currentITSkillInput\": \"\",\r\n    \"enrollDirectly\": true,\r\n    \"whereToGoGrant\": \"localMichinganWorks\",\r\n    \"workingSchedule\": \"secondShift\",\r\n    \"currentOccupation\": \"cashier\",\r\n    \"currentOccupationInput\": \"\",\r\n    \"veteran\": false,\r\n    \"felenoy\": true,\r\n    \"driverLicense\": true,\r\n    \"basicComputer\": true,\r\n    \"availableOnWorkshop\": true,\r\n    \"ts4uApp\": true,\r\n    \"preferCommunication\": \"phoneCall\",\r\n    \"followUpDate\": \"2023-06-14T00:00:00.000Z\",\r\n    \"time\": \"2023-07-05T15:00:00.000Z\",\r\n    \"discussion\": \"\",\r\n    \"followUp\": \"\",\r\n    \"actionItems\": \"\",\r\n    \"inquiry\": \"64307d71ac7833827cf8cc31\",\r\n    \"state\": \"\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/enrollment/inquiry/checklist/edit/64898e65a07a620019a6748a",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"enrollment",
																"inquiry",
																"checklist",
																"edit",
																"64898e65a07a620019a6748a"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an user, I shouldn't be able to can able to update the any user information given without hear about",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Imegration spacilist should PATCH the '400' status code when executing to can able to get the checklist without inputting the hear about\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Imegration spacilist should PATCH the response below 2000 ms when executing to can able to get the checklist without inputting the hear about\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Imegration spacilist should PATCH the 'Bad Request' status code name when executing to can able to get the checklist without inputting the hear about\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to can able to PATCH the checklist without inputting the hear about\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.have.header(\"Date\");\r",
																	"    pm.response.to.have.header(\"Connection\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"Israk-Test\",\r\n    \"phone\": \"1\",\r\n    \"email\": \"fsdfgd@ghsdv.dg\",\r\n    \"gender\": \"male\",\r\n    \"hearAbout\": \"\",\r\n    \"hearAboutInput\": \"\",\r\n    \"eligibleToWork\": true,\r\n    \"eligibleToWorkInput\": \"\",\r\n    \"joinedTrial\": true,\r\n    \"hoursWeekly\": true,\r\n    \"currentCredit\": true,\r\n    \"defaulted\": false,\r\n    \"trialSupport\": false,\r\n    \"currentEducation\": \"college\",\r\n    \"howSoonToJoin\": \"afterSixMonths\",\r\n    \"planToOverSeas\": false,\r\n    \"watchedWebinar\": true,\r\n    \"doneITCourse\": false,\r\n    \"completedITCourse\": \"\",\r\n    \"currentITSkill\": \"understandBasicWeb\",\r\n    \"currentITSkillInput\": \"\",\r\n    \"enrollDirectly\": true,\r\n    \"whereToGoGrant\": \"localMichinganWorks\",\r\n    \"workingSchedule\": \"secondShift\",\r\n    \"currentOccupation\": \"cashier\",\r\n    \"currentOccupationInput\": \"\",\r\n    \"veteran\": false,\r\n    \"felenoy\": true,\r\n    \"driverLicense\": true,\r\n    \"basicComputer\": true,\r\n    \"availableOnWorkshop\": true,\r\n    \"ts4uApp\": true,\r\n    \"preferCommunication\": \"phoneCall\",\r\n    \"followUpDate\": \"2023-06-14T00:00:00.000Z\",\r\n    \"time\": \"2023-07-05T15:00:00.000Z\",\r\n    \"discussion\": \"\",\r\n    \"followUp\": \"\",\r\n    \"actionItems\": \"\",\r\n    \"inquiry\": \"64307d71ac7833827cf8cc31\",\r\n    \"state\": \"\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/enrollment/inquiry/checklist/edit/64898e65a07a620019a6748a",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"enrollment",
																"inquiry",
																"checklist",
																"edit",
																"64898e65a07a620019a6748a"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an user, I shouldn't be able to can able to update the any user information given without prefer Communication",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Imegration spacilist should PATCH the '400' status code when executing to can able to get the checklist without inputting the prefer Communication\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Imegration spacilist should PATCH the response below 2000 ms when executing to can able to get the checklist without inputting the prefer Communication\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Imegration spacilist should PATCH the 'Bad Request' status code name when executing to can able to get the checklist without inputting the prefer Communication\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to can able to PATCH the checklist without inputting the prefer Communication\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.have.header(\"Date\");\r",
																	"    pm.response.to.have.header(\"Connection\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"Israk-Test\",\r\n    \"phone\": \"1\",\r\n    \"email\": \"fsdfgd@ghsdv.dg\",\r\n    \"gender\": \"male\",\r\n    \"hearAbout\": \"instagram\",\r\n    \"hearAboutInput\": \"\",\r\n    \"eligibleToWork\": true,\r\n    \"eligibleToWorkInput\": \"\",\r\n    \"joinedTrial\": true,\r\n    \"hoursWeekly\": true,\r\n    \"currentCredit\": true,\r\n    \"defaulted\": false,\r\n    \"trialSupport\": false,\r\n    \"currentEducation\": \"college\",\r\n    \"howSoonToJoin\": \"afterSixMonths\",\r\n    \"planToOverSeas\": false,\r\n    \"watchedWebinar\": true,\r\n    \"doneITCourse\": false,\r\n    \"completedITCourse\": \"\",\r\n    \"currentITSkill\": \"understandBasicWeb\",\r\n    \"currentITSkillInput\": \"\",\r\n    \"enrollDirectly\": true,\r\n    \"whereToGoGrant\": \"localMichinganWorks\",\r\n    \"workingSchedule\": \"secondShift\",\r\n    \"currentOccupation\": \"cashier\",\r\n    \"currentOccupationInput\": \"\",\r\n    \"veteran\": false,\r\n    \"felenoy\": true,\r\n    \"driverLicense\": true,\r\n    \"basicComputer\": true,\r\n    \"availableOnWorkshop\": true,\r\n    \"ts4uApp\": true,\r\n    \"preferCommunication\": \"\",\r\n    \"followUpDate\": \"2023-06-14T00:00:00.000Z\",\r\n    \"time\": \"2023-07-05T15:00:00.000Z\",\r\n    \"discussion\": \"\",\r\n    \"followUp\": \"\",\r\n    \"actionItems\": \"\",\r\n    \"inquiry\": \"64307d71ac7833827cf8cc31\",\r\n    \"state\": \"\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/enrollment/inquiry/checklist/edit/64898e65a07a620019a6748a",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"enrollment",
																"inquiry",
																"checklist",
																"edit",
																"64898e65a07a620019a6748a"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an user, I shouldn't be able to can able to update the any user information given without gender",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	" //Validate the status code\r",
																	"pm.test(\"Imegration spacilist should PATCH the '400' status code when executing to can able to get the checklist without inputting the gender\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Imegration spacilist should PATCH the response below 2000 ms when executing to can able to get the checklist without inputting the gender\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Imegration spacilist should PATCH the 'Bad Request' status code name when executing to can able to get the checklist without inputting the gender\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to can able to PATCH the checklist without inputting the gender\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.have.header(\"Date\");\r",
																	"    pm.response.to.have.header(\"Connection\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"Israk-Test\",\r\n    \"phone\": \"1\",\r\n    \"email\": \"fsdfgd@ghsdv.dg\",\r\n    \"gender\": \"\",\r\n    \"hearAbout\": \"instagram\",\r\n    \"hearAboutInput\": \"\",\r\n    \"eligibleToWork\": true,\r\n    \"eligibleToWorkInput\": \"\",\r\n    \"joinedTrial\": true,\r\n    \"hoursWeekly\": true,\r\n    \"currentCredit\": true,\r\n    \"defaulted\": false,\r\n    \"trialSupport\": false,\r\n    \"currentEducation\": \"college\",\r\n    \"howSoonToJoin\": \"afterSixMonths\",\r\n    \"planToOverSeas\": false,\r\n    \"watchedWebinar\": true,\r\n    \"doneITCourse\": false,\r\n    \"completedITCourse\": \"\",\r\n    \"currentITSkill\": \"understandBasicWeb\",\r\n    \"currentITSkillInput\": \"\",\r\n    \"enrollDirectly\": true,\r\n    \"whereToGoGrant\": \"localMichinganWorks\",\r\n    \"workingSchedule\": \"secondShift\",\r\n    \"currentOccupation\": \"cashier\",\r\n    \"currentOccupationInput\": \"\",\r\n    \"veteran\": false,\r\n    \"felenoy\": true,\r\n    \"driverLicense\": true,\r\n    \"basicComputer\": true,\r\n    \"availableOnWorkshop\": true,\r\n    \"ts4uApp\": true,\r\n    \"preferCommunication\": \"phoneCall\",\r\n    \"followUpDate\": \"2023-06-14T00:00:00.000Z\",\r\n    \"time\": \"2023-07-05T15:00:00.000Z\",\r\n    \"discussion\": \"\",\r\n    \"followUp\": \"\",\r\n    \"actionItems\": \"\",\r\n    \"inquiry\": \"64307d71ac7833827cf8cc31\",\r\n    \"state\": \"\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/enrollment/inquiry/checklist/edit/64898e65a07a620019a6748a",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"enrollment",
																"inquiry",
																"checklist",
																"edit",
																"64898e65a07a620019a6748a"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an user, I shouldn't be able to can able to update the any user information given without email account",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Imegration spacilist should PATCH the '400' status code when executing to can able to get the checklist without inputting the email account\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Imegration spacilist should PATCH the response below 2000 ms when executing to can able to get the checklist without inputting the email account\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Imegration spacilist should PATCH the 'Bad Request' status code name when executing to can able to get the checklist without inputting the email account\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to can able to PATCH the checklist without inputting the email account\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.have.header(\"Date\");\r",
																	"    pm.response.to.have.header(\"Connection\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"Israk-Test\",\r\n    \"phone\": \"1\",\r\n    \"email\": \"\",\r\n    \"gender\": \"male\",\r\n    \"hearAbout\": \"instagram\",\r\n    \"hearAboutInput\": \"\",\r\n    \"eligibleToWork\": true,\r\n    \"eligibleToWorkInput\": \"\",\r\n    \"joinedTrial\": true,\r\n    \"hoursWeekly\": true,\r\n    \"currentCredit\": true,\r\n    \"defaulted\": false,\r\n    \"trialSupport\": false,\r\n    \"currentEducation\": \"college\",\r\n    \"howSoonToJoin\": \"afterSixMonths\",\r\n    \"planToOverSeas\": false,\r\n    \"watchedWebinar\": true,\r\n    \"doneITCourse\": false,\r\n    \"completedITCourse\": \"\",\r\n    \"currentITSkill\": \"understandBasicWeb\",\r\n    \"currentITSkillInput\": \"\",\r\n    \"enrollDirectly\": true,\r\n    \"whereToGoGrant\": \"localMichinganWorks\",\r\n    \"workingSchedule\": \"secondShift\",\r\n    \"currentOccupation\": \"cashier\",\r\n    \"currentOccupationInput\": \"\",\r\n    \"veteran\": false,\r\n    \"felenoy\": true,\r\n    \"driverLicense\": true,\r\n    \"basicComputer\": true,\r\n    \"availableOnWorkshop\": true,\r\n    \"ts4uApp\": true,\r\n    \"preferCommunication\": \"phoneCall\",\r\n    \"followUpDate\": \"2023-06-14T00:00:00.000Z\",\r\n    \"time\": \"2023-07-05T15:00:00.000Z\",\r\n    \"discussion\": \"\",\r\n    \"followUp\": \"\",\r\n    \"actionItems\": \"\",\r\n    \"inquiry\": \"64307d71ac7833827cf8cc31\",\r\n    \"state\": \"\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/enrollment/inquiry/checklist/edit/64898e65a07a620019a6748a",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"enrollment",
																"inquiry",
																"checklist",
																"edit",
																"64898e65a07a620019a6748a"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an user, I shouldn't be able to can able to update the any user information given without phone number",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Imegration spacilist should PATCH the '400' status code when executing to can able to get the checklist without inputting the phone number\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Imegration spacilist should PATCH the response below 2000 ms when executing to can able to get the checklist without inputting the phone number\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Imegration spacilist should PATCH the 'Bad Request' status code name when executing to can able to get the checklist without inputting the phone number\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to can able to PATCH the checklist without inputting the phone number\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.have.header(\"Date\");\r",
																	"    pm.response.to.have.header(\"Connection\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"Israk-Test\",\r\n    \"phone\": \"\",\r\n    \"email\": \"fsdfgd@ghsdv.dg\",\r\n    \"gender\": \"male\",\r\n    \"hearAbout\": \"instagram\",\r\n    \"hearAboutInput\": \"\",\r\n    \"eligibleToWork\": true,\r\n    \"eligibleToWorkInput\": \"\",\r\n    \"joinedTrial\": true,\r\n    \"hoursWeekly\": true,\r\n    \"currentCredit\": true,\r\n    \"defaulted\": false,\r\n    \"trialSupport\": false,\r\n    \"currentEducation\": \"college\",\r\n    \"howSoonToJoin\": \"afterSixMonths\",\r\n    \"planToOverSeas\": false,\r\n    \"watchedWebinar\": true,\r\n    \"doneITCourse\": false,\r\n    \"completedITCourse\": \"\",\r\n    \"currentITSkill\": \"understandBasicWeb\",\r\n    \"currentITSkillInput\": \"\",\r\n    \"enrollDirectly\": true,\r\n    \"whereToGoGrant\": \"localMichinganWorks\",\r\n    \"workingSchedule\": \"secondShift\",\r\n    \"currentOccupation\": \"cashier\",\r\n    \"currentOccupationInput\": \"\",\r\n    \"veteran\": false,\r\n    \"felenoy\": true,\r\n    \"driverLicense\": true,\r\n    \"basicComputer\": true,\r\n    \"availableOnWorkshop\": true,\r\n    \"ts4uApp\": true,\r\n    \"preferCommunication\": \"phoneCall\",\r\n    \"followUpDate\": \"2023-06-14T00:00:00.000Z\",\r\n    \"time\": \"2023-07-05T15:00:00.000Z\",\r\n    \"discussion\": \"\",\r\n    \"followUp\": \"\",\r\n    \"actionItems\": \"\",\r\n    \"inquiry\": \"64307d71ac7833827cf8cc31\",\r\n    \"state\": \"\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/enrollment/inquiry/checklist/edit/64898e65a07a620019a6748a",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"enrollment",
																"inquiry",
																"checklist",
																"edit",
																"64898e65a07a620019a6748a"
															]
														}
													},
													"response": []
												},
												{
													"name": "As an user, I shouldn't be able to can able to update the any user information given without user name",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"Imegration spacilist should PATCH the '400' status code when executing to can able to get the checklist without inputting the user name\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"Imegration spacilist should PATCH the response below 2000 ms when executing to can able to get the checklist without inputting the user name\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"Imegration spacilist should PATCH the 'Bad Request' status code name when executing to can able to get the checklist without inputting the user name\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to can able to PATCH the checklist without inputting the user name\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.have.header(\"Date\");\r",
																	"    pm.response.to.have.header(\"Connection\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"\",\r\n    \"phone\": \"1\",\r\n    \"email\": \"fsdfgd@ghsdv.dg\",\r\n    \"gender\": \"male\",\r\n    \"hearAbout\": \"instagram\",\r\n    \"hearAboutInput\": \"\",\r\n    \"eligibleToWork\": true,\r\n    \"eligibleToWorkInput\": \"\",\r\n    \"joinedTrial\": true,\r\n    \"hoursWeekly\": true,\r\n    \"currentCredit\": true,\r\n    \"defaulted\": false,\r\n    \"trialSupport\": false,\r\n    \"currentEducation\": \"college\",\r\n    \"howSoonToJoin\": \"afterSixMonths\",\r\n    \"planToOverSeas\": false,\r\n    \"watchedWebinar\": true,\r\n    \"doneITCourse\": false,\r\n    \"completedITCourse\": \"\",\r\n    \"currentITSkill\": \"understandBasicWeb\",\r\n    \"currentITSkillInput\": \"\",\r\n    \"enrollDirectly\": true,\r\n    \"whereToGoGrant\": \"localMichinganWorks\",\r\n    \"workingSchedule\": \"secondShift\",\r\n    \"currentOccupation\": \"cashier\",\r\n    \"currentOccupationInput\": \"\",\r\n    \"veteran\": false,\r\n    \"felenoy\": true,\r\n    \"driverLicense\": true,\r\n    \"basicComputer\": true,\r\n    \"availableOnWorkshop\": true,\r\n    \"ts4uApp\": true,\r\n    \"preferCommunication\": \"phoneCall\",\r\n    \"followUpDate\": \"2023-06-14T00:00:00.000Z\",\r\n    \"time\": \"2023-07-05T15:00:00.000Z\",\r\n    \"discussion\": \"\",\r\n    \"followUp\": \"\",\r\n    \"actionItems\": \"\",\r\n    \"inquiry\": \"64307d71ac7833827cf8cc31\",\r\n    \"state\": \"\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/enrollment/inquiry/checklist/edit/64898e65a07a620019a6748a",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"enrollment",
																"inquiry",
																"checklist",
																"edit",
																"64898e65a07a620019a6748a"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Update Discussion",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "User can able to delete the checklist",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful PATCH request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"success\": true,\r\n    \"inquiry\": {\r\n        \"_id\": \"63d6d0dc8505fc4c98faa21d\",\r\n        \"discussions\": [\r\n            {\r\n                \"_id\": \"64b516acc352590024283276\",\r\n                \"text\": \"This is for test\",\r\n                \"user\": {\r\n                    \"profilePicture\": \"https://lh3.googleusercontent.com/a-/AOh14Gi2-xfBWZTjEHdH-6HQHAbp8ejjrQLJ_JG3K_ECeA=s96-c\",\r\n                    \"lastName\": \"Mozumdar\",\r\n                    \"_id\": \"612f878b31f80587022a0e79\",\r\n                    \"email\": \"jpranto2@gmail.com\",\r\n                    \"firstName\": \"Pranto\",\r\n                    \"fullName\": \"Pranto Mozumdar\"\r\n                },\r\n                \"date\": \"2023-07-17T10:23:40.264Z\"\r\n            }\r\n        ]\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/enrollment/inquiry/discussion/delete/63d6d0dc8505fc4c98faa21d/64b65c422c478b00247aa788",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"enrollment",
																"inquiry",
																"discussion",
																"delete",
																"63d6d0dc8505fc4c98faa21d",
																"64b65c422c478b00247aa788"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "User can able to delete the checklist",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response time is less than 2000ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Body matches string response successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Successful PATCH request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
																	"});\r",
																	"pm.test(\"Content-Length is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Length\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"success\": true,\r\n    \"inquiry\": {\r\n        \"_id\": \"63d6d0dc8505fc4c98faa21d\",\r\n        \"discussions\": [\r\n            {\r\n                \"_id\": \"64b516acc352590024283276\",\r\n                \"text\": \"This is for test\",\r\n                \"user\": {\r\n                    \"profilePicture\": \"https://lh3.googleusercontent.com/a-/AOh14Gi2-xfBWZTjEHdH-6HQHAbp8ejjrQLJ_JG3K_ECeA=s96-c\",\r\n                    \"lastName\": \"Mozumdar\",\r\n                    \"_id\": \"612f878b31f80587022a0e79\",\r\n                    \"email\": \"jpranto2@gmail.com\",\r\n                    \"firstName\": \"Pranto\",\r\n                    \"fullName\": \"Pranto Mozumdar\"\r\n                },\r\n                \"date\": \"2023-07-17T10:23:40.264Z\"\r\n            }\r\n        ]\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/enrollment/inquiry/discussion/delete/63d6d0dc8505fc4c98faa21d/64b65c422c478b00247aa788",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"enrollment",
																"inquiry",
																"discussion",
																"delete",
																"63d6d0dc8505fc4c98faa21d",
																"64b65c422c478b00247aa788"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Send email",
							"item": [
								{
									"name": "User can able to send the email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"success\": true,\r\n    \"checkList\": {\r\n        \"_id\": \"64898e65a07a620019a6748a\",\r\n        \"lastEmailSent\": \"2023-08-05T05:25:36.493Z\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/enrollment/inquiry/checklist/sendemail/64898e65a07a620019a6748a",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"enrollment",
												"inquiry",
												"checklist",
												"sendemail",
												"64898e65a07a620019a6748a"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Send text",
							"item": [
								{
									"name": "User can able to send text",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"assignedTo\": \"64883e7837a20c00197f0a33\",\r\n    \"status\": \"new\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/enrollment/inquiry/update/64bca9e5a8c62c0020959be5",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"enrollment",
												"inquiry",
												"update",
												"64bca9e5a8c62c0020959be5"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete inquires",
							"item": [
								{
									"name": "User can able to delete the inquires",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful DELETE request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"success\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/enrollment/inquiry/delete/64bca9e5a8c62c0020959be9",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"enrollment",
												"inquiry",
												"delete",
												"64bca9e5a8c62c0020959be9"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "My inquires",
							"item": [
								{
									"name": "User can able to do their inquires",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful DELETE request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/enrollment/inquiry/my-inquiries",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"enrollment",
												"inquiry",
												"my-inquiries"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Content service",
			"item": [
				{
					"name": "Blog_save",
					"item": [
						{
							"name": "As a admin, I want to save the  blog any individual person",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Body matches string response successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/blog/save/{{Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"blog",
										"save",
										"{{Id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "My Uploaded Documents",
					"item": [
						{
							"name": "Add Documents",
							"item": [
								{
									"name": "As an user, i want to add documents",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"document_id\", jsonData.document._id);\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201, 200]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{admin_staging_token}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Questions\",\r\n    \"description\": \"<p>This document is the texhnical questions document</p>\\n\",\r\n    \"attachment\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/document/add",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"document",
												"add"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Comment",
							"item": [
								{
									"name": "Create Comment",
									"item": [
										{
											"name": "As an user, I should be able create comment on the uploaded documents",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"Content Uploaded document create ID\", jsonData.comments._id);\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"comment\": \"Hlw\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/document/mydocuments/comment/create/6498c6c22c51110020691846",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"document",
														"mydocuments",
														"comment",
														"create",
														"6498c6c22c51110020691846"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "See Comment",
									"item": [
										{
											"name": "As an user, I should be able comment on the uploaded documents",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Successful PUT request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"comment\": \"hi\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/media/comment/64a3b42d2ab66c0019adebda",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"media",
														"comment",
														"64a3b42d2ab66c0019adebda"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get all Category",
							"item": [
								{
									"name": "As an user, i will get all category doments",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{admin_staging_token}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 10,\r\n    \"sort_by\": \"newest\",\r\n    \"userId\": \"61180dfa9f89a6eabdc8dba6\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/document/userdocument/getall",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"document",
												"userdocument",
												"getall"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edit Documets",
							"item": [
								{
									"name": "As a user, i want to edit the documents by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful PATCH request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{admin_staging_token}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Technical Questions\",\r\n    \"description\": \"<p>This documents is workshop technical questions videos answers test</p>\\n\",\r\n    \"attachment\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/document/edit/{{document_id}}",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"document",
												"edit",
												"{{document_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "My documents",
							"item": [
								{
									"name": "As an user, i want to get all the document",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"document Id\", jsonData.documents._id);\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/document/mydocuments",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"document",
												"mydocuments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Single document",
							"item": [
								{
									"name": "As an user, I should be able create comment on the single document",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl_user}}/api/document/singledocument/6498c6c22c51110020691846",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"document",
												"singledocument",
												"6498c6c22c51110020691846"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "E2E",
							"item": [
								{
									"name": "As an user, I should be able see on my all documents",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"HR can create coments the document post\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"HR can create coments new blog bellow 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Upload document create comment response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl_user}}/api/document/myalldocuments/e2e",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"document",
												"myalldocuments",
												"e2e"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User Document add",
							"item": [
								{
									"name": "User can add document on user portal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Server is runnung\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl_user}}/api/document/userdocument/add",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"document",
												"userdocument",
												"add"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User portal delete document",
							"item": [
								{
									"name": "User can delete document on user portal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful Delete request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl_user}}/api/document/userdocument/deletebyadmin/{{document_id}}",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"document",
												"userdocument",
												"deletebyadmin",
												"{{document_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Document",
							"item": [
								{
									"name": "User can get document on user portal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl_user}}/api/document/userdocument/get",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"document",
												"userdocument",
												"get"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Use document export",
							"item": [
								{
									"name": "As user, I can export the user domunebt in CSV file",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"query\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/document/userdocument/export",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"document",
												"userdocument",
												"export"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Use document",
							"item": [
								{
									"name": "As a user, I can go back the all user page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful Delete request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/document/userdocument/users",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"document",
												"userdocument",
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Content",
							"item": [
								{
									"name": "Student can be able to get all the contents",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"document_id\",jsonData.comments[0]._id);\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{admin_staging_token}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/content/comment/get/61560e9060b919ef942a0f56",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"content",
												"comment",
												"get",
												"61560e9060b919ef942a0f56"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Mock Interviews",
					"item": [
						{
							"name": "Final submission",
							"item": [
								{
									"name": "As an student, I should be able to final submission on the mock interview quetion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"interview\": \"61a8db1d293e1eb7dd9afe91\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/interview/finalsubmission",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"interview",
												"finalsubmission"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Clone interview",
							"item": [
								{
									"name": "Filter",
									"item": [
										{
											"name": "As a student, I should be able to delete on the mock interview quetion",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Server is runnung\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"program\": \"\",\r\n    \"session\": \"\",\r\n    \"query\": \"mitul\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/calender/filter-user",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"calender",
														"filter-user"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "View",
									"item": [
										{
											"name": "As a student, I should be able to shared user on the mock interview quetion",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response time is less than 2000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Body matches string response successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Server is runnung\");\r",
															"});\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
															"});\r",
															"pm.test(\"Content-Length is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Length\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{admin_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_user}}/api/interview/cloneinterview/{{content mock interview create id}}",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"interview",
														"cloneinterview",
														"{{content mock interview create id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Answer",
							"item": [
								{
									"name": "As an user, I should be able to start on the mock interview",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"HR can be shared on the bellow 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"HR can be shared on the response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"HR can be shared mock interview on the GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl_user}}/api/interview/answer/61a8db1d293e1eb7dd9afe91/{{content mock interview create id}}",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"interview",
												"answer",
												"61a8db1d293e1eb7dd9afe91",
												"{{content mock interview create id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "As a student, I should be able to update on the mock interview answer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Server is runnung\");\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"interview\": \"61a8db1d293e1eb7dd9afe91\",\r\n    \"audio\": \"https://users-mock-interviews-answer.nyc3.digitaloceanspaces.com/23-7-2023/1690086325687-interview.webm\",\r\n    \"question\": \"61a8db40293e1eb7dd9afe92\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/interview/submit-answer",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"interview",
												"submit-answer"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Documents and Labs / Content / Job Market / Job Profile / Job Offer / Join a Job - First Week",
					"item": [
						{
							"name": "Get category",
							"item": [
								{
									"name": "As a student, I should be able to see on the user progress",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"categories\");\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl_user}}/api/category/getcategory",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"category",
												"getcategory"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Mock Interviews Questions/Answers",
					"item": [
						{
							"name": "Add Interview",
							"item": [
								{
									"name": "User can able to add the interview",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"Intarview ID\", jsonData.interview._id);\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful Delete request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Java Interview\",\r\n    \"isActive\": true,\r\n    \"index\": 0,\r\n    \"groups\": [\r\n        \"64605638145e9700180b7a47\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/interview/addinterview",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"interview",
												"addinterview"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bulk Upload",
							"item": [
								{
									"name": "User can able to upload the question's csv file",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "/C:/Users/Asus/OneDrive/Desktop/inquiry_bulk.csv"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/interview/question/bulkupload/64c9f040191bf70020c8520a",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"interview",
												"question",
												"bulkupload",
												"64c9f040191bf70020c8520a"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Category",
					"item": [
						{
							"name": "Get Category",
							"item": [
								{
									"name": "User can get all the category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"categories\");\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Test1\",\r\n    \"categoryImage\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/any-document/1687771327839-Pic2.png\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/category/getcategory",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"category",
												"getcategory"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update category",
							"item": [
								{
									"name": "User can update the category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"java444\",\r\n    \"categoryId\": \"649958c2bdecc40020e9724a\",\r\n    \"categoryImage\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/any-document/1687771327839-Pic2.png\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/category/update",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"category",
												"update"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create Category",
							"item": [
								{
									"name": "User can create the category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Test1\",\r\n    \"categoryImage\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/any-document/1687771327839-Pic2.png\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/category/create",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"category",
												"create"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Interview Q & A",
					"item": [
						{
							"name": "All Programme Search Box",
							"item": [
								{
									"name": "User can able to search the programe by writting the programme name in Search box",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"categories\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl_user}}/api/category/getcategory",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"category",
												"getcategory"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Job Market(ContentRoutes)",
					"item": [
						{
							"name": "Searching job on search box",
							"item": [
								{
									"name": "User can able to search the job by using the name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 1,\r\n    \"skip\": null,\r\n    \"sort_by\": \"newest\",\r\n    \"program\": null,\r\n    \"query\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/content/getall/jobmarket?tag=all",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"content",
												"getall",
												"jobmarket"
											],
											"query": [
												{
													"key": "tag",
													"value": "all"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Add new job",
							"item": [
								{
									"name": "User can able to search the job by using the name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"Job market add ID\", jsonData.content._id);\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Test by Israk\",\r\n    \"description\": \"<p>we prepare the people for job sciking easily</p>\",\r\n    \"category\": \"jobmarket\",\r\n    \"tags\": [],\r\n    \"dependencies\": [\r\n        \"61e19456b0db4c324d253603\"\r\n    ],\r\n    \"attachments\": [],\r\n    \"groups\": [\r\n        \"63ff8a09094b355a8968b4dd\"\r\n    ],\r\n    \"courses\": [\r\n        \"64533d60ce7ccd0019e43fe9\"\r\n    ],\r\n    \"programs\": [\r\n        \"61113628c4ea52404a295b03\"\r\n    ],\r\n    \"slide\": \"62dc393ffe767342fb74cf13\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/content/add",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"content",
												"add"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edit Job",
							"item": [
								{
									"name": "User can able to edit the job",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful PATCH request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Edit Test1\",\r\n    \"description\": \"<p>Test</p>\",\r\n    \"category\": \"jobmarket\",\r\n    \"tags\": [],\r\n    \"dependencies\": [\r\n        \"614ce461cd7ba5854271b254\"\r\n    ],\r\n    \"attachments\": [],\r\n    \"groups\": [\r\n        \"62c052e7e040fb2303525006\"\r\n    ],\r\n    \"courses\": [\r\n        \"610c4a56b000a890e91f5d75\"\r\n    ],\r\n    \"programs\": [\r\n        \"61113628c4ea52404a295b03\"\r\n    ],\r\n    \"slide\": \"63f18811db87377003c977d7\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/content/edit/{{Job market add ID}}",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"content",
												"edit",
												"{{Job market add ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Join a job- first week(ContentRoutes)",
					"item": [
						{
							"name": "Add Comment",
							"item": [
								{
									"name": "As a user, i can able to add comment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"Join a job add comments ID\", jsonData.comment._id);\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful PATCH request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{admin_staging_token}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"comment\": \"<p>This comment is for testing</p>\",\r\n    \"contentId\": \"649fca837fae7e0020cc8e20\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/content/comment/create",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"content",
												"comment",
												"create"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edit job profile",
							"item": [
								{
									"name": "As a user, i can able to edit job information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful PATCH request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"test\",\r\n    \"description\": \"<p>Test33333</p>\",\r\n    \"category\": \"jobprofile\",\r\n    \"tags\": [\r\n        \"Test\"\r\n    ],\r\n    \"dependencies\": [\r\n        \"64968719c6f5ac0019c2b1ed\"\r\n    ],\r\n    \"attachments\": [],\r\n    \"groups\": [\r\n        \"62bfc73b2276e90284245470\"\r\n    ],\r\n    \"courses\": [\r\n        \"610c4a56b000a890e91f5d75\"\r\n    ],\r\n    \"programs\": [\r\n        \"615720f160b919ef942a0f5a\"\r\n    ],\r\n    \"slide\": \"64966dfbc6f5ac0019c2b101\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/content/edit/{{Join a job add comments ID}}",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"content",
												"edit",
												"{{Join a job add comments ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete job profile",
							"item": [
								{
									"name": "As a user, i can able to delete  job information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful DELETE request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"test\",\r\n    \"description\": \"<p>Test33333</p>\",\r\n    \"category\": \"jobprofile\",\r\n    \"tags\": [\r\n        \"Test\"\r\n    ],\r\n    \"dependencies\": [\r\n        \"64968719c6f5ac0019c2b1ed\"\r\n    ],\r\n    \"attachments\": [],\r\n    \"groups\": [\r\n        \"62bfc73b2276e90284245470\"\r\n    ],\r\n    \"courses\": [\r\n        \"610c4a56b000a890e91f5d75\"\r\n    ],\r\n    \"programs\": [\r\n        \"615720f160b919ef942a0f5a\"\r\n    ],\r\n    \"slide\": \"64966dfbc6f5ac0019c2b101\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/content/delete/{{Join a job add comments ID}}",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"content",
												"delete",
												"{{Join a job add comments ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Join a job- Second week(ContentRoutes)",
					"item": [
						{
							"name": "Comment Create",
							"item": [
								{
									"name": "As an user, i should be able to add content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"Join a job(2nd) add comments ID\", jsonData.comment._id);\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "{{admin_staging_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"comment\": \"<p>This comment is for join a job for second week </p>\",\r\n    \"contentId\": \"64a0eb527fae7e0020cc8fac\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/content/comment/create",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"content",
												"comment",
												"create"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Add Content",
							"item": [
								{
									"name": "As an user, i should be able to add content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "{{admin_staging_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Testt\",\r\n    \"description\": \"<p>Description with Test</p>\",\r\n    \"category\": \"secondweek\",\r\n    \"tags\": [],\r\n    \"dependencies\": [\r\n        \"6112920ed6508fb6449022c8\"\r\n    ],\r\n    \"attachments\": [],\r\n    \"groups\": [\r\n        \"62bfd6ed161e4544a4d5b2b2\"\r\n    ],\r\n    \"courses\": [\r\n        \"610c4a56b000a890e91f5d75\"\r\n    ],\r\n    \"programs\": [\r\n        \"61113628c4ea52404a295b03\"\r\n    ],\r\n    \"slide\": \"63f18811db87377003c977d7\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/content/add",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"content",
												"add"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edit content profile",
							"item": [
								{
									"name": "As an user, i should be able to edit job information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Get a good Job\",\r\n    \"description\": \"<p>Description with Test</p>\",\r\n    \"category\": \"secondweek\",\r\n    \"tags\": [],\r\n    \"dependencies\": [\r\n        \"6112920ed6508fb6449022c8\"\r\n    ],\r\n    \"attachments\": [],\r\n    \"groups\": [\r\n        \"62bfd6ed161e4544a4d5b2b2\"\r\n    ],\r\n    \"courses\": [\r\n        \"610c4a56b000a890e91f5d75\"\r\n    ],\r\n    \"programs\": [\r\n        \"61113628c4ea52404a295b03\"\r\n    ],\r\n    \"slide\": \"63f18811db87377003c977d7\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/content/edit/{{Join a job(2nd) add comments ID}}",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"content",
												"edit",
												"{{Join a job(2nd) add comments ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete job content",
							"item": [
								{
									"name": "As a user, i should be able to delete  job information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/content/delete/{{Join a job(2nd) add comments ID}}",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"content",
												"delete",
												"{{Join a job(2nd) add comments ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Interview",
					"item": [
						{
							"name": "Add new",
							"item": [
								{
									"name": "User can able to add new  interview",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Test1122\",\r\n    \"description\": \"<p>Test223344</p>\",\r\n    \"category\": \"interview\",\r\n    \"tags\": [\r\n        \"face to face\"\r\n    ],\r\n    \"dependencies\": [\r\n        \"614e2a9ccd7ba5854271b269\"\r\n    ],\r\n    \"attachments\": [],\r\n    \"groups\": [\r\n        \"62c05307e040fb2303525007\",\r\n        \"62bfd6ed161e4544a4d5b2b2\"\r\n    ],\r\n    \"courses\": [\r\n        \"610c4a56b000a890e91f5d75\"\r\n    ],\r\n    \"programs\": [\r\n        \"61113628c4ea52404a295b03\"\r\n    ],\r\n    \"slide\": \"6491702ac6f5ac0019c2aee7\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/content/add",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"content",
												"add"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edit interview",
							"item": [
								{
									"name": "(FAIL)User can able to edit the interview information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful PATCH request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Test for testing\",\r\n    \"description\": \"<p>Test223344</p>\",\r\n    \"category\": \"interview\",\r\n    \"tags\": [\r\n        \"face to face\"\r\n    ],\r\n    \"dependencies\": [\r\n        \"614e2a9ccd7ba5854271b269\"\r\n    ],\r\n    \"attachments\": [],\r\n    \"groups\": [\r\n        \"62c05307e040fb2303525007\",\r\n        \"62bfd6ed161e4544a4d5b2b2\"\r\n    ],\r\n    \"courses\": [\r\n        \"610c4a56b000a890e91f5d75\"\r\n    ],\r\n    \"programs\": [\r\n        \"61113628c4ea52404a295b03\"\r\n    ],\r\n    \"slide\": \"6491702ac6f5ac0019c2aee7\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/content/edit/64a1292341b0160024f23c03",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"content",
												"edit",
												"64a1292341b0160024f23c03"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Enter Name Search Box",
							"item": [
								{
									"name": "User can able to search the interview using the name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{admin_staging_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 1,\r\n    \"skip\": null,\r\n    \"sort_by\": \"newest\",\r\n    \"program\": null,\r\n    \"query\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}api/content/getall/interview?tag=all",
											"host": [
												"{{baseURL}}api"
											],
											"path": [
												"content",
												"getall",
												"interview"
											],
											"query": [
												{
													"key": "tag",
													"value": "all"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Job Profile(ContentRoutes)",
					"item": [
						{
							"name": "Add new",
							"item": [
								{
									"name": "User can able to add new  interview",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"Job profile add new ID\", jsonData.category._id);\r",
													"\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"For testing\",\r\n    \"categoryImage\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/category/create",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"category",
												"create"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edit interview",
							"item": [
								{
									"name": "User can able to edit the interview information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"For testing purpose\",\r\n    \"categoryId\": \"64a12b8a41b0160024f23c38\",\r\n    \"categoryImage\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/category/update",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"category",
												"update"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Admin can delete the interview",
							"item": [
								{
									"name": "Admin can able to delete the name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/category/delete",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"category",
												"delete"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Job Offer(ContentRoutes)",
					"item": [
						{
							"name": "Enter Content name",
							"item": [
								{
									"name": "User can able to search the interview using the name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"page\": 1,\r\n    \"limit\": 10,\r\n    \"sort_by\": \"newest\",\r\n    \"program\": \"\",\r\n    \"query\": \"test\",\r\n    \"creator\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/content/getall/joboffer?tag=all",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"content",
												"getall",
												"joboffer"
											],
											"query": [
												{
													"key": "tag",
													"value": "all"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edit job offer",
							"item": [
								{
									"name": "User can able to edit the interview information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"Body matches string response successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
													"});\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"New job offer for test\",\r\n    \"description\": \"<p>Test22334455</p>\",\r\n    \"category\": \"joboffer\",\r\n    \"tags\": [\r\n        \"Calm Down\"\r\n    ],\r\n    \"dependencies\": [\r\n        \"615c8c3360b919ef942a1698\"\r\n    ],\r\n    \"attachments\": [],\r\n    \"groups\": [\r\n        \"62bfc73b2276e90284245470\"\r\n    ],\r\n    \"courses\": [\r\n        \"610c4a56b000a890e91f5d75\"\r\n    ],\r\n    \"programs\": [\r\n        \"613770f4a5f50fcf7b891003\"\r\n    ],\r\n    \"slide\": \"64966dfbc6f5ac0019c2b101\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_user}}/api/content/edit/{{Job offer create id}}",
											"host": [
												"{{baseUrl_user}}"
											],
											"path": [
												"api",
												"content",
												"edit",
												"{{Job offer create id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Get Content",
					"item": [
						{
							"name": "User can be able to get all content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Body matches string response successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl_user}}/api/content/getcontent/62462c4cec662560b66dbb2c",
									"host": [
										"{{baseUrl_user}}"
									],
									"path": [
										"api",
										"content",
										"getcontent",
										"62462c4cec662560b66dbb2c"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Marketing service",
			"item": []
		},
		{
			"name": "HR & Accounting",
			"item": [
				{
					"name": "Career Application",
					"item": [
						{
							"name": "Submit Resume",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Candidate should be able to submit their resume on the job circular",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Candidates submited their application successfully\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Candidates can submit their resume within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "/C:/Users/TS4U/Desktop/TEST.doc"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/career/submit",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"career",
														"submit"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Candidate shouldn't be able to submit their resume on the job circular without token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"As an user should get the '400' status code when executing to submit resume without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"As an user should get the response below 2000 ms when executing to submit resume without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"User should get the 'Bad Request' status code name when executing to submit resume without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"As an user  should get the 'No resume is attached' message when executing to submit resume without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"No resume is attached\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to submit resume without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": []
														}
													]
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/career/submit",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"career",
														"submit"
													]
												}
											},
											"response": []
										},
										{
											"name": "Candidate shouldn't be able to submit their resume on the job circular without body file",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"As an user should get the '400' status code when executing to submit resume without inputting the token\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"As an user should get the response below 2000 ms when executing to submit resume without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"//Validate the status code name\r",
															"pm.test(\"As an user should get the 'Bad Request' status code name when executing to submit resume without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"//Validate the response body\r",
															"pm.test(\"As an user  should get the 'No resume is attached' message when executing to submit resume without inputting the token\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"error\");\r",
															"    pm.expect(pm.response.text()).to.include(\"No resume is attached\");\r",
															"\r",
															"});\r",
															"\r",
															"//Validate the response headers\r",
															"pm.test(\"Validate the response header of the request to submit resume without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": []
														}
													]
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/career/submit",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"career",
														"submit"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Check In",
					"item": [
						{
							"name": "My programe",
							"item": [
								{
									"name": "Ref Id",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "User should be able to save later on  the enrollment program",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"personalInformation\": {\r\n        \"firstName\": \"Mitul\",\r\n        \"lastName\": \"Das\",\r\n        \"middleName\": \"\",\r\n        \"otherName\": \"\",\r\n        \"dob\": \"2003-01-02T00:00:00+06:00\",\r\n        \"gender\": \"male\",\r\n        \"ssn\": \"\"\r\n    },\r\n    \"instantContact\": {\r\n        \"phone\": \"\",\r\n        \"whatsApp\": \"\",\r\n        \"outlook\": \"\",\r\n        \"address1\": \"\",\r\n        \"address2\": \"\",\r\n        \"city\": \"\",\r\n        \"state\": \"\",\r\n        \"zip\": \"\"\r\n    },\r\n    \"secondaryContact\": {\r\n        \"fullName\": \"\",\r\n        \"address1\": \"\",\r\n        \"address2\": \"\",\r\n        \"city\": \"\",\r\n        \"state\": \"\",\r\n        \"zip\": \"\",\r\n        \"phone\": \"\"\r\n    },\r\n    \"education\": {\r\n        \"education\": \"\",\r\n        \"majorProgram\": \"\",\r\n        \"occupation\": \"\",\r\n        \"companyName\": \"\",\r\n        \"experience\": \"\",\r\n        \"languageProficiency\": \"\"\r\n    },\r\n    \"payment\": {\r\n        \"method\": \"\",\r\n        \"bankName\": \"\",\r\n        \"acountType\": \"\",\r\n        \"acountNumber\": \"\",\r\n        \"routingNumber\": \"\"\r\n    },\r\n    \"additionalInfo\": {\r\n        \"isVeteran\": \"\",\r\n        \"isFelenoy\": \"\",\r\n        \"hasDrivingLicense\": \"\",\r\n        \"hasCreditCard\": \"\",\r\n        \"hasDegree\": \"\",\r\n        \"hasAssociateDegree\": \"\",\r\n        \"isAuthorizeUSA\": \"\",\r\n        \"hasCompunerKnowledge\": \"\",\r\n        \"hasBasicInternetSkill\": \"\",\r\n        \"hasEnglishWritingSkill\": \"\",\r\n        \"hasSlack\": \"\",\r\n        \"isJoinedSlack\": \"\",\r\n        \"hasZoom\": \"\",\r\n        \"isAvailableWorkshop\": \"\",\r\n        \"isRefer\": \"\",\r\n        \"referName\": \"\"\r\n    },\r\n    \"document\": {\r\n        \"remark\": \"\",\r\n        \"idCard\": \"\",\r\n        \"signature\": \"\",\r\n        \"check\": \"\",\r\n        \"otherDocument\": \"\",\r\n        \"isAgreedToPush\": true\r\n    },\r\n    \"step\": 1,\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"61113589c4ea52404a295afe\",\r\n    \"totalAmount\": 0,\r\n    \"email\": \"betib44104@rc3s.com\",\r\n    \"plan\": \"629a689380c4ff665817af73\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/user/savelater?refId=689404",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"user",
																"savelater"
															],
															"query": [
																{
																	"key": "refId",
																	"value": "689404"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "User shouldn't be able to save later on  the enrollment program without program id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"As an user i should get the '400' status code when executing to refer id without inputting the program id\", function () {\r",
																	"    pm.response.to.have.status(401);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"As an user i should get the response below 2000 ms when executing to refer id without inputting the program id\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"As an user i should get the 'Unauthorized' status code name when executing to refer id without inputting the program id\", function () {\r",
																	"    pm.response.to.have.status(\"Unauthorized\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to refer id without inputting the program id\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"personalInformation\": {\r\n        \"firstName\": \"Mitul\",\r\n        \"lastName\": \"Das\",\r\n        \"middleName\": \"\",\r\n        \"otherName\": \"\",\r\n        \"dob\": \"2003-01-02T00:00:00+06:00\",\r\n        \"gender\": \"male\",\r\n        \"ssn\": \"\"\r\n    },\r\n    \"instantContact\": {\r\n        \"phone\": \"\",\r\n        \"whatsApp\": \"\",\r\n        \"outlook\": \"\",\r\n        \"address1\": \"\",\r\n        \"address2\": \"\",\r\n        \"city\": \"\",\r\n        \"state\": \"\",\r\n        \"zip\": \"\"\r\n    },\r\n    \"secondaryContact\": {\r\n        \"fullName\": \"\",\r\n        \"address1\": \"\",\r\n        \"address2\": \"\",\r\n        \"city\": \"\",\r\n        \"state\": \"\",\r\n        \"zip\": \"\",\r\n        \"phone\": \"\"\r\n    },\r\n    \"education\": {\r\n        \"education\": \"\",\r\n        \"majorProgram\": \"\",\r\n        \"occupation\": \"\",\r\n        \"companyName\": \"\",\r\n        \"experience\": \"\",\r\n        \"languageProficiency\": \"\"\r\n    },\r\n    \"payment\": {\r\n        \"method\": \"\",\r\n        \"bankName\": \"\",\r\n        \"acountType\": \"\",\r\n        \"acountNumber\": \"\",\r\n        \"routingNumber\": \"\"\r\n    },\r\n    \"additionalInfo\": {\r\n        \"isVeteran\": \"\",\r\n        \"isFelenoy\": \"\",\r\n        \"hasDrivingLicense\": \"\",\r\n        \"hasCreditCard\": \"\",\r\n        \"hasDegree\": \"\",\r\n        \"hasAssociateDegree\": \"\",\r\n        \"isAuthorizeUSA\": \"\",\r\n        \"hasCompunerKnowledge\": \"\",\r\n        \"hasBasicInternetSkill\": \"\",\r\n        \"hasEnglishWritingSkill\": \"\",\r\n        \"hasSlack\": \"\",\r\n        \"isJoinedSlack\": \"\",\r\n        \"hasZoom\": \"\",\r\n        \"isAvailableWorkshop\": \"\",\r\n        \"isRefer\": \"\",\r\n        \"referName\": \"\"\r\n    },\r\n    \"document\": {\r\n        \"remark\": \"\",\r\n        \"idCard\": \"\",\r\n        \"signature\": \"\",\r\n        \"check\": \"\",\r\n        \"otherDocument\": \"\",\r\n        \"isAgreedToPush\": true\r\n    },\r\n    \"step\": 1,\r\n    \"program\": \"\",\r\n    \"session\": \"61113589c4ea52404a295afe\",\r\n    \"totalAmount\": 0,\r\n    \"email\": \"betib44104@rc3s.com\",\r\n    \"plan\": \"629a689380c4ff665817af73\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/user/savelater?refId=689404",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"user",
																"savelater"
															],
															"query": [
																{
																	"key": "refId",
																	"value": "689404"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "User shouldn't be able to save later on  the enrollment program without session id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"As an user i should get the '400' status code when executing to refer id without inputting the session id\", function () {\r",
																	"    pm.response.to.have.status(401);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"As an user i should get the response below 2000 ms when executing to refer id without inputting the session id\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"As an user i should get the 'Unauthorized' status code name when executing to refer id without inputting the session id\", function () {\r",
																	"    pm.response.to.have.status(\"Unauthorized\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to refer id without inputting the session id\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"personalInformation\": {\r\n        \"firstName\": \"Mitul\",\r\n        \"lastName\": \"Das\",\r\n        \"middleName\": \"\",\r\n        \"otherName\": \"\",\r\n        \"dob\": \"2003-01-02T00:00:00+06:00\",\r\n        \"gender\": \"male\",\r\n        \"ssn\": \"\"\r\n    },\r\n    \"instantContact\": {\r\n        \"phone\": \"\",\r\n        \"whatsApp\": \"\",\r\n        \"outlook\": \"\",\r\n        \"address1\": \"\",\r\n        \"address2\": \"\",\r\n        \"city\": \"\",\r\n        \"state\": \"\",\r\n        \"zip\": \"\"\r\n    },\r\n    \"secondaryContact\": {\r\n        \"fullName\": \"\",\r\n        \"address1\": \"\",\r\n        \"address2\": \"\",\r\n        \"city\": \"\",\r\n        \"state\": \"\",\r\n        \"zip\": \"\",\r\n        \"phone\": \"\"\r\n    },\r\n    \"education\": {\r\n        \"education\": \"\",\r\n        \"majorProgram\": \"\",\r\n        \"occupation\": \"\",\r\n        \"companyName\": \"\",\r\n        \"experience\": \"\",\r\n        \"languageProficiency\": \"\"\r\n    },\r\n    \"payment\": {\r\n        \"method\": \"\",\r\n        \"bankName\": \"\",\r\n        \"acountType\": \"\",\r\n        \"acountNumber\": \"\",\r\n        \"routingNumber\": \"\"\r\n    },\r\n    \"additionalInfo\": {\r\n        \"isVeteran\": \"\",\r\n        \"isFelenoy\": \"\",\r\n        \"hasDrivingLicense\": \"\",\r\n        \"hasCreditCard\": \"\",\r\n        \"hasDegree\": \"\",\r\n        \"hasAssociateDegree\": \"\",\r\n        \"isAuthorizeUSA\": \"\",\r\n        \"hasCompunerKnowledge\": \"\",\r\n        \"hasBasicInternetSkill\": \"\",\r\n        \"hasEnglishWritingSkill\": \"\",\r\n        \"hasSlack\": \"\",\r\n        \"isJoinedSlack\": \"\",\r\n        \"hasZoom\": \"\",\r\n        \"isAvailableWorkshop\": \"\",\r\n        \"isRefer\": \"\",\r\n        \"referName\": \"\"\r\n    },\r\n    \"document\": {\r\n        \"remark\": \"\",\r\n        \"idCard\": \"\",\r\n        \"signature\": \"\",\r\n        \"check\": \"\",\r\n        \"otherDocument\": \"\",\r\n        \"isAgreedToPush\": true\r\n    },\r\n    \"step\": 1,\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"\",\r\n    \"totalAmount\": 0,\r\n    \"email\": \"betib44104@rc3s.com\",\r\n    \"plan\": \"629a689380c4ff665817af73\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/user/savelater?refId=689404",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"user",
																"savelater"
															],
															"query": [
																{
																	"key": "refId",
																	"value": "689404"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "User shouldn't be able to save later on  the enrollment program without refid",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"As an user should get the '400' status code when executing to program without inputting the ref id\", function () {\r",
																	"    pm.response.to.have.status(401);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"As an user should get the response below 2000 ms when executing to program without inputting the ref id\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"As an user should get the 'Unauthorized' status code name when executing to program without inputting the ref id\", function () {\r",
																	"    pm.response.to.have.status(\"Unauthorized\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to program without inputting the ref id\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"personalInformation\": {\r\n        \"firstName\": \"Mitul\",\r\n        \"lastName\": \"Das\",\r\n        \"middleName\": \"\",\r\n        \"otherName\": \"\",\r\n        \"dob\": \"2003-01-02T00:00:00+06:00\",\r\n        \"gender\": \"male\",\r\n        \"ssn\": \"\"\r\n    },\r\n    \"instantContact\": {\r\n        \"phone\": \"\",\r\n        \"whatsApp\": \"\",\r\n        \"outlook\": \"\",\r\n        \"address1\": \"\",\r\n        \"address2\": \"\",\r\n        \"city\": \"\",\r\n        \"state\": \"\",\r\n        \"zip\": \"\"\r\n    },\r\n    \"secondaryContact\": {\r\n        \"fullName\": \"\",\r\n        \"address1\": \"\",\r\n        \"address2\": \"\",\r\n        \"city\": \"\",\r\n        \"state\": \"\",\r\n        \"zip\": \"\",\r\n        \"phone\": \"\"\r\n    },\r\n    \"education\": {\r\n        \"education\": \"\",\r\n        \"majorProgram\": \"\",\r\n        \"occupation\": \"\",\r\n        \"companyName\": \"\",\r\n        \"experience\": \"\",\r\n        \"languageProficiency\": \"\"\r\n    },\r\n    \"payment\": {\r\n        \"method\": \"\",\r\n        \"bankName\": \"\",\r\n        \"acountType\": \"\",\r\n        \"acountNumber\": \"\",\r\n        \"routingNumber\": \"\"\r\n    },\r\n    \"additionalInfo\": {\r\n        \"isVeteran\": \"\",\r\n        \"isFelenoy\": \"\",\r\n        \"hasDrivingLicense\": \"\",\r\n        \"hasCreditCard\": \"\",\r\n        \"hasDegree\": \"\",\r\n        \"hasAssociateDegree\": \"\",\r\n        \"isAuthorizeUSA\": \"\",\r\n        \"hasCompunerKnowledge\": \"\",\r\n        \"hasBasicInternetSkill\": \"\",\r\n        \"hasEnglishWritingSkill\": \"\",\r\n        \"hasSlack\": \"\",\r\n        \"isJoinedSlack\": \"\",\r\n        \"hasZoom\": \"\",\r\n        \"isAvailableWorkshop\": \"\",\r\n        \"isRefer\": \"\",\r\n        \"referName\": \"\"\r\n    },\r\n    \"document\": {\r\n        \"remark\": \"\",\r\n        \"idCard\": \"\",\r\n        \"signature\": \"\",\r\n        \"check\": \"\",\r\n        \"otherDocument\": \"\",\r\n        \"isAgreedToPush\": true\r\n    },\r\n    \"step\": 1,\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"\",\r\n    \"totalAmount\": 0,\r\n    \"email\": \"betib44104@rc3s.com\",\r\n    \"plan\": \"629a689380c4ff665817af73\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/user/savelater?refId=",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"user",
																"savelater"
															],
															"query": [
																{
																	"key": "refId",
																	"value": ""
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Enroll",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "User should be able to enroll the program",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"User do the enrollment on a program successfully \", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"User do the enrollment on a program time within 1500ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"personalInformation\": {\r\n        \"firstName\": \"Testt\",\r\n        \"lastName\": \"Das\",\r\n        \"middleName\": \"\",\r\n        \"otherName\": \"\",\r\n        \"dob\": \"'2003-01-01T08:51:10Z'\",\r\n        \"gender\": \"male\",\r\n        \"ssn\": \"\"\r\n    },\r\n    \"instantContact\": {\r\n        \"phone\": \"(261) 121-4013\",\r\n        \"whatsApp\": \"(462) 156-9563\",\r\n        \"outlook\": \"\",\r\n        \"address1\": \"54558415vfhsdi\",\r\n        \"address2\": \"\",\r\n        \"city\": \"dfvsd\",\r\n        \"state\": \"Alabama\",\r\n        \"zip\": \"32191\"\r\n    },\r\n    \"secondaryContact\": {\r\n        \"fullName\": \"gtyllguyui\",\r\n        \"address1\": \"jkl;k23vg263\",\r\n        \"address2\": \"\",\r\n        \"city\": \"oikopv4556\",\r\n        \"state\": \"California\",\r\n        \"zip\": \"644635k146\",\r\n        \"phone\": \"(526) 3552-6562\"\r\n    },\r\n    \"education\": {\r\n        \"education\": \"highSchool\",\r\n        \"majorProgram\": \"\",\r\n        \"occupation\": \"4kjiku\",\r\n        \"companyName\": \"\",\r\n        \"experience\": \"\",\r\n        \"languageProficiency\": \"begineer\"\r\n    },\r\n    \"payment\": {\r\n        \"method\": \"cash\",\r\n        \"bankName\": \"\",\r\n        \"acountType\": \"\",\r\n        \"acountNumber\": \"\",\r\n        \"routingNumber\": \"\"\r\n    },\r\n    \"additionalInfo\": {\r\n        \"isVeteran\": false,\r\n        \"isFelenoy\": false,\r\n        \"hasDrivingLicense\": false,\r\n        \"hasCreditCard\": false,\r\n        \"hasDegree\": false,\r\n        \"hasAssociateDegree\": true,\r\n        \"isAuthorizeUSA\": true,\r\n        \"hasCompunerKnowledge\": true,\r\n        \"hasBasicInternetSkill\": true,\r\n        \"hasEnglishWritingSkill\": true,\r\n        \"hasSlack\": true,\r\n        \"isJoinedSlack\": true,\r\n        \"hasZoom\": true,\r\n        \"isAvailableWorkshop\": true,\r\n        \"isRefer\": false,\r\n        \"referName\": \"\"\r\n    },\r\n    \"document\": {\r\n        \"remark\": \"\",\r\n        \"idCard\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1689662890092-Mituldas.png\",\r\n        \"signature\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1689662864229-blob\",\r\n        \"check\": \"\",\r\n        \"otherDocument\": \"\",\r\n        \"isAgreedToPush\": true\r\n    },\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"61113589c4ea52404a295afe\",\r\n    \"totalAmount\": 0,\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"plan\": \"629a689380c4ff665817af73\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/user/enroll",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"user",
																"enroll"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "User shouldn't be able to enroll the program to given without body data",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"As an user should get the '400' status code when executing to enroll without inputting the body data\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"As an user should get the response below 2000 ms when executing to enroll without inputting the body data\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"As an user should get the 'Bad Request' status code name when executing to enroll without inputting the body data\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to enroll without inputting the body data\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/user/enroll",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"user",
																"enroll"
															]
														}
													},
													"response": []
												},
												{
													"name": "User shouldn't be able to enroll the program to given without personal Information",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"As an user should get the '400' status code when executing to enroll without inputting the personal Information\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"As an user should get the response below 2000 ms when executing to enroll without inputting the personal Information\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"As an user should get the 'Bad Request' status code name when executing to enroll without inputting the personal Information\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to enroll without inputting the personal Information\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n   \r\n    \"instantContact\": {\r\n        \"phone\": \"(261) 121-4013\",\r\n        \"whatsApp\": \"(462) 156-9563\",\r\n        \"outlook\": \"\",\r\n        \"address1\": \"54558415vfhsdi\",\r\n        \"address2\": \"\",\r\n        \"city\": \"dfvsd\",\r\n        \"state\": \"Alabama\",\r\n        \"zip\": \"32191\"\r\n    },\r\n    \"secondaryContact\": {\r\n        \"fullName\": \"gtyllguyui\",\r\n        \"address1\": \"jkl;k23vg263\",\r\n        \"address2\": \"\",\r\n        \"city\": \"oikopv4556\",\r\n        \"state\": \"California\",\r\n        \"zip\": \"644635k146\",\r\n        \"phone\": \"(526) 3552-6562\"\r\n    },\r\n    \"education\": {\r\n        \"education\": \"highSchool\",\r\n        \"majorProgram\": \"\",\r\n        \"occupation\": \"4kjiku\",\r\n        \"companyName\": \"\",\r\n        \"experience\": \"\",\r\n        \"languageProficiency\": \"begineer\"\r\n    },\r\n    \"payment\": {\r\n        \"method\": \"cash\",\r\n        \"bankName\": \"\",\r\n        \"acountType\": \"\",\r\n        \"acountNumber\": \"\",\r\n        \"routingNumber\": \"\"\r\n    },\r\n    \"additionalInfo\": {\r\n        \"isVeteran\": false,\r\n        \"isFelenoy\": false,\r\n        \"hasDrivingLicense\": false,\r\n        \"hasCreditCard\": false,\r\n        \"hasDegree\": false,\r\n        \"hasAssociateDegree\": true,\r\n        \"isAuthorizeUSA\": true,\r\n        \"hasCompunerKnowledge\": true,\r\n        \"hasBasicInternetSkill\": true,\r\n        \"hasEnglishWritingSkill\": true,\r\n        \"hasSlack\": true,\r\n        \"isJoinedSlack\": true,\r\n        \"hasZoom\": true,\r\n        \"isAvailableWorkshop\": true,\r\n        \"isRefer\": false,\r\n        \"referName\": \"\"\r\n    },\r\n    \"document\": {\r\n        \"remark\": \"\",\r\n        \"idCard\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1689662890092-Mituldas.png\",\r\n        \"signature\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1689662864229-blob\",\r\n        \"check\": \"\",\r\n        \"otherDocument\": \"\",\r\n        \"isAgreedToPush\": true\r\n    },\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"61113589c4ea52404a295afe\",\r\n    \"totalAmount\": 0,\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"plan\": \"629a689380c4ff665817af73\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/user/enroll",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"user",
																"enroll"
															]
														}
													},
													"response": []
												},
												{
													"name": "User shouldn't be able to enroll the program to given without docoment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"As an user should get the '400' status code when executing to enroll without inputting the docoment Information\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"As an user should get the response below 2000 ms when executing to enroll without inputting the docoment Information\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"As an user should get the 'Bad Request' status code name when executing to enroll without inputting the docoment Information\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to enroll without inputting the docoment Information\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n   \r\n    \"instantContact\": {\r\n        \"phone\": \"(261) 121-4013\",\r\n        \"whatsApp\": \"(462) 156-9563\",\r\n        \"outlook\": \"\",\r\n        \"address1\": \"54558415vfhsdi\",\r\n        \"address2\": \"\",\r\n        \"city\": \"dfvsd\",\r\n        \"state\": \"Alabama\",\r\n        \"zip\": \"32191\"\r\n    },\r\n    \"secondaryContact\": {\r\n        \"fullName\": \"gtyllguyui\",\r\n        \"address1\": \"jkl;k23vg263\",\r\n        \"address2\": \"\",\r\n        \"city\": \"oikopv4556\",\r\n        \"state\": \"California\",\r\n        \"zip\": \"644635k146\",\r\n        \"phone\": \"(526) 3552-6562\"\r\n    },\r\n    \"education\": {\r\n        \"education\": \"highSchool\",\r\n        \"majorProgram\": \"\",\r\n        \"occupation\": \"4kjiku\",\r\n        \"companyName\": \"\",\r\n        \"experience\": \"\",\r\n        \"languageProficiency\": \"begineer\"\r\n    },\r\n    \"payment\": {\r\n        \"method\": \"cash\",\r\n        \"bankName\": \"\",\r\n        \"acountType\": \"\",\r\n        \"acountNumber\": \"\",\r\n        \"routingNumber\": \"\"\r\n    },\r\n    \"additionalInfo\": {\r\n        \"isVeteran\": false,\r\n        \"isFelenoy\": false,\r\n        \"hasDrivingLicense\": false,\r\n        \"hasCreditCard\": false,\r\n        \"hasDegree\": false,\r\n        \"hasAssociateDegree\": true,\r\n        \"isAuthorizeUSA\": true,\r\n        \"hasCompunerKnowledge\": true,\r\n        \"hasBasicInternetSkill\": true,\r\n        \"hasEnglishWritingSkill\": true,\r\n        \"hasSlack\": true,\r\n        \"isJoinedSlack\": true,\r\n        \"hasZoom\": true,\r\n        \"isAvailableWorkshop\": true,\r\n        \"isRefer\": false,\r\n        \"referName\": \"\"\r\n    },\r\n   \r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"61113589c4ea52404a295afe\",\r\n    \"totalAmount\": 0,\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"plan\": \"629a689380c4ff665817af73\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/user/enroll",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"user",
																"enroll"
															]
														}
													},
													"response": []
												},
												{
													"name": "User shouldn't be able to enroll the program to given without program id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"As an user should get the '400' status code when executing to enroll without inputting the program id\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"As an user should get the response below 2000 ms when executing to enroll without inputting the program id\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"As an user should get the 'Bad Request' status code name when executing to enroll without inputting the program id\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"//Validate the response body\r",
																	"pm.test(\"As an user  should get the 'This plan is not available for this program' message when executing to enroll without inputting the program id\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"This plan is not available for this program\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to enroll without inputting the program id\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"personalInformation\": {\r\n        \"firstName\": \"Testt\",\r\n        \"lastName\": \"Das\",\r\n        \"middleName\": \"\",\r\n        \"otherName\": \"\",\r\n        \"dob\": \"'2003-01-01T08:51:10Z'\",\r\n        \"gender\": \"male\",\r\n        \"ssn\": \"\"\r\n    },\r\n    \"instantContact\": {\r\n        \"phone\": \"(261) 121-4013\",\r\n        \"whatsApp\": \"(462) 156-9563\",\r\n        \"outlook\": \"\",\r\n        \"address1\": \"54558415vfhsdi\",\r\n        \"address2\": \"\",\r\n        \"city\": \"dfvsd\",\r\n        \"state\": \"Alabama\",\r\n        \"zip\": \"32191\"\r\n    },\r\n    \"secondaryContact\": {\r\n        \"fullName\": \"gtyllguyui\",\r\n        \"address1\": \"jkl;k23vg263\",\r\n        \"address2\": \"\",\r\n        \"city\": \"oikopv4556\",\r\n        \"state\": \"California\",\r\n        \"zip\": \"644635k146\",\r\n        \"phone\": \"(526) 3552-6562\"\r\n    },\r\n    \"education\": {\r\n        \"education\": \"highSchool\",\r\n        \"majorProgram\": \"\",\r\n        \"occupation\": \"4kjiku\",\r\n        \"companyName\": \"\",\r\n        \"experience\": \"\",\r\n        \"languageProficiency\": \"begineer\"\r\n    },\r\n    \"payment\": {\r\n        \"method\": \"cash\",\r\n        \"bankName\": \"\",\r\n        \"acountType\": \"\",\r\n        \"acountNumber\": \"\",\r\n        \"routingNumber\": \"\"\r\n    },\r\n    \"additionalInfo\": {\r\n        \"isVeteran\": false,\r\n        \"isFelenoy\": false,\r\n        \"hasDrivingLicense\": false,\r\n        \"hasCreditCard\": false,\r\n        \"hasDegree\": false,\r\n        \"hasAssociateDegree\": true,\r\n        \"isAuthorizeUSA\": true,\r\n        \"hasCompunerKnowledge\": true,\r\n        \"hasBasicInternetSkill\": true,\r\n        \"hasEnglishWritingSkill\": true,\r\n        \"hasSlack\": true,\r\n        \"isJoinedSlack\": true,\r\n        \"hasZoom\": true,\r\n        \"isAvailableWorkshop\": true,\r\n        \"isRefer\": false,\r\n        \"referName\": \"\"\r\n    },\r\n    \"document\": {\r\n        \"remark\": \"\",\r\n        \"idCard\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1689662890092-Mituldas.png\",\r\n        \"signature\": \"https://ts4uportal-all-files-upload.nyc3.digitaloceanspaces.com/enrollment/1689662864229-blob\",\r\n        \"check\": \"\",\r\n        \"otherDocument\": \"\",\r\n        \"isAgreedToPush\": true\r\n    },\r\n   \r\n    \"session\": \"61113589c4ea52404a295afe\",\r\n    \"totalAmount\": 0,\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"plan\": \"629a689380c4ff665817af73\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/user/enroll",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"user",
																"enroll"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "My enrollment form",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "User should be able to fill-up the enrollment form on the program",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"User fill-up the enrollment form on the program successfully \", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"User fill-up the enrollment form on the program time within 1500ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl_user}}/api/user/myenrollmentform",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"user",
																"myenrollmentform"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "User shouldn't be able to fill-up the enrollment form on the program given without token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"As a user should get the '400' status code when executing to enrollment form without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"As a user should get the response below 2000 ms when executing to enrollment form without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"As a user should get the 'Bad Request' status code name when executing to enrollment form without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"As a user should get the 'Authorization required' message when executing to enrollment form without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to enrollment form without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl_user}}/api/user/myenrollmentform",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"user",
																"myenrollmentform"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "(Fail)Update image",
									"item": [
										{
											"name": "User should be able to update their image",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"User updated their image successfully \", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"User updated their image within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															"pm.test(\"Users key matched\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"personalInformation\");\r",
															"     pm.expect(pm.response.text()).to.include(\"profilePicture\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{user_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "/C:/Users/TS4U/Desktop/114738.jpg"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl_user}}/api/user/updateimage",
													"host": [
														"{{baseUrl_user}}"
													],
													"path": [
														"api",
														"user",
														"updateimage"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Register",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "User should be able to register on the program",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"User registered on the programme successfully \", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"User registered on the programme within 1500ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_staging_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstName\": \"Mitul\",\r\n    \"lastName\": \"Das\",\r\n    \"phone\": \"{{$randomPhoneNumber}}\",\r\n    \"password\": \"Mituldas@#$1999\",\r\n    \"confirm\": \"Mituldas@#$1999\",\r\n    \"email\": \"{{$randomEmail}}}\",\r\n    \"\": \"+1 (526) 546-45214\",\r\n    \"referredBy\": null\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/user/register",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"user",
																"register"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "User shouldn't be able to register on the program given without phone number",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"As a user should get the '400' status code when executing to enrollment form without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"As a user should get the response below 2000 ms when executing to enrollment form without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"As a user should get the 'Bad Request' status code name when executing to enrollment form without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"As a user should get the 'Firstname Lastname, email, phone and password is required' message when executing to enrollment form without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Firstname Lastname, email, phone and password is required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to enrollment form without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstName\": \"Mitul\",\r\n    \"lastName\": \"Das\",\r\n    \"password\": \"Mituldas@#$1999\",\r\n    \"confirm\": \"Mituldas@#$1999\",\r\n    \"email\": \"{{$randomEmail}}}\",\r\n    \"\": \"+1 (526) 546-45214\",\r\n    \"referredBy\": null\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/user/register",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"user",
																"register"
															]
														}
													},
													"response": []
												},
												{
													"name": "User shouldn't be able to register on the program given without phone number Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"As a user should get the '400' status code when executing to enrollment form without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"As a user should get the response below 2000 ms when executing to enrollment form without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"As a user should get the 'Bad Request' status code name when executing to enrollment form without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"As a user should get the 'Firstname Lastname, email, phone and password is required' message when executing to enrollment form without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Firstname Lastname, email, phone and password is required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to enrollment form without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{user_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstName\": \"Mitul\",\r\n    \"lastName\": \"Das\",\r\n    \"password\": \"Mituldas@#$1999\",\r\n    \"confirm\": \"Mituldas@#$1999\",\r\n    \"email\": \"{{$randomEmail}}}\",\r\n    \"\": \"+1 (526) 546-45214\",\r\n    \"referredBy\": null\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl_user}}/api/user/register",
															"host": [
																"{{baseUrl_user}}"
															],
															"path": [
																"api",
																"user",
																"register"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Near me",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "User should be able to search on the program by the name",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Validate the status code\r",
																	"pm.test(\"User search the programme successfully \", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"User search the programme within 1500ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Users key matched\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"personalInformation\");\r",
																	"     pm.expect(pm.response.text()).to.include(\"profilePicture\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{admin_token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"61113589c4ea52404a295afe\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/user/nearme",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"user",
																"nearme"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "User shouldn't be able to search on the program by the name using without token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"//Validate the status code\r",
																	"pm.test(\"As a user should get the '400' status code when executing to enrollment form without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"//validate the response time\r",
																	"pm.test(\"As a user should get the response below 2000 ms when executing to enrollment form without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
																	"});\r",
																	"//Validate the status code name\r",
																	"pm.test(\"As a user should get the 'Bad Request' status code name when executing to enrollment form without inputting the token\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//Validate the response body\r",
																	"pm.test(\"As a user should get the 'Authorization required' message when executing to enrollment form without inputting the token\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"error\");\r",
																	"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Validate the response headers\r",
																	"pm.test(\"Validate the response header of the request to enrollment form without inputting the token\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"     pm.response.to.have.header(\"Date\");\r",
																	"     pm.response.to.have.header(\"Connection\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"program\": \"61113628c4ea52404a295b03\",\r\n    \"session\": \"61113589c4ea52404a295afe\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/user/nearme",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"user",
																"nearme"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		}
	]
}